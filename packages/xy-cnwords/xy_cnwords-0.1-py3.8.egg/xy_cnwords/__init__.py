"""
中文 / Chinese:
基于snownlp和jieba的中文简单语言处理整合包。
在基础方面拥有比它们更简单的API。

English (Use Baidu Translation Machine (https://fanyi.baidu.com/#zh/en/)to translate from Chinese):
Simple language processing integration package based on snownlp and jieba.
They have simpler APIs on the ground.
"""

from snownlp import SnowNLP
import jieba
import json


class XyWord:
    """
中文 / Chinese:
提供整合后的基础语言处理功能。

    """
    def __init__(self, msg):
        """
        提供整合后的基础语言处理功能。

        self.self_nlp: 通过待处理文字(msg)生成的SnowNlp对象。SnowNlp object generated by pending text.
        self.sentiments: 用snownlp获取的情感值。Emotional value obtained with snownlp.
        self.fj: 用snownlp分割的分句列表。
        self.fj_count: 分句的个数。
        self.summary: snownlp提取的fj_count个摘要。
        self.keywords: snownlp提取的fj_count个关键词。
        self.words: 用jieba分出的词语列表。
        self.tf: snownlp分析的tf(词频)
        self.idf: snownlp分析的idf(逆文本频率指数)
        self.msg_info: 将上述信息封装起来的字典，用XyWord.getinfo也能获取
        :param msg: 待处理的文字
        """
        self.msg = msg
        self.self_nlp = SnowNLP(msg)
        self.sentiments = self.self_nlp.sentiments
        self.fj = self.self_nlp.sentences
        self.fj_count = len(self.fj)
        self.summary = self.self_nlp.summary(self.fj_count)
        self.keywords = self.self_nlp.keywords(self.fj_count)
        self.words = list(jieba.cut(msg))
#        self.cuted_fj = self.cut_fjs(self.fj)
#        self.cuted_fj_nlp = SnowNLP(self.cuted_fj)
        self.tf = self.self_nlp.tf
        self.idf = self.self_nlp.idf
        self.msg_info = {
            "sentiments": self.sentiments,
            "counts": self.fj_count,
            "fjs": self.fj,
            "summary": self.summary,
            "keywords": self.keywords,
            "words": self.words,
#            "cuted_fj": self.cuted_fj,
            "tf": self.tf,
            "idf": self.idf
        }
        self.f_msg_info = json.dumps(self.msg_info, indent=2, ensure_ascii=False, sort_keys=False,
                                     separators=(',', ':'))

    def cut_fjs(self, fj_ls: list):
        cuted_fj = []
        for fj in fj_ls:
            cuted_fj.append(jieba.cut(fj))
        return cuted_fj

    @property
    def get_info(self):
        return self.msg_info

    def __add__(self, other):
        return XyWord(self.msg + other.msg)

    def __str__(self):
        return self.msg

    def __int__(self):
        return self.sentiments


if __name__ == '__main__':
    s = input()
    sw = XyWord(s)
    print(sw.get_info)
