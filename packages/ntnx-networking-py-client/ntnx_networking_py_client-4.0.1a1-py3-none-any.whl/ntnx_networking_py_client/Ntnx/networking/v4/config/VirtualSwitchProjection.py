# coding: utf-8


"""
IGNORE:
    Nutanix Networking Versioned APIs

    Manage networking configuration on Nutanix clusters, including AHV and advanced networking.  # noqa: E501

    OpenAPI spec version: 4.0.1-alpha-1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from ntnx_networking_py_client.Ntnx.networking.v4.config.BondModeType import BondModeType  # noqa: F401,E501
from ntnx_networking_py_client.Ntnx.networking.v4.config.Cluster import Cluster  # noqa: F401,E501
from ntnx_networking_py_client.Ntnx.networking.v4.config.VirtualSwitch import VirtualSwitch  # noqa: F401,E501

"""
IGNORE:
NOTE: This class is auto generated by the swagger code generator program.

Do not edit the class manually.
IGNORE
"""


class VirtualSwitchProjection(VirtualSwitch):
    """VirtualSwitchProjection - a model defined in Swagger"""
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """ # noqa: E501
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'is_default': 'bool',
        'quick_mode': 'bool',
        'deployment_error': 'bool',
        'mtu': 'int',
        'bond_mode': 'networking.v4.config.BondModeType',
        'clusters': 'list[networking.v4.config.Cluster]',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'is_default': 'isDefault',
        'quick_mode': 'quickMode',
        'deployment_error': 'deploymentError',
        'mtu': 'mtu',
        'bond_mode': 'bondMode',
        'clusters': 'clusters',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, description=None, is_default=False, quick_mode=False, deployment_error=None, mtu=None, bond_mode=None, clusters=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        """VirtualSwitchProjection - a model defined in Swagger
            
        """
        VirtualSwitch.__init__(self, name, description, is_default, quick_mode, deployment_error, mtu, bond_mode, clusters, ext_id, links, tenant_id, *args, **kwargs)
        self.discriminator = None

    def _initialize_object_type(self):
        return 'networking.v4.config.VirtualSwitchProjection'

    def _initialize_fq_object_type(self):
        return 'networking.v4.r0.a1.config.VirtualSwitchProjection'


    def _to_dict(self, sanitize):
        """
        Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.
        :param bool sanitize
        """

        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize))
                    if hasattr(item[1], "_to_dict") else item,
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(VirtualSwitchProjection, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dict"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VirtualSwitchProjection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

