# coding: utf-8


"""
IGNORE:
    Nutanix Networking Versioned APIs

    Manage networking configuration on Nutanix clusters, including AHV and advanced networking.  # noqa: E501

    OpenAPI spec version: 4.0.1-alpha-1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from ntnx_networking_py_client.Ntnx.networking.v4.config.State import State  # noqa: F401,E501
from ntnx_networking_py_client.Ntnx.networking.v4.config.StretchState import StretchState  # noqa: F401,E501

"""
IGNORE:
NOTE: This class is auto generated by the swagger code generator program.

Do not edit the class manually.
IGNORE
"""


class StretchStatus(object):
    """StretchStatus - a model defined in Swagger"""
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """ # noqa: E501
    swagger_types = {
        'detail': 'str',
        'state': 'networking.v4.config.StretchState',
        'tunnel_state': 'networking.v4.config.State',
        'interface_state': 'networking.v4.config.State',
        'round_trip_time_milliseconds': 'float',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'detail': 'detail',
        'state': 'state',
        'tunnel_state': 'tunnelState',
        'interface_state': 'interfaceState',
        'round_trip_time_milliseconds': 'roundTripTimeMilliseconds',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, detail=None, state=None, tunnel_state=None, interface_state=None, round_trip_time_milliseconds=None, *args, **kwargs):  # noqa: E501
        """StretchStatus - a model defined in Swagger
            \nCurrent status of the Layer2 extension among subnets.
        """
        self.__detail = None
        self.__state = None
        self.__tunnel_state = None
        self.__interface_state = None
        self.__round_trip_time_milliseconds = None
        self.discriminator = None
        if detail is not None:
            self.__detail = detail
        if state is not None:
            self.__state = state
        if tunnel_state is not None:
            self.__tunnel_state = tunnel_state
        if interface_state is not None:
            self.__interface_state = interface_state
        if round_trip_time_milliseconds is not None:
            self.__round_trip_time_milliseconds = round_trip_time_milliseconds
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'networking.v4.config.StretchStatus'

    def _initialize_fq_object_type(self):
        return 'networking.v4.r0.a1.config.StretchStatus'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fqObjectType": self._initialize_fq_object_type()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def detail(self):
        """`{ str }`
            \nDetailed text describing the runtime status of this stretch configuration.
        """ # noqa: E501
        return self.__detail

    @detail.setter
    def detail(self, detail):

        self.__detail = detail

    @property
    def state(self):
        """`{ networking.v4.config.StretchState }`
            
        """ # noqa: E501
        return self.__state

    @state.setter
    def state(self, state):

        self.__state = state

    @property
    def tunnel_state(self):
        """`{ networking.v4.config.State }`
            
        """ # noqa: E501
        return self.__tunnel_state

    @tunnel_state.setter
    def tunnel_state(self, tunnel_state):

        self.__tunnel_state = tunnel_state

    @property
    def interface_state(self):
        """`{ networking.v4.config.State }`
            
        """ # noqa: E501
        return self.__interface_state

    @interface_state.setter
    def interface_state(self, interface_state):

        self.__interface_state = interface_state

    @property
    def round_trip_time_milliseconds(self):
        """`{ float }`
            \nThe round-trip time, in milliseconds, between subnets in this stretch configuration.
        """ # noqa: E501
        return self.__round_trip_time_milliseconds

    @round_trip_time_milliseconds.setter
    def round_trip_time_milliseconds(self, round_trip_time_milliseconds):

        self.__round_trip_time_milliseconds = round_trip_time_milliseconds

    @property
    def _reserved(self):
        """`{ dict(str, object) }`
            
        """ # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """`{ str }`
            
        """ # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """`{ dict(str, object) }`
            
        """ # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """
        Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.
        :param bool sanitize
        """

        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize))
                    if hasattr(item[1], "_to_dict") else item,
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(StretchStatus, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dict"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StretchStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

