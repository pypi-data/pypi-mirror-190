# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['cryton_core',
 'cryton_core.cryton_app',
 'cryton_core.cryton_app.management',
 'cryton_core.cryton_app.management.commands',
 'cryton_core.cryton_app.migrations',
 'cryton_core.cryton_app.views',
 'cryton_core.etc',
 'cryton_core.lib',
 'cryton_core.lib.models',
 'cryton_core.lib.services',
 'cryton_core.lib.triggers',
 'cryton_core.lib.util']

package_data = \
{'': ['*'],
 'cryton_core': ['static/admin/css/*',
                 'static/admin/css/vendor/select2/*',
                 'static/admin/fonts/*',
                 'static/admin/img/*',
                 'static/admin/img/gis/*',
                 'static/admin/js/*',
                 'static/admin/js/admin/*',
                 'static/admin/js/vendor/jquery/*',
                 'static/admin/js/vendor/select2/*',
                 'static/admin/js/vendor/select2/i18n/*',
                 'static/admin/js/vendor/xregexp/*',
                 'static/drf_spectacular_sidecar/redoc/bundles/*',
                 'static/drf_spectacular_sidecar/swagger-ui-dist/*',
                 'static/rest_framework/css/*',
                 'static/rest_framework/docs/css/*',
                 'static/rest_framework/docs/img/*',
                 'static/rest_framework/docs/js/*',
                 'static/rest_framework/fonts/*',
                 'static/rest_framework/img/*',
                 'static/rest_framework/js/*']}

install_requires = \
['AMQPStorm>=2.10.4,<2.11.0',
 'APScheduler>=3.8.1,<3.9.0',
 'Django>=4.0.1,<4.1.0',
 'Jinja2>=3.0.3,<3.1.0',
 'PyYAML>=6.0,<6.1',
 'SQLAlchemy>=1.4.29,<1.5.0',
 'django-cors-headers>=3.11.0,<3.12.0',
 'djangorestframework>=3.13.1,<3.14.0',
 'drf-spectacular-sidecar>=2022.2.21,<2022.3.0',
 'drf-spectacular>=0.21.2,<0.22.0',
 'gunicorn>=20.1.0,<20.2.0',
 'model-bakery>=1.4.0,<1.5.0',
 'psycopg2-binary>=2.9.5,<2.10.0',
 'python-dotenv>=0.20.0,<0.21.0',
 'pytz>=2021.3,<2021.4',
 'rpyc>=5.0.1,<5.1.0',
 'schema>=0.7.5,<0.8.0',
 'structlog>=21.5.0,<21.6.0',
 'tzlocal>=4.1,<4.2',
 'uuid>=1.30,<1.31',
 'uvicorn>=0.17.5,<0.18.0']

entry_points = \
{'console_scripts': ['cryton-core = cryton_core.manage:main']}

setup_kwargs = {
    'name': 'cryton-core',
    'version': '2022.2.2',
    'description': 'Advanced scheduler for attack scenarios',
    'long_description': '[[_TOC_]]\n\n![Coverage](https://gitlab.ics.muni.cz/cryton/cryton-core/badges/master/coverage.svg)\n\n# Cryton Core\n\n## Description\nCryton Core is the center point of the Cryton toolset. It is used for:\n- Creating, planning, and scheduling attack scenarios.\n- Generating reports from attack scenarios.\n- Controlling Workers and scenarios execution.\n\nTo be able to execute the attack scenarios, you \nalso need to install the **[Cryton Worker](https://gitlab.ics.muni.cz/cryton/cryton-worker)** \nand **[Cryton CLI](https://gitlab.ics.muni.cz/cryton/cryton-cli)** package. Optionally you can install\n[Cryton Frontend](https://gitlab.ics.muni.cz/cryton/cryton-frontend) for non-command line experience.\n\nCryton toolset is tested and targeted primarily on **Debian** and **Kali Linux**. Please keep in mind that \n**only the latest version is supported** and issues regarding different OS or distributions may **not** be resolved.\n\n[Link to the documentation](https://cryton.gitlab-pages.ics.muni.cz/cryton-documentation/).\n\n## Settings\nCryton Core uses environment variables for its settings. Please update them to your needs.\n\n| name                                      | value                              | example                      | description                                                                                                                                                                                                                                                         |\n|-------------------------------------------|------------------------------------|------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| CRYTON_CORE_RABBIT_HOST                   | string                             | 127.0.0.1                    | RabbitMQ server host.                                                                                                                                                                                                                                               |\n| CRYTON_CORE_RABBIT_PORT                   | int                                | 5672                         | RabbitMQ server port.                                                                                                                                                                                                                                               |\n| CRYTON_CORE_RABBIT_USERNAME               | string                             | admin                        | Username for RabbitMQ server login.                                                                                                                                                                                                                                 |\n| CRYTON_CORE_RABBIT_PASSWORD               | string                             | mypass                       | Password for RabbitMQ server login.                                                                                                                                                                                                                                 |\n| CRYTON_CORE_DB_HOST                       | string                             | 127.0.0.1                    | Postgres server host.                                                                                                                                                                                                                                               |\n| CRYTON_CORE_DB_PORT                       | int                                | 5432                         | Postgres server port.                                                                                                                                                                                                                                               |\n| CRYTON_CORE_DB_NAME                       | string                             | cryton                       | Used Postgres database name. **(do not change, if you don\'t know what you\'re doing)**                                                                                                                                                                               |\n| CRYTON_CORE_DB_USERNAME                   | string                             | cryton                       | Username for Postgres server login.                                                                                                                                                                                                                                 |\n| CRYTON_CORE_DB_PASSWORD                   | string                             | cryton                       | Password for Postgres server login.                                                                                                                                                                                                                                 |\n| CRYTON_CORE_Q_ATTACK_RESPONSE             | string                             | cryton_core.attack.response  | Queue name for processing attack responses. **(do not change, if you don\'t know what you\'re doing)**                                                                                                                                                                |\n| CRYTON_CORE_Q_AGENT_RESPONSE              | string                             | cryton_core.agent.response   | Queue name for processing agent responses. **(do not change, if you don\'t know what you\'re doing)**                                                                                                                                                                 |\n| CRYTON_CORE_Q_EVENT_RESPONSE              | string                             | cryton_core.event.response   | Queue name for processing event responses. **(do not change, if you don\'t know what you\'re doing)**                                                                                                                                                                 |\n| CRYTON_CORE_Q_CONTROL_REQUEST             | string                             | cryton_core.control.request  | Queue name for processing control requests. **(do not change, if you don\'t know what you\'re doing)**                                                                                                                                                                |\n| CRYTON_CORE_DEBUG                         | boolean                            | false                        | Make Core run with debug output.                                                                                                                                                                                                                                    |\n| CRYTON_CORE_TZ                            | string                             | UTC                          | Internally used timezone. **(do not change, if you don\'t know what you\'re doing)**                                                                                                                                                                                  |\n| CRYTON_CORE_DEFAULT_RPC_TIMEOUT           | int                                | 120                          | Timeout (in seconds) for RabbitMQ RPC requests.                                                                                                                                                                                                                     |\n| CRYTON_CORE_API_SECRET_KEY                | string                             | XF37..56 chars..6HB3         | Key (64 chars) used by REST API for cryptographic signing. More information can be found [here](https://docs.djangoproject.com/en/4.1/ref/settings/#secret-key).                                                                                                    |\n| CRYTON_CORE_API_PUBLIC_PORT               | int                                | 8000                         | Port on which the Apache reverse proxy will be served (this only affects the *cryton_apache* Compose configuration).                                                                                                                                                |\n| CRYTON_CORE_API_ALLOWED_HOSTS             | list of strings separated by space | *                            | Domain names that the site can serve. **(do not change, if you don\'t know what you\'re doing)** <br> More information can be found [here](https://docs.djangoproject.com/en/4.1/ref/settings/#allowed-hosts).                                                        |\n| CRYTON_CORE_API_STATIC_ROOT               | string                             | /var/www/example.com/static/ | Directory for storing static files. **(do not change, if you don\'t know what you\'re doing)** <br> More information can be found [here](https://docs.djangoproject.com/en/4.0/ref/settings/#static-root).                                                            |\n| CRYTON_CORE_API_USE_STATIC_FILES          | boolean                            | true                         | Whether to serve static files or not. **(do not change, if you don\'t know what you\'re doing)**                                                                                                                                                                      |\n| CRYTON_CORE_CPU_CORES                     | int                                | 3                            | The maximum number of CPU cores (processes) Cryton Core can utilize. **(do not change/set/export, if you don\'t know what you\'re doing)** <br> This affects the speed of starting/consuming Steps/Rabbit requests. Set value to `auto` for the best CPU utilization. |\n| CRYTON_CORE_EXECUTION_THREADS_PER_PROCESS | int                                | 7                            | How some payloads or Rabbit\'s channel consumers should be distributed. **(do not change/set/export, if you don\'t know what you\'re doing)** <br> This affects the speed of starting/consuming Steps/Rabbit requests.                                                 |\n| CRYTON_CORE_APP_DIRECTORY                 | string                             | ~/.local/cryton-core/        | Path to the Cryton Core directory. **(do not change/set/export, if you don\'t know what you\'re doing)** <br> If changed, update the commands in this guide accordingly.                                                                                              |\n\nTo save the settings **create an app directory**:\n```shell\nmkdir ~/.local/cryton-core/\n```\nThe directory will be also used to store logs and other data created by Cryton Core.  \n**This doesn\'t apply to the Docker installation.** It will be available in the same directory as the Dockerfile \n(`/path/to/cryton-core/cryton-core`).\n\nTo make the installation easier, we need to set our target version first. Versions can be found [here](https://gitlab.ics.muni.cz/cryton/cryton-core/-/tags).\nExport the $C_VERSION variable to match the desired version:\n```shell\nexport C_VERSION=version\n```\n\nNext, we download example settings:\n```shell\ncurl -o ~/.local/cryton-core/.env https://gitlab.ics.muni.cz/cryton/cryton-core/-/raw/$C_VERSION/.env\n```\nUpdate these settings to your needs.\n\n### Overriding the settings\n**NOTICE: This doesn\'t apply to the Docker Compose installation.**\n\nTo override the persistent settings, you can set/export the variables yourself using the **export** command \n(use **unset** to remove the variable). For example:\n```shell\nexport CRYTON_CORE_DEBUG=false\n```\n\n## Prerequisites\nInstall these prerequisites before running Cryton Core. Feel free to use our [Compose configuration](#using-compose-configuration).\n\n- [PostgreSQL database](https://www.postgresql.org/download/) (optionally, use a [Docker image](https://hub.docker.com/_/postgres))\n- [RabbitMQ server](https://www.rabbitmq.com/download.html) (optionally, use a [Docker image](https://hub.docker.com/_/rabbitmq))\n- [PgBouncer](https://www.pgbouncer.org/install.html) (optionally, use a [Docker image](https://hub.docker.com/r/edoburu/pgbouncer))\n\n### Using Compose configuration\nThe easiest way to satisfy the prerequisites is to use our predefined Compose configuration. To do so, you need to \ninstall [Docker Compose](https://docs.docker.com/compose/install/).\n\nNow, continue to the installation, where you\'ll find a guide on how to install the prerequisites using Compose:\n\n- [using pipx](#installation--using-pippipx-)\n- [using Docker Compose](#installation--using-docker-compose-)\n- [development](#development)\n\n## Installation (using pip/pipx)\nCryton Core is available in the [PyPI](https://pypi.org/project/cryton-core/) and can be installed using *pip* (`pip install --user cryton-core`). \nHowever, we **highly recommend** installing the app in an isolated environment using [pipx](https://pypa.github.io/pipx/).\n\n### Requirements\nInstall the following requirements:\n- [Python](https://www.python.org/about/gettingstarted/) >=3.8\n- [pipx](https://pypa.github.io/pipx/)\n\n### Install prerequisites for pipx installation using Compose config\n**Only perform this step if you want to install the prerequisites mentioned [here](#prerequisites) using Docker Compose.**\n\nFirst, make sure you have:\n\n- installed [Docker Compose](https://docs.docker.com/compose/install/)\n- correctly set the [settings](#settings), you can\'t change the settings on a running container\n\nTo install the prerequisites simply use:\n```shell\ncd ~/.local/cryton-core/\ncurl -o ~/.local/cryton-core/docker-compose.prerequisites.yml https://gitlab.ics.muni.cz/cryton/cryton-core/-/raw/$C_VERSION/docker-compose.prerequisites.yml\ncurl -o ~/.local/cryton-core/docker-compose.prerequisites.override.yml https://gitlab.ics.muni.cz/cryton/cryton-core/-/raw/$C_VERSION/docker-compose.prerequisites.override.yml\ndocker compose -f docker-compose.prerequisites.yml -f docker-compose.prerequisites.override.yml up -d --build\n```\n\nUpdate the settings accordingly:\n```\nCRYTON_CORE_RABBIT_HOST=localhost\nCRYTON_CORE_DB_HOST=localhost\nCRYTON_CORE_DB_PORT=16432\n```\n\n### Installing with pipx\nOnce you have *pipx* ready on your system, you can start the installation:\n```shell\npipx install cryton-core\n```\n\nMake sure you\'ve correctly set the [settings](#settings).\n\nIf you\'re not using a reverse proxy, set `CRYTON_CORE_API_USE_STATIC_FILES=false`.\n\nEverything should be set. Check out the [usage section](#usage).\n\n## Installation (using Docker Compose)\nCryton Core can be installed using Docker Compose.\n\nFirst, we have to clone the repo and switch to the correct version.\n```shell\ngit clone https://gitlab.ics.muni.cz/cryton/cryton-core.git\ncd cryton-core\ngit checkout $C_VERSION\n```\n\n### Requirements\n- [Docker Compose](https://docs.docker.com/compose/install/)\n\nAdd yourself to the group *docker*, so you can work with Docker CLI without *sudo*:\n```shell\nsudo groupadd docker\nsudo usermod -aG docker $USER\nnewgrp docker\ndocker run hello-world\n```\n\n### Install prerequisites for Compose deployment using Compose config\n**Only perform this step if you want to install the prerequisites mentioned [here](#prerequisites) using Docker Compose.**\n\nFirst, make sure you have:\n\n- installed [Docker Compose](https://docs.docker.com/compose/install/)\n- correctly set the [settings](#settings), you can\'t change the settings on a running container\n\nTo install the prerequisites simply use:\n```shell\ndocker compose -f docker-compose.prerequisites.yml up -d --build\n```\n\nUpdate the settings accordingly:\n```\nCRYTON_CORE_RABBIT_HOST=cryton_rabbit\nCRYTON_CORE_DB_HOST=cryton_pgbouncer\n```\n\n### Installing and running with Docker Compose\nMake sure you\'ve correctly set the [settings](#settings). You can\'t change the settings on a running container.\n\nFinally, copy your settings:\n```shell\ncp ~/.local/cryton-core/.env .env\n```\n\nWe are now ready to build and start the Core:\n```shell\ndocker compose up -d --build\n```\n\nAfter a while you should see a similar output:\n```\n[+] Running 6/6                                                                                                                                                                   \n ⠿ Container cryton_rabbit     Started\n ⠿ Container cryton_apache     Started\n ⠿ Container cryton_db         Healthy\n ⠿ Container cryton_pgbouncer  Started\n ⠿ Container cryton_app        Started\n ⠿ Container cryton_listener   Started\n```\n\nEverything should be set. Check if the installation was successful and the Core is running by either installing Cryton CLI or testing REST API \nwith curl:\n```\ncurl localhost:8000/api/\n```\n\nExpected result:\n```\n{"runs":"http://localhost:8000/cryton/api/v1/runs/","plans":"http://localhost:8000/cryton/api/v1/plans/",\n"plan_executions":"http://localhost:8000/cryton/api/v1/plan_executions/","stages":"http://localhost:8000/cryton/api/v1/stages/",\n"stage_executions":"http://localhost:8000/cryton/api/v1/stage_executions/","steps":"http://localhost:8000/cryton/api/v1/steps/",\n"step_executions":"http://localhost:8000/cryton/api/v1/step_executions/","workers":"http://localhost:8000/cryton/api/v1/workers/"}\n```\n\nDocker can sometimes create dangling (`<none>:<none>`) images which can result in high disk space usage. You can remove them using: \n```shell\ndocker image prune\n```\n\n## Development\nTo install Cryton Core for development, you must install [Poetry](https://python-poetry.org/docs/).\n\nClone the repository and then go to the correct directory:\n```shell\ngit clone https://gitlab.ics.muni.cz/cryton/cryton-core.git\ncd cryton-core\n```\n\n### Install prerequisites for development using Compose config\n**Only perform this step if you want to install the prerequisites mentioned [here](#prerequisites) using Docker Compose.**\n\nFirst, make sure you have:\n\n- installed [Docker Compose](https://docs.docker.com/compose/install/)\n- correctly set the [settings](#settings), you can\'t change the settings on a running container\n\nTo install the prerequisites simply use:\n```shell\ndocker compose -f docker-compose.prerequisites.yml -f docker-compose.prerequisites.override.yml up -d --build\n```\n\nUpdate the settings accordingly:\n```\nCRYTON_CORE_RABBIT_HOST=localhost\nCRYTON_CORE_DB_HOST=localhost\nCRYTON_CORE_DB_PORT=16432\n```\n\n### Installation and setup with Poetry\nNow we can install the project:\n```shell\npoetry install\n```\n\nTo spawn a shell use:\n```shell\npoetry shell\n```\n\nMake sure you\'ve correctly set the [settings](#settings).  \nTo override the settings quickly, you can use this handy one-liner:\n```shell\nexport $(grep -v \'^#\' .env | xargs)\n```\n\nIf you\'re not using a reverse proxy, set `CRYTON_CORE_API_USE_STATIC_FILES=false`.\n\nEverything should be set, check out the [usage section](#usage).\n\n## Usage\n**NOTICE: If you\'re using Docker Compose to install the app, you don\'t need to migrate the database or start \nthe services mentioned in this section.**\n\nMove to the app directory, since some files and directories can be spawned in a relative path\n```shell\ncd ~/.local/cryton-core/\n```\n\nUse the following to invoke the app:\n```shell\ncryton-core\n```\n\nYou should see a help page:\n```\nType \'cryton-core help <subcommand>\' for help on a specific subcommand.\n\nAvailable subcommands:\n...\n```\n\n**To learn about each command\'s options use**:\n```shell\ncryton-core help <your command>\n```\n\nBefore we do anything, **we need to migrate the database**:\n```shell\ncryton-core migrate\n```\n\nTo be able to use Cryton Core, we need to start the application and its RabbitMQ listener (start each in a separate shell or use the `nohup` command).\n\nFirst, **start the application**:\n```shell\ncryton-core runserver 0.0.0.0:8000\n```\n\nUse the Gunicorn server for the production deployment:\n```shell\ncryton-core startgunicorn\n```\n\n**Start the RabbitMQ listener**:\n```shell\ncryton-core startlistener\n```\n\n### REST API and control\nREST API is the only way to communicate with Cryton Core. It is by default running at \n[http://0.0.0.0:8000](http://0.0.0.0:8000). Interactive documentation can be found at \n[http://0.0.0.0:8000/doc](http://0.0.0.0:8000/doc).\n\nTo be able to control Cryton Core, you have to send requests to its REST API. This can be done manually, or via \n[Cryton CLI](https://gitlab.ics.muni.cz/cryton/cryton-cli) or \n[Cryton Frontend](https://gitlab.ics.muni.cz/cryton/cryton-frontend).\n\n### Execution example\nEvery Run can be described by a simple formula:\n```\nPlan template + inventory = Plan instance\nPlan instance + Worker = Plan execution\nPlan instance + Workers = Run\n```\n\n**1. Choose or design plan template**  \nChoose one of the YAML plan templates (in the `examples` directory) or design your own.\n\n**2. Create Plan instance**  \nPlan templates can utilize a number of variables that need to be provided during the instantiation process. Do this by \nspecifying an inventory file.\n\n**3. Create Worker**  \nDefine Worker(s) that will be used to execute the Plan instance.\n\n**4. Create Run**  \nCreate a Run by choosing the Plan instance and providing a list of Workers for execution.\n\n**5. Schedule or execute Run**  \nYou can either schedule Run for a specific date/time, or execute it directly. Run will then be executed on every \nWorker simultaneously.\n\n**6. Read Run Report**  \nA report can be generated anytime during the execution (also compliant with YAML format). It contains a list of \nStages/Steps and their results.\n\n## Rabbit API\nCore utilizes RabbitMQ to communicate with its Workers.\n\nIt awaits responses on these queues (can be changed environment variables):\n- `cryton_core.attack.response`: awaits responses from attack tasks (for example an attack module execution)\n- `cryton_core.agent.response`: awaits responses from agent tasks (for example an Empire agent deployment)\n- `cryton_core.event.response`: awaits responses from events, that have an influence on Plan execution (for example triggers)\n- `cryton_core.control.request`: awaits control requests (for example scheduling tasks in the main scheduler)\n\nMore information about the requests themselves can be found in the \n[documentation](https://cryton.gitlab-pages.ics.muni.cz/cryton-documentation/).\n',
    'author': 'Ivo Nutár',
    'author_email': 'nutar@ics.muni.cz',
    'maintainer': 'Jiří Rája',
    'maintainer_email': 'raja@ics.muni.cz',
    'url': 'https://gitlab.ics.muni.cz/cryton',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.8,<4.0',
}


setup(**setup_kwargs)
