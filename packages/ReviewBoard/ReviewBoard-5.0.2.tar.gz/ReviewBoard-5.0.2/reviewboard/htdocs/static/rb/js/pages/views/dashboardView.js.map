{"version":3,"file":"dashboardView.js","names":["DashboardActionsView","Backbone","View","extend","template","_","events","render","show_archived","model","get","$el","html","close_discarded_text","close_submitted_text","archive_text","mute_text","read_only","RB","UserSession","instance","unarchive_text","unmute_text","$summary","$","listenTo","count","text","interpolate","_onCloseDiscardedClicked","ev","stopPropagation","preventDefault","_closeReviewRequests","ReviewRequest","CLOSE_DISCARDED","_onCloseSubmittedClicked","CLOSE_SUBMITTED","closeType","_confirmClose","closeReviewRequests","onDone","_showCloseResults","bind","successes","failures","numSuccesses","length","numFailures","$dlg","append","modalBox","title","buttons","val","onConfirmed","click","_onArchiveClicked","collection","archivedReviewRequests","_updateVisibility","addImmediately","_onUnarchiveClicked","removeImmediately","_onMuteClicked","mutedReviewRequests","visibilityFunc","_onUnmuteClicked","updateVisibility","DashboardView","DatagridPageView","actionsViewType"],"sources":["../../../../../../static/rb/js/pages/views/dashboardView.es6.js"],"sourcesContent":["(function() {\n\n\n/**\n * Displays and invokes actions for one or more review requests.\n *\n * This presents available actions to the user that can be performed\n * across one or more selected review requests in the dashboard.\n * The actions will appear in a layer above the sidebar.\n */\nconst DashboardActionsView = Backbone.View.extend({\n    template: _.template(dedent`\n        <p class=\"rb-c-drawer__summary\"></p>\n        <% if (!read_only) { %>\n         <div class=\"rb-c-drawer__actions\">\n          <ul class=\"rb-c-drawer__action-group\">\n           <li class=\"rb-c-drawer__action js-action-discard\">\n            <%= close_discarded_text %>\n           </li>\n           <li class=\"rb-c-drawer__action js-action-submit\">\n            <%= close_submitted_text %>\n           </li>\n          </ul>\n          <ul class=\"rb-c-drawer__action-group\">\n           <li class=\"rb-c-drawer__action js-action-archive\">\n            <%= archive_text %>\n           </li>\n           <% if (show_archived) { %>\n            <li class=\"rb-c-drawer__action\n                       js-action-unarchive\">\n             <%= unarchive_text %>\n            </li>\n           <% } %>\n          </ul>\n          <ul class=\"rb-c-drawer__action-group\">\n           <li class=\"rb-c-drawer__action js-action-mute\">\n            <%= mute_text %></a></li>\n           </li>\n           <% if (show_archived) { %>\n            <li class=\"rb-c-drawer__action js-action-unmute\">\n             <%= unmute_text %>\n            </li>\n           <% } %>\n          </ul>\n         </div>\n        <% } %>\n    `),\n\n    events: {\n        'click .js-action-discard': '_onCloseDiscardedClicked',\n        'click .js-action-submit': '_onCloseSubmittedClicked',\n        'click .js-action-archive': '_onArchiveClicked',\n        'click .js-action-unarchive': '_onUnarchiveClicked',\n        'click .js-action-mute': '_onMuteClicked',\n        'click .js-action-unmute': '_onUnmuteClicked',\n    },\n\n    /**\n     * Render the actions pane.\n     *\n     * Returns:\n     *     DashboardActionsView:\n     *     This object, for chaining.\n     */\n    render() {\n        const show_archived = (this.model.get('data') || {}).show_archived;\n\n        this.$el\n            .html(this.template({\n                close_discarded_text: gettext('<b>Close</b> Discarded'),\n                close_submitted_text: gettext('<b>Close</b> Submitted'),\n                archive_text: gettext('<b>Archive</b>'),\n                mute_text: gettext('<b>Mute</b>'),\n                read_only: RB.UserSession.instance.get('readOnly'),\n                unarchive_text: gettext('<b>Unarchive</b>'),\n                unmute_text: gettext('<b>Unmute</b>'),\n                show_archived: show_archived,\n            }));\n\n        const $summary = this.$('.rb-c-drawer__summary');\n\n        this.listenTo(this.model, 'change:count', (model, count) => {\n            $summary.text(interpolate(\n                ngettext('%s review request selected',\n                         '%s review requests selected',\n                         count),\n                [count]));\n        });\n\n        return this;\n    },\n\n    /**\n     * Handler for when the Close Discarded action is clicked.\n     *\n     * This will confirm that the user wants to close the selected\n     * review requests. Once they confirm, the review requests will\n     * be closed.\n     *\n     * Args:\n     *     ev (Event):\n     *         The event that triggered the callback.\n     */\n    _onCloseDiscardedClicked(ev) {\n        ev.stopPropagation();\n        ev.preventDefault();\n\n        this._closeReviewRequests(RB.ReviewRequest.CLOSE_DISCARDED);\n    },\n\n    /**\n     * Handler for when the Close Submitted action is clicked.\n     *\n     * This will confirm that the user wants to close the selected\n     * review requests. Once they confirm, the review requests will\n     * be closed.\n     *\n     * Args:\n     *     ev (Event):\n     *         The event that triggered the callback.\n     */\n    _onCloseSubmittedClicked(ev) {\n        ev.stopPropagation();\n        ev.preventDefault();\n\n        this._closeReviewRequests(RB.ReviewRequest.CLOSE_SUBMITTED);\n    },\n\n    /**\n     * Common code for confirming and closing review requests.\n     *\n     * This will confirm that the user wants to close the selected\n     * review requests. Once they confirm, the review requests will\n     * be closed.\n     *\n     * Args:\n     *     closeType (string):\n     *         The close type to use.\n     */\n    _closeReviewRequests(closeType) {\n        this._confirmClose(() => {\n            this.model.closeReviewRequests({\n                closeType: closeType,\n                onDone: this._showCloseResults.bind(this),\n            });\n        });\n    },\n\n    /**\n     * Shows the results of the close operation in a dialog.\n     *\n     * This will say how many review requests have been closed successfully,\n     * and will also list the number that have failed (due to access\n     * permissions or other errors).\n     *\n     * Args:\n     *     successes (Array):\n     *         Array of successfully closed review requests.\n     *\n     *     failures (Array):\n     *         Array of unsuccessfully closed review requests.\n     */\n    _showCloseResults(successes, failures) {\n        const numSuccesses = successes.length;\n        const numFailures = failures.length;\n        const $dlg = $('<div/>')\n            .append($('<p/>')\n                .text(interpolate(\n                    ngettext('%s review request has been closed.',\n                             '%s review requests have been closed.',\n                             numSuccesses),\n                    [numSuccesses])));\n\n        if (numFailures > 0) {\n            $dlg\n                .append($('<p/>').text(\n                    interpolate(\n                        ngettext('%s review request could not be closed.',\n                                 '%s review requests could not be closed.',\n                                 numFailures),\n                        [numFailures])))\n                .append($('<p/>').text(\n                    gettext('You may not have permission to close them.')));\n        }\n\n        $dlg.modalBox({\n            title: gettext('Close review requests'),\n            buttons: [\n                $('<input type=\"button\"/>').val(gettext('Thanks!')),\n            ],\n        });\n    },\n\n    /**\n     * Prompt the user for confirmation before closing review requests.\n     *\n     * If the user confirms, the review requests will be closed.\n     *\n     * Args:\n     *     onConfirmed (function):\n     *         Function to call after the user confirms.\n     */\n    _confirmClose: function(onConfirmed) {\n        $('<div/>')\n            .append($('<p/>')\n                .text(gettext('If these review requests have unpublished drafts, they will be discarded.')))\n            .append($('<p/>')\n                .text(gettext('Are you sure you want to close these review requests?')))\n            .modalBox({\n                title: gettext('Close review requests'),\n                buttons: [\n                    $('<input type=\"button\"/>')\n                        .val(gettext('Cancel')),\n\n                    $('<input type=\"button\"/>')\n                        .val(gettext('Close Review Requests'))\n                        .click(onConfirmed.bind(this)),\n                ],\n            });\n    },\n\n    /**\n     * Handler for when the Archive action is clicked.\n     *\n     * Args:\n     *     ev (Event):\n     *         The event that triggered the callback.\n     */\n    _onArchiveClicked(ev) {\n        ev.stopPropagation();\n        ev.preventDefault();\n\n        const collection = RB.UserSession.instance.archivedReviewRequests;\n        this._updateVisibility(collection.addImmediately.bind(collection));\n    },\n\n    /**\n     * Handler for when the Unarchive action is clicked.\n     *\n     * Args:\n     *     ev (Event):\n     *         The event that triggered the callback.\n     */\n    _onUnarchiveClicked(ev) {\n        ev.stopPropagation();\n        ev.preventDefault();\n\n        const collection = RB.UserSession.instance.archivedReviewRequests;\n        this._updateVisibility(collection.removeImmediately.bind(collection));\n    },\n\n    /**\n     * Handler for when the Mute action is clicked.\n     *\n     * This will confirm that the user wants to mute the selected review\n     * requests. Once they confirm, the review requests will be archived.\n     *\n     * Args:\n     *     ev (Event):\n     *         The event that triggered the callback.\n     */\n    _onMuteClicked(ev) {\n        ev.stopPropagation();\n        ev.preventDefault();\n\n        const collection = RB.UserSession.instance.mutedReviewRequests;\n        const visibilityFunc = collection.addImmediately.bind(collection);\n\n        $('<div/>')\n            .append($('<p/>')\n                .text(gettext('Are you sure you want to mute these review requests?')))\n            .modalBox({\n                title: gettext('Mute review requests'),\n                buttons: [\n                    $('<input type=\"button\"/>')\n                        .val(gettext('Cancel')),\n\n                    $('<input type=\"button\"/>')\n                        .val(gettext('Mute Review Requests'))\n                        .click(this._updateVisibility.bind(\n                            this, visibilityFunc)),\n                ],\n            });\n    },\n\n    /**\n     * Handler for when the Unmute action is clicked.\n     *\n     * Args:\n     *     ev (Event):\n     *         The event that triggered the callback.\n     */\n    _onUnmuteClicked(ev) {\n        ev.stopPropagation();\n        ev.preventDefault();\n\n        const collection = RB.UserSession.instance.mutedReviewRequests;\n\n        this._updateVisibility(collection.removeImmediately.bind(collection));\n    },\n\n    /**\n     * Common code for archiving/muting review requests.\n     *\n     * Args:\n     *     visibilityFunc (function):\n     *         Function to call to update the visibility of an individual\n     *         review request.\n     */\n    _updateVisibility(visibilityFunc) {\n        this.model.updateVisibility(visibilityFunc);\n    },\n});\n\n\n/**\n * Manages the UI for the dashboard.\n *\n * This renders the dashboard, handles events, and allows for multi-row\n * actions (like closing review requests).\n */\nRB.DashboardView = RB.DatagridPageView.extend({\n    actionsViewType: DashboardActionsView,\n});\n\n\n})();\n"],"mappings":";;AAAA,CAAC,YAAW;EAGZ;AACA;AACA;AACA;AACA;AACA;AACA;EACA,MAAMA,oBAAoB,GAAGC,QAAQ,CAACC,IAAI,CAACC,MAAM,CAAC;IAC9CC,QAAQ,EAAEC,CAAC,CAACD,QAAQ,CAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAEK,CAAC;IAEFE,MAAM,EAAE;MACJ,0BAA0B,EAAE,0BAA0B;MACtD,yBAAyB,EAAE,0BAA0B;MACrD,0BAA0B,EAAE,mBAAmB;MAC/C,4BAA4B,EAAE,qBAAqB;MACnD,uBAAuB,EAAE,gBAAgB;MACzC,yBAAyB,EAAE;IAC/B,CAAC;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;IACIC,MAAM,GAAG;MACL,MAAMC,aAAa,GAAG,CAAC,IAAI,CAACC,KAAK,CAACC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,EAAEF,aAAa;MAElE,IAAI,CAACG,GAAG,CACHC,IAAI,CAAC,IAAI,CAACR,QAAQ,CAAC;QAChBS,oBAAoB,mCAAmC;QACvDC,oBAAoB,mCAAmC;QACvDC,YAAY,2BAA2B;QACvCC,SAAS,wBAAwB;QACjCC,SAAS,EAAEC,EAAE,CAACC,WAAW,CAACC,QAAQ,CAACV,GAAG,CAAC,UAAU,CAAC;QAClDW,cAAc,6BAA6B;QAC3CC,WAAW,0BAA0B;QACrCd,aAAa,EAAEA;MACnB,CAAC,CAAC,CAAC;MAEP,MAAMe,QAAQ,GAAG,IAAI,CAACC,CAAC,CAAC,uBAAuB,CAAC;MAEhD,IAAI,CAACC,QAAQ,CAAC,IAAI,CAAChB,KAAK,EAAE,cAAc,EAAE,CAACA,KAAK,EAAEiB,KAAK,KAAK;QACxDH,QAAQ,CAACI,IAAI,CAACC,WAAW,uEAGZF,KAAK,GACd,CAACA,KAAK,CAAC,CAAC,CAAC;MACjB,CAAC,CAAC;MAEF,OAAO,IAAI;IACf,CAAC;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIG,wBAAwB,CAACC,EAAE,EAAE;MACzBA,EAAE,CAACC,eAAe,EAAE;MACpBD,EAAE,CAACE,cAAc,EAAE;MAEnB,IAAI,CAACC,oBAAoB,CAACf,EAAE,CAACgB,aAAa,CAACC,eAAe,CAAC;IAC/D,CAAC;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIC,wBAAwB,CAACN,EAAE,EAAE;MACzBA,EAAE,CAACC,eAAe,EAAE;MACpBD,EAAE,CAACE,cAAc,EAAE;MAEnB,IAAI,CAACC,oBAAoB,CAACf,EAAE,CAACgB,aAAa,CAACG,eAAe,CAAC;IAC/D,CAAC;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIJ,oBAAoB,CAACK,SAAS,EAAE;MAC5B,IAAI,CAACC,aAAa,CAAC,MAAM;QACrB,IAAI,CAAC9B,KAAK,CAAC+B,mBAAmB,CAAC;UAC3BF,SAAS,EAAEA,SAAS;UACpBG,MAAM,EAAE,IAAI,CAACC,iBAAiB,CAACC,IAAI,CAAC,IAAI;QAC5C,CAAC,CAAC;MACN,CAAC,CAAC;IACN,CAAC;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACID,iBAAiB,CAACE,SAAS,EAAEC,QAAQ,EAAE;MACnC,MAAMC,YAAY,GAAGF,SAAS,CAACG,MAAM;MACrC,MAAMC,WAAW,GAAGH,QAAQ,CAACE,MAAM;MACnC,MAAME,IAAI,GAAGzB,CAAC,CAAC,QAAQ,CAAC,CACnB0B,MAAM,CAAC1B,CAAC,CAAC,MAAM,CAAC,CACZG,IAAI,CAACC,WAAW,wFAGJkB,YAAY,GACrB,CAACA,YAAY,CAAC,CAAC,CAAC,CAAC;MAE7B,IAAIE,WAAW,GAAG,CAAC,EAAE;QACjBC,IAAI,CACCC,MAAM,CAAC1B,CAAC,CAAC,MAAM,CAAC,CAACG,IAAI,CAClBC,WAAW,+FAGEoB,WAAW,GACpB,CAACA,WAAW,CAAC,CAAC,CAAC,CAAC,CACvBE,MAAM,CAAC1B,CAAC,CAAC,MAAM,CAAC,CAACG,IAAI,uDACoC,CAAC;MACnE;MAEAsB,IAAI,CAACE,QAAQ,CAAC;QACVC,KAAK,kCAAkC;QACvCC,OAAO,EAAE,CACL7B,CAAC,CAAC,wBAAwB,CAAC,CAAC8B,GAAG,oBAAoB;MAE3D,CAAC,CAAC;IACN,CAAC;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIf,aAAa,EAAE,UAASgB,WAAW,EAAE;MACjC/B,CAAC,CAAC,QAAQ,CAAC,CACN0B,MAAM,CAAC1B,CAAC,CAAC,MAAM,CAAC,CACZG,IAAI,sFAAsF,CAAC,CAC/FuB,MAAM,CAAC1B,CAAC,CAAC,MAAM,CAAC,CACZG,IAAI,kEAAkE,CAAC,CAC3EwB,QAAQ,CAAC;QACNC,KAAK,kCAAkC;QACvCC,OAAO,EAAE,CACL7B,CAAC,CAAC,wBAAwB,CAAC,CACtB8B,GAAG,mBAAmB,EAE3B9B,CAAC,CAAC,wBAAwB,CAAC,CACtB8B,GAAG,kCAAkC,CACrCE,KAAK,CAACD,WAAW,CAACZ,IAAI,CAAC,IAAI,CAAC,CAAC;MAE1C,CAAC,CAAC;IACV,CAAC;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;IACIc,iBAAiB,CAAC3B,EAAE,EAAE;MAClBA,EAAE,CAACC,eAAe,EAAE;MACpBD,EAAE,CAACE,cAAc,EAAE;MAEnB,MAAM0B,UAAU,GAAGxC,EAAE,CAACC,WAAW,CAACC,QAAQ,CAACuC,sBAAsB;MACjE,IAAI,CAACC,iBAAiB,CAACF,UAAU,CAACG,cAAc,CAAClB,IAAI,CAACe,UAAU,CAAC,CAAC;IACtE,CAAC;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;IACII,mBAAmB,CAAChC,EAAE,EAAE;MACpBA,EAAE,CAACC,eAAe,EAAE;MACpBD,EAAE,CAACE,cAAc,EAAE;MAEnB,MAAM0B,UAAU,GAAGxC,EAAE,CAACC,WAAW,CAACC,QAAQ,CAACuC,sBAAsB;MACjE,IAAI,CAACC,iBAAiB,CAACF,UAAU,CAACK,iBAAiB,CAACpB,IAAI,CAACe,UAAU,CAAC,CAAC;IACzE,CAAC;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIM,cAAc,CAAClC,EAAE,EAAE;MACfA,EAAE,CAACC,eAAe,EAAE;MACpBD,EAAE,CAACE,cAAc,EAAE;MAEnB,MAAM0B,UAAU,GAAGxC,EAAE,CAACC,WAAW,CAACC,QAAQ,CAAC6C,mBAAmB;MAC9D,MAAMC,cAAc,GAAGR,UAAU,CAACG,cAAc,CAAClB,IAAI,CAACe,UAAU,CAAC;MAEjElC,CAAC,CAAC,QAAQ,CAAC,CACN0B,MAAM,CAAC1B,CAAC,CAAC,MAAM,CAAC,CACZG,IAAI,iEAAiE,CAAC,CAC1EwB,QAAQ,CAAC;QACNC,KAAK,iCAAiC;QACtCC,OAAO,EAAE,CACL7B,CAAC,CAAC,wBAAwB,CAAC,CACtB8B,GAAG,mBAAmB,EAE3B9B,CAAC,CAAC,wBAAwB,CAAC,CACtB8B,GAAG,iCAAiC,CACpCE,KAAK,CAAC,IAAI,CAACI,iBAAiB,CAACjB,IAAI,CAC9B,IAAI,EAAEuB,cAAc,CAAC,CAAC;MAEtC,CAAC,CAAC;IACV,CAAC;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;IACIC,gBAAgB,CAACrC,EAAE,EAAE;MACjBA,EAAE,CAACC,eAAe,EAAE;MACpBD,EAAE,CAACE,cAAc,EAAE;MAEnB,MAAM0B,UAAU,GAAGxC,EAAE,CAACC,WAAW,CAACC,QAAQ,CAAC6C,mBAAmB;MAE9D,IAAI,CAACL,iBAAiB,CAACF,UAAU,CAACK,iBAAiB,CAACpB,IAAI,CAACe,UAAU,CAAC,CAAC;IACzE,CAAC;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;IACIE,iBAAiB,CAACM,cAAc,EAAE;MAC9B,IAAI,CAACzD,KAAK,CAAC2D,gBAAgB,CAACF,cAAc,CAAC;IAC/C;EACJ,CAAC,CAAC;;EAGF;AACA;AACA;AACA;AACA;AACA;EACAhD,EAAE,CAACmD,aAAa,GAAGnD,EAAE,CAACoD,gBAAgB,CAACnE,MAAM,CAAC;IAC1CoE,eAAe,EAAEvE;EACrB,CAAC,CAAC;AAGF,CAAC,GAAG"}