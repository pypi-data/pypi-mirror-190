{"version":3,"file":"lib_editor_js-lib_factory_js.30a168e1e1342c50bb73.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAiD;AACR;AACE;AACa;AACX;AACJ;AACzC;AAC8B;AACC,CAAC;AACD,CAAC;AACS,CAAC;AACT,CAAC;AACJ;AACK;AACU;AACf;AACC;AACA;AAC/B,kEAAkE;AAClE;AACO;AACP;AACA;AACA;AACA;AACA;AACA,iCAAiC,qDAAM;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,yDAAU;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,iBAAiB;AACjB,wBAAwB;AACxB,kBAAkB;AAClB,sBAAsB;AACtB,2BAA2B;AAC3B,gBAAgB;AAChB;AACA,sBAAsB;AACtB,gCAAgC;AAChC,aAAa;AACb;AACA,cAAc;AACd;AACA;AACA;AACA,mBAAmB,kEAAkB;AACrC,YAAY,sEAAuB;AACnC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,+DAAgB;AACxB;AACA;AACA;AACA,4BAA4B,2DAAqB;AACjD,mCAAmC,2DAAY,6BAA6B,2DAAqB;AACjG;AACA,YAAY,2DAAqB;AACjC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC,oBAAoB;AACpB,4BAA4B;AAC5B,wBAAwB;AACxB,4BAA4B;AAC5B,2CAA2C;AAC3C,qBAAqB;AACrB,sBAAsB;AACtB,oCAAoC;AACpC,kBAAkB;AAClB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,iBAAiB;AACjB,mBAAmB;AACnB,oBAAoB;AACpB,kBAAkB;AAClB,kBAAkB;AAClB,iBAAiB;AACjB,qBAAqB;AACrB,2BAA2B;AAC3B;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mDAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,gCAAgC;AAChC;AACA;AACA;AACA,4BAA4B,2DAAqB;AACjD,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,0BAA0B,2DAAqB;AAC/C,wBAAwB,sBAAsB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9LsE;AACrB;AACP;AACD;AACA;AACW;AAC7C,mCAAmC,8EAA4B;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,kDAAa;AACxC;AACA,SAAS;AACT,mBAAmB,2DAAY;AAC/B;AACA;AACO,kCAAkC,oDAAK;AACvC,2BAA2B,mDAAM;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,qEAAc;AACzC;AACA;AACA,kCAAkC,+EAA6B;AAC/D,SAAS;AACT;AACA;AACA","sources":["webpack://@g2nb/jupyter-wysiwyg/./lib/editor.js","webpack://@g2nb/jupyter-wysiwyg/./lib/factory.js"],"sourcesContent":["import { MarkdownCell } from \"@jupyterlab/cells\";\nimport { UUID } from \"@lumino/coreutils\";\nimport { Signal } from \"@lumino/signaling\";\nimport { DisposableDelegate } from \"@lumino/disposable\";\nimport { ArrayExt } from '@lumino/algorithm';\nimport { EditorWidget } from \"./factory\";\n// Import TinyMCE\nimport TinyMCE from \"tinymce\";\nimport 'tinymce/icons/default'; // Default icons are required for TinyMCE 5.3 or above\nimport 'tinymce/themes/silver'; // A theme is also required\nimport 'tinymce/skins/ui/oxide/skin.css'; // Import the skin\nimport 'tinymce/plugins/advlist'; // Import plugins\nimport 'tinymce/plugins/code';\nimport 'tinymce/plugins/emoticons';\nimport 'tinymce/plugins/emoticons/js/emojis';\nimport 'tinymce/plugins/link';\nimport 'tinymce/plugins/lists';\nimport 'tinymce/plugins/table';\n// import contentUiCss from 'tinymce/skins/ui/oxide/content.css'; // Import content CSS\n// import contentCss from 'tinymce/skins/content/default/content.css';\nexport class TinyMCEEditor {\n    constructor(options, markdownModel) {\n        this._uuid = '';\n        this._is_disposed = false;\n        this._keydownHandlers = new Array();\n        this.is_markdown = false;\n        this.edgeRequested = new Signal(this);\n        this.host = options.host;\n        this.host.classList.add(\"jp-RenderedHTMLCommon\");\n        this.host.classList.add('jp-TinyMCE');\n        this.host.addEventListener('focus', this.blur, true);\n        this.host.addEventListener('blur', this.focus, true);\n        this.host.addEventListener('scroll', this.scroll, true);\n        this._uuid = options.uuid || UUID.uuid4();\n        this._model = options.model;\n        this.is_markdown = markdownModel.metadata.get(\"markdownMode\");\n        if (!!this.is_markdown)\n            this.is_markdown = false;\n        this._view = new TinyMCEView(this.host, this.model);\n    }\n    // Getters\n    get view() { return this._view; }\n    get uuid() { return this._uuid; }\n    get is_disposed() { return this._is_disposed; }\n    get model() { return this._model; }\n    get lineCount() { return TinyMCEEditor.DEFAULT_NUMBER; }\n    get selectionStyle() { return this._selection_style; }\n    get doc() { return new DummyDoc(); }\n    // Setters\n    set uuid(value) { this._uuid = value; }\n    set selectionStyle(value) { this._selection_style = value; }\n    blur() { if (this._view)\n        this._view.blur(); }\n    focus() { if (this._view)\n        this._view.focus(); }\n    addKeydownHandler(handler) {\n        this._keydownHandlers.push(handler);\n        return new DisposableDelegate(() => {\n            ArrayExt.removeAllWhere(this._keydownHandlers, val => val === handler);\n        });\n    }\n    dispose() {\n        if (this._is_disposed)\n            return;\n        this._is_disposed = true;\n        this.host.removeEventListener('focus', this.focus, true);\n        this.host.removeEventListener('focus', this.blur, true);\n        this.host.removeEventListener('focus', this.scroll, true);\n        Signal.clearData(this);\n    }\n    // Called when a markdown cell is either first rendered or toggled into editor mode\n    refresh() {\n        const active_cell = EditorWidget.instance().tracker.activeCell;\n        if (active_cell instanceof MarkdownCell && !active_cell.rendered && EditorWidget.instance().no_side_button()) {\n            active_cell.editor.focus();\n            EditorWidget.instance().render_side_button();\n        }\n    }\n    // This is a dummy implementation that prevents an error in the console\n    getCursorPosition() {\n        return new class {\n        }();\n    }\n    // This is a dummy implementation that prevents an error in the console\n    getCursor() {\n        return this.getCursorPosition();\n    }\n    // Empty stubs necessary to implement CodeEditor.IEditor, full integration may require implementing these methods\n    clearHistory() { }\n    scroll() { }\n    getCoordinateForPosition(position) { return undefined; }\n    getLine(line) { return undefined; }\n    getOffsetAt(position) { return 0; }\n    getOption(option) { return undefined; }\n    getPositionAt(offset) { return undefined; }\n    getPositionForCoordinate(coordinate) { return undefined; }\n    getSelection() { return undefined; }\n    getSelections() { return []; }\n    getTokenForPosition(position) { return undefined; }\n    getTokens() { return []; }\n    hasFocus() { return false; }\n    newIndentedLine() { }\n    operation(func) { }\n    redo() { }\n    removeOverlay(overlay) { }\n    resizeToFit() { }\n    revealPosition(position) { }\n    revealSelection(selection) { }\n    setCursorPosition(position) { }\n    setOption(option, value) { }\n    setOptions(options) { }\n    setSelection(selection) { }\n    setSelections(selections) { }\n    setSize(size) { }\n    undo() { }\n    firstLine() { return ''; }\n    lastLine() { return ''; }\n}\nTinyMCEEditor.DEFAULT_NUMBER = 0;\n/**\n * Dummy implementation prevents errors in search functionality\n */\nclass DummyDoc {\n    sliceString(from, to) { return ''; }\n    toString() { return ''; }\n    get length() { return 0; }\n    lineAt(index) { return ''; }\n    line(index) { return ''; }\n    firstLine() { return ''; }\n    lastLine() { return ''; }\n    getSelection() { return ''; }\n    getRange(start, end) { return ''; }\n    removeOverlay(overlay) { }\n}\nexport class TinyMCEView {\n    constructor(host, model) {\n        // Create the wrapper for TinyMCE\n        const wrapper = document.createElement(\"div\");\n        host.appendChild(wrapper);\n        // Wait for cell initialization before initializing editor\n        setTimeout(() => {\n            var _a;\n            // Special case to remove anchor links before loading\n            const render_node = (_a = host === null || host === void 0 ? void 0 : host.parentElement) === null || _a === void 0 ? void 0 : _a.querySelector('.jp-MarkdownOutput');\n            if (render_node)\n                render_node.querySelectorAll('.jp-InternalAnchorLink').forEach(e => e.remove());\n            wrapper.innerHTML = (render_node === null || render_node === void 0 ? void 0 : render_node.innerHTML) || model.value.text;\n            try {\n                TinyMCE.init({\n                    target: wrapper,\n                    skin: false,\n                    content_css: false,\n                    // content_style: contentUiCss.toString() + '\\n' + contentCss.toString(),\n                    branding: false,\n                    contextmenu: false,\n                    elementpath: false,\n                    menubar: false,\n                    height: 300,\n                    resize: false,\n                    plugins: 'emoticons lists link code',\n                    toolbar: 'styleselect fontsizeselect | bold italic underline strikethrough | subscript superscript | link forecolor backcolor emoticons | bullist numlist outdent indent blockquote | code',\n                    init_instance_callback: (editor) => editor.on('Change', () => model.value.text = editor.getContent())\n                }).then(editor => {\n                    if (!editor.length)\n                        return; // If no valid editors, do nothing\n                    editor[0].on(\"focus\", () => {\n                        const index = this.get_cell_index(model);\n                        if (index !== null)\n                            EditorWidget.instance().tracker.currentWidget.content.activeCellIndex = index;\n                    });\n                });\n            }\n            catch (e) {\n                console.log(\"TinyMCE threw an error: \" + e);\n            }\n        }, 500);\n    }\n    blur() { }\n    focus() { }\n    get_cell_index(model) {\n        const id = model.modelDB.basePath;\n        const all_cells = EditorWidget.instance().tracker.currentWidget.content.widgets;\n        for (let i = 0; i < all_cells.length; i++) {\n            const cell = all_cells[i];\n            const cell_id = cell.model.modelDB.basePath;\n            if (id === cell_id)\n                return i;\n        }\n        return null;\n    }\n}\n","import { NotebookActions, NotebookPanel } from \"@jupyterlab/notebook\";\nimport { MarkdownCell } from \"@jupyterlab/cells\";\nimport { Token } from \"@lumino/coreutils\";\nimport { Widget } from \"@lumino/widgets\";\nimport { TinyMCEEditor } from \"./editor\";\nimport { runIcon } from \"@jupyterlab/ui-components\";\nexport class EditorContentFactory extends NotebookPanel.ContentFactory {\n    constructor(options) {\n        super(options);\n    }\n    /**\n     * Create a markdown cell with the WYSIWYG editor rather than CodeMirror\n     *\n     * @param options\n     * @param parent\n     */\n    createMarkdownCell(options, parent) {\n        const model = options.model;\n        options.contentFactory = new EditorContentFactory({\n            editorFactory: (options) => {\n                return new TinyMCEEditor(options, model);\n            }\n        });\n        return new MarkdownCell(options).initializeState();\n    }\n}\nexport const IEditorContentFactory = new Token(\"jupyter-wysiwyg\");\nexport class EditorWidget extends Widget {\n    constructor() {\n        super();\n    }\n    static instance() {\n        // Instantiate if necessary\n        if (!EditorWidget._singleton)\n            EditorWidget._singleton = new EditorWidget();\n        return EditorWidget._singleton;\n    }\n    get tracker() {\n        return this._tracker;\n    }\n    set tracker(tracker) {\n        this._tracker = tracker;\n    }\n    get previous_cell() {\n        return this._previous_cell;\n    }\n    set previous_cell(_previous_cell) {\n        this._previous_cell = _previous_cell;\n    }\n    no_side_button() {\n        var _a;\n        return !((_a = this.sidebar(this._tracker.activeCell.node)) === null || _a === void 0 ? void 0 : _a.querySelector('.jp-RenderButton'));\n    }\n    render_side_button() {\n        const sidebar = this.sidebar(this._tracker.activeCell.node);\n        const run_button = this.run_button(this._tracker.activeCell, this._tracker.currentWidget);\n        sidebar.append(run_button);\n    }\n    remove_side_button() {\n        var _a;\n        if (this._previous_cell) {\n            const sidebar = this.sidebar(this._previous_cell.node);\n            (_a = sidebar.querySelector(\".jp-RenderButton\")) === null || _a === void 0 ? void 0 : _a.remove();\n        }\n        this._previous_cell = this._tracker.activeCell;\n    }\n    sidebar(node) {\n        var _a;\n        return (_a = node.closest('.jp-Cell')) === null || _a === void 0 ? void 0 : _a.querySelector('.jp-InputArea-prompt');\n    }\n    run_button(cell, panel) {\n        const button = document.createElement(\"button\");\n        button.classList.add(\"jp-ToolbarButtonComponent\", \"jp-Button\", \"jp-RenderButton\");\n        button.setAttribute(\"title\", \"Render this cell\");\n        button.innerHTML = runIcon.svgstr;\n        button.addEventListener(\"click\", () => {\n            panel.content.select(cell);\n            setTimeout(() => void NotebookActions.runAndAdvance(panel.content, panel.sessionContext), 200);\n        });\n        return button;\n    }\n}\n"],"names":[],"sourceRoot":""}