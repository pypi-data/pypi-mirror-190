{"version":3,"file":"58866f56.js","mappings":";;AAgDA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAjDA;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC6IA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClDA;;AC0FA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;AAIA;;AAEA;;;;;AAlKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuQA","sources":["webpack://insteon-panel-frontend/./homeassistant-frontend/src/components/ha-button-menu.ts","webpack://insteon-panel-frontend/./node_modules/@polymer/app-layout/app-header-layout/app-header-layout.js","webpack://insteon-panel-frontend/./homeassistant-frontend/src/layouts/ha-app-layout.js","webpack://insteon-panel-frontend/./src/insteon-devices-panel.ts"],"sourcesContent":["import type { Button } from \"@material/mwc-button\";\nimport \"@material/mwc-menu\";\nimport type { Corner, Menu, MenuCorner } from \"@material/mwc-menu\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport type { HaIconButton } from \"./ha-icon-button\";\n\n@customElement(\"ha-button-menu\")\nexport class HaButtonMenu extends LitElement {\n  protected readonly [FOCUS_TARGET];\n\n  @property() public corner: Corner = \"TOP_START\";\n\n  @property() public menuCorner: MenuCorner = \"START\";\n\n  @property({ type: Number }) public x: number | null = null;\n\n  @property({ type: Number }) public y: number | null = null;\n\n  @property({ type: Boolean }) public multi = false;\n\n  @property({ type: Boolean }) public activatable = false;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public fixed = false;\n\n  @query(\"mwc-menu\", true) private _menu?: Menu;\n\n  public get items() {\n    return this._menu?.items;\n  }\n\n  public get selected() {\n    return this._menu?.selected;\n  }\n\n  public override focus() {\n    if (this._menu?.open) {\n      this._menu.focusItemAtIndex(0);\n    } else {\n      this._triggerButton?.focus();\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <div @click=${this._handleClick}>\n        <slot name=\"trigger\" @slotchange=${this._setTriggerAria}></slot>\n      </div>\n      <mwc-menu\n        .corner=${this.corner}\n        .menuCorner=${this.menuCorner}\n        .fixed=${this.fixed}\n        .multi=${this.multi}\n        .activatable=${this.activatable}\n        .y=${this.y}\n        .x=${this.x}\n      >\n        <slot></slot>\n      </mwc-menu>\n    `;\n  }\n\n  protected firstUpdated(changedProps): void {\n    super.firstUpdated(changedProps);\n\n    if (document.dir === \"rtl\") {\n      this.updateComplete.then(() => {\n        this.querySelectorAll(\"mwc-list-item\").forEach((item) => {\n          const style = document.createElement(\"style\");\n          style.innerHTML =\n            \"span.material-icons:first-of-type { margin-left: var(--mdc-list-item-graphic-margin, 32px) !important; margin-right: 0px !important;}\";\n          item!.shadowRoot!.appendChild(style);\n        });\n      });\n    }\n  }\n\n  private _handleClick(): void {\n    if (this.disabled) {\n      return;\n    }\n    this._menu!.anchor = this;\n    this._menu!.show();\n  }\n\n  private get _triggerButton() {\n    return this.querySelector(\n      'ha-icon-button[slot=\"trigger\"], mwc-button[slot=\"trigger\"]'\n    ) as HaIconButton | Button | null;\n  }\n\n  private _setTriggerAria() {\n    if (this._triggerButton) {\n      this._triggerButton.ariaHasPopup = \"menu\";\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: inline-block;\n        position: relative;\n      }\n      ::slotted([disabled]) {\n        color: var(--disabled-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-button-menu\": HaButtonMenu;\n  }\n}\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\n\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\nimport {AppLayoutBehavior} from '../app-layout-behavior/app-layout-behavior.js';\n\n/**\napp-header-layout is a wrapper element that positions an app-header and other\ncontent. This element uses the document scroll by default, but it can also\ndefine its own scrolling region.\n\nUsing the document scroll:\n\n```html\n<app-header-layout>\n  <app-header slot=\"header\" fixed condenses effects=\"waterfall\">\n    <app-toolbar>\n      <div main-title>App name</div>\n    </app-toolbar>\n  </app-header>\n  <div>\n    main content\n  </div>\n</app-header-layout>\n```\n\nUsing an own scrolling region:\n\n```html\n<app-header-layout has-scrolling-region style=\"width: 300px; height: 400px;\">\n  <app-header slot=\"header\" fixed condenses effects=\"waterfall\">\n    <app-toolbar>\n      <div main-title>App name</div>\n    </app-toolbar>\n  </app-header>\n  <div>\n    main content\n  </div>\n</app-header-layout>\n```\n\nAdd the `fullbleed` attribute to app-header-layout to make it fit the size of\nits container:\n\n```html\n<app-header-layout fullbleed>\n ...\n</app-header-layout>\n```\n\n@element app-header-layout\n@demo app-header-layout/demo/simple.html Simple Demo\n@demo app-header-layout/demo/scrolling-region.html Scrolling Region\n@demo app-header-layout/demo/music.html Music Demo\n@demo app-header-layout/demo/footer.html Footer Demo\n*/\nPolymer({\n  /** @override */\n  _template: html`\n    <style>\n      :host {\n        display: block;\n        /**\n         * Force app-header-layout to have its own stacking context so that its parent can\n         * control the stacking of it relative to other elements (e.g. app-drawer-layout).\n         * This could be done using \\`isolation: isolate\\`, but that's not well supported\n         * across browsers.\n         */\n        position: relative;\n        z-index: 0;\n      }\n\n      #wrapper ::slotted([slot=header]) {\n        @apply --layout-fixed-top;\n        z-index: 1;\n      }\n\n      #wrapper.initializing ::slotted([slot=header]) {\n        position: relative;\n      }\n\n      :host([has-scrolling-region]) {\n        height: 100%;\n      }\n\n      :host([has-scrolling-region]) #wrapper ::slotted([slot=header]) {\n        position: absolute;\n      }\n\n      :host([has-scrolling-region]) #wrapper.initializing ::slotted([slot=header]) {\n        position: relative;\n      }\n\n      :host([has-scrolling-region]) #wrapper #contentContainer {\n        @apply --layout-fit;\n        overflow-y: auto;\n        -webkit-overflow-scrolling: touch;\n      }\n\n      :host([has-scrolling-region]) #wrapper.initializing #contentContainer {\n        position: relative;\n      }\n\n      :host([fullbleed]) {\n        @apply --layout-vertical;\n        @apply --layout-fit;\n      }\n\n      :host([fullbleed]) #wrapper,\n      :host([fullbleed]) #wrapper #contentContainer {\n        @apply --layout-vertical;\n        @apply --layout-flex;\n      }\n\n      #contentContainer {\n        /* Create a stacking context here so that all children appear below the header. */\n        position: relative;\n        z-index: 0;\n      }\n\n      @media print {\n        :host([has-scrolling-region]) #wrapper #contentContainer {\n          overflow-y: visible;\n        }\n      }\n\n    </style>\n\n    <div id=\"wrapper\" class=\"initializing\">\n      <slot id=\"headerSlot\" name=\"header\"></slot>\n\n      <div id=\"contentContainer\">\n        <slot></slot>\n      </div>\n    </div>\n`,\n\n  is: 'app-header-layout',\n  behaviors: [AppLayoutBehavior],\n\n  properties: {\n    /**\n     * If true, the current element will have its own scrolling region.\n     * Otherwise, it will use the document scroll to control the header.\n     */\n    hasScrollingRegion: {type: Boolean, value: false, reflectToAttribute: true}\n  },\n\n  observers: ['resetLayout(isAttached, hasScrollingRegion)'],\n\n  /**\n   * A reference to the app-header element.\n   *\n   * @property header\n   */\n  get header() {\n    return dom(this.$.headerSlot).getDistributedNodes()[0];\n  },\n\n  _updateLayoutStates: function() {\n    var header = this.header;\n    if (!this.isAttached || !header) {\n      return;\n    }\n    // Remove the initializing class, which staticly positions the header and\n    // the content until the height of the header can be read.\n    this.$.wrapper.classList.remove('initializing');\n    // Update scroll target.\n    header.scrollTarget = this.hasScrollingRegion ?\n        this.$.contentContainer :\n        this.ownerDocument.documentElement;\n    // Get header height here so that style reads are batched together before\n    // style writes (i.e. getBoundingClientRect() below).\n    var headerHeight = header.offsetHeight;\n    // Update the header position.\n    if (!this.hasScrollingRegion) {\n      requestAnimationFrame(function() {\n        var rect = this.getBoundingClientRect();\n        var rightOffset = document.documentElement.clientWidth - rect.right;\n        header.style.left = rect.left + 'px';\n        header.style.right = rightOffset + 'px';\n      }.bind(this));\n    } else {\n      header.style.left = '';\n      header.style.right = '';\n    }\n    // Update the content container position.\n    var containerStyle = this.$.contentContainer.style;\n    if (header.fixed && !header.condenses && this.hasScrollingRegion) {\n      // If the header size does not change and we're using a scrolling region,\n      // exclude the header area from the scrolling region so that the header\n      // doesn't overlap the scrollbar.\n      containerStyle.marginTop = headerHeight + 'px';\n      containerStyle.paddingTop = '';\n    } else {\n      containerStyle.paddingTop = headerHeight + 'px';\n      containerStyle.marginTop = '';\n    }\n  }\n});\n","/* eslint-plugin-disable lit */\n/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n/*\nThis code is copied from app-header-layout.\n'fullbleed' support is removed as Home Assisstant doesn't use it.\ntransform: translate(0) is added.\n*/\n/*\n  FIXME(polymer-modulizer): the above comments were extracted\n  from HTML and may be out of place here. Review them and\n  then delete this comment!\n*/\nimport \"@polymer/app-layout/app-header-layout/app-header-layout\";\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\nimport \"@polymer/polymer/polymer-element\";\n\nclass HaAppLayout extends customElements.get(\"app-header-layout\") {\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: block;\n          /**\n         * Force app-header-layout to have its own stacking context so that its parent can\n         * control the stacking of it relative to other elements (e.g. app-drawer-layout).\n         * This could be done using \\`isolation: isolate\\`, but that's not well supported\n         * across browsers.\n         */\n          position: relative;\n          z-index: 0;\n        }\n\n        #wrapper ::slotted([slot=\"header\"]) {\n          @apply --layout-fixed-top;\n          z-index: 1;\n        }\n\n        #wrapper.initializing ::slotted([slot=\"header\"]) {\n          position: relative;\n        }\n\n        :host([has-scrolling-region]) {\n          height: 100%;\n        }\n\n        :host([has-scrolling-region]) #wrapper ::slotted([slot=\"header\"]) {\n          position: absolute;\n        }\n\n        :host([has-scrolling-region])\n          #wrapper.initializing\n          ::slotted([slot=\"header\"]) {\n          position: relative;\n        }\n\n        :host([has-scrolling-region]) #wrapper #contentContainer {\n          @apply --layout-fit;\n          overflow-y: auto;\n          -webkit-overflow-scrolling: touch;\n        }\n\n        :host([has-scrolling-region]) #wrapper.initializing #contentContainer {\n          position: relative;\n        }\n\n        #contentContainer {\n          /* Create a stacking context here so that all children appear below the header. */\n          position: relative;\n          z-index: 0;\n          /* Using 'transform' will cause 'position: fixed' elements to behave like\n           'position: absolute' relative to this element. */\n          transform: translate(0);\n          margin-left: env(safe-area-inset-left);\n          margin-right: env(safe-area-inset-right);\n        }\n\n        @media print {\n          :host([has-scrolling-region]) #wrapper #contentContainer {\n            overflow-y: visible;\n          }\n        }\n      </style>\n\n      <div id=\"wrapper\" class=\"initializing\">\n        <slot id=\"headerSlot\" name=\"header\"></slot>\n\n        <div id=\"contentContainer\"><slot></slot></div>\n        <slot id=\"fab\" name=\"fab\"></slot>\n      </div>\n    `;\n  }\n}\ncustomElements.define(\"ha-app-layout\", HaAppLayout);\n","import { mdiPlus } from \"@mdi/js\";\nimport { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport \"../homeassistant-frontend/src/components/data-table/ha-data-table\";\nimport \"../homeassistant-frontend/src/components/ha-fab\";\nimport {\n  DataTableRowData,\n  RowClickedEvent,\n} from \"../homeassistant-frontend/src/components/data-table/ha-data-table\";\nimport \"../homeassistant-frontend/src/components/ha-card\";\nimport \"../homeassistant-frontend/src/components/ha-button-menu\";\n// import \"../homeassistant-frontend/src/layouts/hass-subpage\";\nimport \"../homeassistant-frontend/src/layouts/ha-app-layout\";\nimport \"../homeassistant-frontend/src/layouts/hass-tabs-subpage-data-table\";\nimport { haStyle } from \"../homeassistant-frontend/src/resources/styles\";\nimport { HomeAssistant, Route } from \"../homeassistant-frontend/src/types\";\nimport {\n  subscribeDeviceRegistry,\n  DeviceRegistryEntry,\n} from \"../homeassistant-frontend/src/data/device_registry\";\nimport { Insteon } from \"./data/insteon\";\nimport { navigate } from \"../homeassistant-frontend/src/common/navigate\";\nimport { HASSDomEvent } from \"../homeassistant-frontend/src/common/dom/fire_event\";\nimport {\n  AreaRegistryEntry,\n  subscribeAreaRegistry,\n} from \"../homeassistant-frontend/src/data/area_registry\";\nimport { showInsteonAddDeviceDialog } from \"./device/show-dialog-insteon-add-device\";\nimport { showInsteonAddingDeviceDialog } from \"./device/show-dialog-adding-device\";\nimport { insteonMainTabs } from \"./insteon-router\";\nimport \"../homeassistant-frontend/src/components/ha-fab\";\n\ninterface DeviceRowData extends DataTableRowData {\n  id: string;\n  name: string;\n  address: string;\n  description: string;\n  model: string;\n  area: string;\n}\n\n@customElement(\"insteon-devices-panel\")\nexport class InsteonDevicesPanel extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Object }) public insteon!: Insteon;\n\n  @property({ type: Object }) public route!: Route;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  @property({ type: Array }) private _devices: DeviceRegistryEntry[] = [];\n\n  private _areas: AreaRegistryEntry[] = [];\n\n  private _unsubs?: UnsubscribeFunc[];\n\n  public firstUpdated(changedProperties) {\n    super.firstUpdated(changedProperties);\n\n    if (!this.hass || !this.insteon) {\n      return;\n    }\n    if (!this._unsubs) {\n      this._getDevices();\n    }\n  }\n\n  public updated(changedProperties) {\n    super.updated(changedProperties);\n\n    if (!this.hass || !this.insteon) {\n      return;\n    }\n    if (!this._unsubs) {\n      this._getDevices();\n    }\n  }\n\n  public disconnectedCallback() {\n    super.disconnectedCallback();\n    if (this._unsubs) {\n      while (this._unsubs.length) {\n        this._unsubs.pop()!();\n      }\n      this._unsubs = undefined;\n    }\n  }\n\n  private _getDevices() {\n    if (!this.insteon || !this.hass) {\n      return;\n    }\n\n    this._unsubs = [\n      subscribeAreaRegistry(this.hass.connection, (areas) => {\n        this._areas = areas;\n      }),\n      subscribeDeviceRegistry(this.hass.connection, (entries) => {\n        this._devices = entries.filter(\n          (device) =>\n            device.config_entries &&\n            device.config_entries.includes(this.insteon.config_entry.entry_id)\n        );\n      }),\n    ];\n  }\n\n  private _columns = memoizeOne((narrow: boolean) =>\n    narrow\n      ? {\n          name: {\n            title: \"Device\",\n            sortable: true,\n            filterable: true,\n            direction: \"asc\",\n            grows: true,\n          },\n          address: {\n            title: \"Address\",\n            sortable: true,\n            filterable: true,\n            direction: \"asc\",\n            width: \"5hv\",\n          },\n        }\n      : {\n          name: {\n            title: \"Device\",\n            sortable: true,\n            filterable: true,\n            direction: \"asc\",\n            grows: true,\n          },\n          address: {\n            title: \"Address\",\n            sortable: true,\n            filterable: true,\n            direction: \"asc\",\n            width: \"20%\",\n          },\n          description: {\n            title: \"Description\",\n            sortable: true,\n            filterable: true,\n            direction: \"asc\",\n            width: \"15%\",\n          },\n          model: {\n            title: \"Model\",\n            sortable: true,\n            filterable: true,\n            direction: \"asc\",\n            width: \"15%\",\n          },\n          area: {\n            title: \"Area\",\n            sortable: true,\n            filterable: true,\n            direction: \"asc\",\n            width: \"15%\",\n          },\n        }\n  );\n\n  private _insteonDevices = memoizeOne((devices: DeviceRegistryEntry[]) => {\n    const areaLookup: { [areaId: string]: AreaRegistryEntry } = {};\n    for (const area of this._areas) {\n      areaLookup[area.area_id] = area;\n    }\n\n    const insteonDevices: DeviceRowData[] = devices.map((device) => {\n      const deviceRowdata: DeviceRowData = {\n        id: device.id,\n        name: device.name_by_user || device.name || \"No device name\",\n        address: device.name?.substring(device.name.length - 8) || \"\",\n        description: device.name?.substring(0, device.name.length - 8) || \"\",\n        model: device.model || \"\",\n        area: device.area_id ? areaLookup[device.area_id].name : \"\",\n      };\n      return deviceRowdata;\n    });\n    return insteonDevices;\n  });\n\n  protected render(): TemplateResult | void {\n    return html`\n      <hass-tabs-subpage-data-table\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .tabs=${insteonMainTabs}\n        .route=${this.route}\n        .data=${this._insteonDevices(this._devices)}\n        .columns=${this._columns(this.narrow)}\n        @row-click=${this._handleRowClicked}\n        clickable\n        .localizeFunc=${this.insteon.localize}\n        .mainPage=${true}\n        .hasFab=${true}\n      >\n        <ha-fab\n          slot=\"fab\"\n          .label=${this.insteon.localize(\"devices.add_device\")}\n          extended\n          @click=${this._addDevice}\n        >\n          <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\n        </ha-fab>\n      </hass-tabs-subpage-data-table>\n    `;\n  }\n\n  private async _addDevice(): Promise<void> {\n    showInsteonAddDeviceDialog(this, {\n      hass: this.hass,\n      insteon: this.insteon,\n      title: this.insteon.localize(\"device.actions.add\"),\n      callback: async (address, multiple) => this._handleDeviceAdd(address, multiple),\n    });\n  }\n\n  private async _handleDeviceAdd(address: string, multiple: boolean) {\n    showInsteonAddingDeviceDialog(this, {\n      hass: this.hass,\n      insteon: this.insteon,\n      multiple: multiple,\n      address: address,\n      title: \"Adding Insteon Device\",\n    });\n  }\n\n  private async _handleRowClicked(ev: HASSDomEvent<RowClickedEvent>): Promise<void> {\n    // eslint-disable-next-line no-console\n    // console.info(\"Row clicked received\");\n    const id = ev.detail.id;\n    navigate(\"/insteon/device/properties/\" + id);\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      css`\n        ha-data-table {\n          width: 100%;\n          height: 100%;\n          --data-table-border-width: 0;\n        }\n        :host(:not([narrow])) ha-data-table {\n          height: calc(100vh - 1px - var(--header-height));\n          display: block;\n        }\n        :host([narrow]) hass-tabs-subpage {\n          --main-title-margin: 0;\n        }\n        .table-header {\n          display: flex;\n          align-items: center;\n          --mdc-shape-small: 0;\n          height: 56px;\n        }\n        .search-toolbar {\n          display: flex;\n          align-items: center;\n          color: var(--secondary-text-color);\n        }\n        search-input {\n          --mdc-text-field-fill-color: var(--sidebar-background-color);\n          --mdc-text-field-idle-line-color: var(--divider-color);\n          --text-field-overflow: visible;\n          z-index: 5;\n        }\n        .table-header search-input {\n          display: block;\n          position: absolute;\n          top: 0;\n          right: 0;\n          left: 0;\n        }\n        .search-toolbar search-input {\n          display: block;\n          width: 100%;\n          color: var(--secondary-text-color);\n          --mdc-ripple-color: transparant;\n        }\n        #fab {\n          position: fixed;\n          right: calc(16px + env(safe-area-inset-right));\n          bottom: calc(16px + env(safe-area-inset-bottom));\n          z-index: 1;\n        }\n        :host([narrow]) #fab.tabs {\n          bottom: calc(84px + env(safe-area-inset-bottom));\n        }\n        #fab[is-wide] {\n          bottom: 24px;\n          right: 24px;\n        }\n        :host([rtl]) #fab {\n          right: auto;\n          left: calc(16px + env(safe-area-inset-left));\n        }\n        :host([rtl][is-wide]) #fab {\n          bottom: 24px;\n          left: 24px;\n          right: auto;\n        }\n      `,\n      haStyle,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"insteon-devices-panel\": InsteonDevicesPanel;\n  }\n}\n"],"names":[],"sourceRoot":""}