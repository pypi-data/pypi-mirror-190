# coding: utf-8


"""
IGNORE:
    Nutanix Clustermgmt Versioned APIs

    Manage Hosts, Clusters and other Infrastructure.  # noqa: E501

    OpenAPI spec version: 4.0.2-alpha-2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from ntnx_clustermgmt_py_client.Ntnx.clustermgmt.v4.config.RsyslogModuleItem import RsyslogModuleItem  # noqa: F401,E501
from ntnx_clustermgmt_py_client.Ntnx.clustermgmt.v4.config.RsyslogNetworkProtocol import RsyslogNetworkProtocol  # noqa: F401,E501
from ntnx_clustermgmt_py_client.Ntnx.common.v1.config.IPAddress import IPAddress  # noqa: F401,E501
from ntnx_clustermgmt_py_client.Ntnx.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_clustermgmt_py_client.Ntnx.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501

"""
IGNORE:
NOTE: This class is auto generated by the swagger code generator program.

Do not edit the class manually.
IGNORE
"""


class RsyslogServer(ExternalizableAbstractModel):
    """RsyslogServer - a model defined in Swagger"""
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """ # noqa: E501
    swagger_types = {
        'server_name': 'str',
        'ip_address': 'common.v1.config.IPAddress',
        'port': 'int',
        'network_protocol': 'clustermgmt.v4.config.RsyslogNetworkProtocol',
        'modules': 'list[clustermgmt.v4.config.RsyslogModuleItem]',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'server_name': 'serverName',
        'ip_address': 'ipAddress',
        'port': 'port',
        'network_protocol': 'networkProtocol',
        'modules': 'modules',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, server_name=None, ip_address=None, port=None, network_protocol=None, modules=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        """RsyslogServer - a model defined in Swagger
            
        """
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__server_name = None
        self.__ip_address = None
        self.__port = None
        self.__network_protocol = None
        self.__modules = None
        self.discriminator = None
        self.__server_name = server_name
        self.__ip_address = ip_address
        self.__port = port
        self.__network_protocol = network_protocol
        if modules is not None:
            self.__modules = modules

    def _initialize_object_type(self):
        return 'clustermgmt.v4.config.RsyslogServer'

    def _initialize_fq_object_type(self):
        return 'clustermgmt.v4.r0.a2.config.RsyslogServer'


    @property
    def server_name(self):
        """`{ str }`
            \nRSYSLOG server name
        """ # noqa: E501
        return self.__server_name

    @server_name.setter
    def server_name(self, server_name):
        if server_name is None:
            raise ValueError("Invalid value for `server_name`, must not be `None`")  # noqa: E501

        self.__server_name = server_name

    @property
    def ip_address(self):
        """`{ common.v1.config.IPAddress }`
            
        """ # noqa: E501
        return self.__ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        if ip_address is None:
            raise ValueError("Invalid value for `ip_address`, must not be `None`")  # noqa: E501

        self.__ip_address = ip_address

    @property
    def port(self):
        """`{ int }`
            \nRSYSLOG server port
        """ # noqa: E501
        return self.__port

    @port.setter
    def port(self, port):
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")  # noqa: E501

        self.__port = port

    @property
    def network_protocol(self):
        """`{ clustermgmt.v4.config.RsyslogNetworkProtocol }`
            
        """ # noqa: E501
        return self.__network_protocol

    @network_protocol.setter
    def network_protocol(self, network_protocol):
        if network_protocol is None:
            raise ValueError("Invalid value for `network_protocol`, must not be `None`")  # noqa: E501

        self.__network_protocol = network_protocol

    @property
    def modules(self):
        """`{ list[clustermgmt.v4.config.RsyslogModuleItem] }`
            \nList of modules registered to RSYSLOG server
        """ # noqa: E501
        return self.__modules

    @modules.setter
    def modules(self, modules):

        self.__modules = modules

    def _to_dict(self, sanitize):
        """
        Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.
        :param bool sanitize
        """

        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize))
                    if hasattr(item[1], "_to_dict") else item,
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(RsyslogServer, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dict"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RsyslogServer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

