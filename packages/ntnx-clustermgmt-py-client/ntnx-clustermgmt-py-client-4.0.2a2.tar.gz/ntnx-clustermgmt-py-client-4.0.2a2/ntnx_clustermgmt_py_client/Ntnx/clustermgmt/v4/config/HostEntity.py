# coding: utf-8


"""
IGNORE:
    Nutanix Clustermgmt Versioned APIs

    Manage Hosts, Clusters and other Infrastructure.  # noqa: E501

    OpenAPI spec version: 4.0.2-alpha-2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from ntnx_clustermgmt_py_client.Ntnx.clustermgmt.v4.config.ClusterReference import ClusterReference  # noqa: F401,E501
from ntnx_clustermgmt_py_client.Ntnx.clustermgmt.v4.config.ControllerVmReference import ControllerVmReference  # noqa: F401,E501
from ntnx_clustermgmt_py_client.Ntnx.clustermgmt.v4.config.DiskReference import DiskReference  # noqa: F401,E501
from ntnx_clustermgmt_py_client.Ntnx.clustermgmt.v4.config.HostTypeEnum import HostTypeEnum  # noqa: F401,E501
from ntnx_clustermgmt_py_client.Ntnx.clustermgmt.v4.config.HypervisorReference import HypervisorReference  # noqa: F401,E501
from ntnx_clustermgmt_py_client.Ntnx.clustermgmt.v4.config.KeyManagementDeviceToCertStatus import KeyManagementDeviceToCertStatus  # noqa: F401,E501
from ntnx_clustermgmt_py_client.Ntnx.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_clustermgmt_py_client.Ntnx.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501

"""
IGNORE:
NOTE: This class is auto generated by the swagger code generator program.

Do not edit the class manually.
IGNORE
"""


class HostEntity(ExternalizableAbstractModel):
    """HostEntity - a model defined in Swagger"""
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """ # noqa: E501
    swagger_types = {
        'host_name': 'str',
        'host_type': 'clustermgmt.v4.config.HostTypeEnum',
        'hypervisor': 'clustermgmt.v4.config.HypervisorReference',
        'cluster': 'clustermgmt.v4.config.ClusterReference',
        'controller_vm': 'clustermgmt.v4.config.ControllerVmReference',
        'disk': 'list[clustermgmt.v4.config.DiskReference]',
        'is_degraded': 'bool',
        'is_secure_booted': 'bool',
        'is_hardware_virtualized': 'bool',
        'has_csr': 'bool',
        'key_management_device_to_cert_status': 'list[clustermgmt.v4.config.KeyManagementDeviceToCertStatus]',
        'number_of_cpu_cores': 'int',
        'number_of_cpu_threads': 'int',
        'number_of_cpu_sockets': 'int',
        'cpu_capacity_hz': 'int',
        'cpu_frequency_hz': 'int',
        'cpu_model': 'str',
        'host_nics_id_list': 'list[str]',
        'gpu_driver_version': 'str',
        'gpu_list': 'list[str]',
        'default_vhd_location': 'str',
        'default_vhd_container_id': 'str',
        'default_vhd_container_uuid': 'str',
        'default_vm_location': 'str',
        'default_vm_container_id': 'str',
        'default_vm_container_uuid': 'str',
        'reboot_pending': 'bool',
        'failover_cluster_fqdn': 'str',
        'failover_cluster_node_status': 'str',
        'boot_time_usecs': 'int',
        'memory_size_bytes': 'int',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'host_name': 'hostName',
        'host_type': 'hostType',
        'hypervisor': 'hypervisor',
        'cluster': 'cluster',
        'controller_vm': 'controllerVm',
        'disk': 'disk',
        'is_degraded': 'isDegraded',
        'is_secure_booted': 'isSecureBooted',
        'is_hardware_virtualized': 'isHardwareVirtualized',
        'has_csr': 'hasCsr',
        'key_management_device_to_cert_status': 'keyManagementDeviceToCertStatus',
        'number_of_cpu_cores': 'numberOfCpuCores',
        'number_of_cpu_threads': 'numberOfCpuThreads',
        'number_of_cpu_sockets': 'numberOfCpuSockets',
        'cpu_capacity_hz': 'cpuCapacityHz',
        'cpu_frequency_hz': 'cpuFrequencyHz',
        'cpu_model': 'cpuModel',
        'host_nics_id_list': 'hostNicsIdList',
        'gpu_driver_version': 'gpuDriverVersion',
        'gpu_list': 'gpuList',
        'default_vhd_location': 'defaultVhdLocation',
        'default_vhd_container_id': 'defaultVhdContainerId',
        'default_vhd_container_uuid': 'defaultVhdContainerUuid',
        'default_vm_location': 'defaultVmLocation',
        'default_vm_container_id': 'defaultVmContainerId',
        'default_vm_container_uuid': 'defaultVmContainerUuid',
        'reboot_pending': 'rebootPending',
        'failover_cluster_fqdn': 'failoverClusterFqdn',
        'failover_cluster_node_status': 'failoverClusterNodeStatus',
        'boot_time_usecs': 'bootTimeUsecs',
        'memory_size_bytes': 'memorySizeBytes',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, host_name=None, host_type=None, hypervisor=None, cluster=None, controller_vm=None, disk=None, is_degraded=None, is_secure_booted=None, is_hardware_virtualized=None, has_csr=None, key_management_device_to_cert_status=None, number_of_cpu_cores=None, number_of_cpu_threads=None, number_of_cpu_sockets=None, cpu_capacity_hz=None, cpu_frequency_hz=None, cpu_model=None, host_nics_id_list=None, gpu_driver_version=None, gpu_list=None, default_vhd_location=None, default_vhd_container_id=None, default_vhd_container_uuid=None, default_vm_location=None, default_vm_container_id=None, default_vm_container_uuid=None, reboot_pending=None, failover_cluster_fqdn=None, failover_cluster_node_status=None, boot_time_usecs=None, memory_size_bytes=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        """HostEntity - a model defined in Swagger
            \nHost entity with its attributes
        """
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__host_name = None
        self.__host_type = None
        self.__hypervisor = None
        self.__cluster = None
        self.__controller_vm = None
        self.__disk = None
        self.__is_degraded = None
        self.__is_secure_booted = None
        self.__is_hardware_virtualized = None
        self.__has_csr = None
        self.__key_management_device_to_cert_status = None
        self.__number_of_cpu_cores = None
        self.__number_of_cpu_threads = None
        self.__number_of_cpu_sockets = None
        self.__cpu_capacity_hz = None
        self.__cpu_frequency_hz = None
        self.__cpu_model = None
        self.__host_nics_id_list = None
        self.__gpu_driver_version = None
        self.__gpu_list = None
        self.__default_vhd_location = None
        self.__default_vhd_container_id = None
        self.__default_vhd_container_uuid = None
        self.__default_vm_location = None
        self.__default_vm_container_id = None
        self.__default_vm_container_uuid = None
        self.__reboot_pending = None
        self.__failover_cluster_fqdn = None
        self.__failover_cluster_node_status = None
        self.__boot_time_usecs = None
        self.__memory_size_bytes = None
        self.discriminator = None
        if host_name is not None:
            self.__host_name = host_name
        if host_type is not None:
            self.__host_type = host_type
        if hypervisor is not None:
            self.__hypervisor = hypervisor
        if cluster is not None:
            self.__cluster = cluster
        if controller_vm is not None:
            self.__controller_vm = controller_vm
        if disk is not None:
            self.__disk = disk
        if is_degraded is not None:
            self.__is_degraded = is_degraded
        if is_secure_booted is not None:
            self.__is_secure_booted = is_secure_booted
        if is_hardware_virtualized is not None:
            self.__is_hardware_virtualized = is_hardware_virtualized
        if has_csr is not None:
            self.__has_csr = has_csr
        if key_management_device_to_cert_status is not None:
            self.__key_management_device_to_cert_status = key_management_device_to_cert_status
        if number_of_cpu_cores is not None:
            self.__number_of_cpu_cores = number_of_cpu_cores
        if number_of_cpu_threads is not None:
            self.__number_of_cpu_threads = number_of_cpu_threads
        if number_of_cpu_sockets is not None:
            self.__number_of_cpu_sockets = number_of_cpu_sockets
        if cpu_capacity_hz is not None:
            self.__cpu_capacity_hz = cpu_capacity_hz
        if cpu_frequency_hz is not None:
            self.__cpu_frequency_hz = cpu_frequency_hz
        if cpu_model is not None:
            self.__cpu_model = cpu_model
        if host_nics_id_list is not None:
            self.__host_nics_id_list = host_nics_id_list
        if gpu_driver_version is not None:
            self.__gpu_driver_version = gpu_driver_version
        if gpu_list is not None:
            self.__gpu_list = gpu_list
        if default_vhd_location is not None:
            self.__default_vhd_location = default_vhd_location
        if default_vhd_container_id is not None:
            self.__default_vhd_container_id = default_vhd_container_id
        if default_vhd_container_uuid is not None:
            self.__default_vhd_container_uuid = default_vhd_container_uuid
        if default_vm_location is not None:
            self.__default_vm_location = default_vm_location
        if default_vm_container_id is not None:
            self.__default_vm_container_id = default_vm_container_id
        if default_vm_container_uuid is not None:
            self.__default_vm_container_uuid = default_vm_container_uuid
        if reboot_pending is not None:
            self.__reboot_pending = reboot_pending
        if failover_cluster_fqdn is not None:
            self.__failover_cluster_fqdn = failover_cluster_fqdn
        if failover_cluster_node_status is not None:
            self.__failover_cluster_node_status = failover_cluster_node_status
        if boot_time_usecs is not None:
            self.__boot_time_usecs = boot_time_usecs
        if memory_size_bytes is not None:
            self.__memory_size_bytes = memory_size_bytes

    def _initialize_object_type(self):
        return 'clustermgmt.v4.config.HostEntity'

    def _initialize_fq_object_type(self):
        return 'clustermgmt.v4.r0.a2.config.HostEntity'


    @property
    def host_name(self):
        """`{ str }`
            \nName of the host
        """ # noqa: E501
        return self.__host_name

    @host_name.setter
    def host_name(self, host_name):

        self.__host_name = host_name

    @property
    def host_type(self):
        """`{ clustermgmt.v4.config.HostTypeEnum }`
            
        """ # noqa: E501
        return self.__host_type

    @host_type.setter
    def host_type(self, host_type):

        self.__host_type = host_type

    @property
    def hypervisor(self):
        """`{ clustermgmt.v4.config.HypervisorReference }`
            
        """ # noqa: E501
        return self.__hypervisor

    @hypervisor.setter
    def hypervisor(self, hypervisor):

        self.__hypervisor = hypervisor

    @property
    def cluster(self):
        """`{ clustermgmt.v4.config.ClusterReference }`
            
        """ # noqa: E501
        return self.__cluster

    @cluster.setter
    def cluster(self, cluster):

        self.__cluster = cluster

    @property
    def controller_vm(self):
        """`{ clustermgmt.v4.config.ControllerVmReference }`
            
        """ # noqa: E501
        return self.__controller_vm

    @controller_vm.setter
    def controller_vm(self, controller_vm):

        self.__controller_vm = controller_vm

    @property
    def disk(self):
        """`{ list[clustermgmt.v4.config.DiskReference] }`
            \nDisks attached to host
        """ # noqa: E501
        return self.__disk

    @disk.setter
    def disk(self, disk):

        self.__disk = disk

    @property
    def is_degraded(self):
        """`{ bool }`
            \nNode degraded status
        """ # noqa: E501
        return self.__is_degraded

    @is_degraded.setter
    def is_degraded(self, is_degraded):

        self.__is_degraded = is_degraded

    @property
    def is_secure_booted(self):
        """`{ bool }`
            \nSecure boot status
        """ # noqa: E501
        return self.__is_secure_booted

    @is_secure_booted.setter
    def is_secure_booted(self, is_secure_booted):

        self.__is_secure_booted = is_secure_booted

    @property
    def is_hardware_virtualized(self):
        """`{ bool }`
            \nIndicates whether the hardware is virtualized or not
        """ # noqa: E501
        return self.__is_hardware_virtualized

    @is_hardware_virtualized.setter
    def is_hardware_virtualized(self, is_hardware_virtualized):

        self.__is_hardware_virtualized = is_hardware_virtualized

    @property
    def has_csr(self):
        """`{ bool }`
            \nCertificate signing request status
        """ # noqa: E501
        return self.__has_csr

    @has_csr.setter
    def has_csr(self, has_csr):

        self.__has_csr = has_csr

    @property
    def key_management_device_to_cert_status(self):
        """`{ list[clustermgmt.v4.config.KeyManagementDeviceToCertStatus] }`
            \nMapping of key management device to certificate status list
        """ # noqa: E501
        return self.__key_management_device_to_cert_status

    @key_management_device_to_cert_status.setter
    def key_management_device_to_cert_status(self, key_management_device_to_cert_status):

        self.__key_management_device_to_cert_status = key_management_device_to_cert_status

    @property
    def number_of_cpu_cores(self):
        """`{ int }`
            \nNumber of CPU cores
        """ # noqa: E501
        return self.__number_of_cpu_cores

    @number_of_cpu_cores.setter
    def number_of_cpu_cores(self, number_of_cpu_cores):

        self.__number_of_cpu_cores = number_of_cpu_cores

    @property
    def number_of_cpu_threads(self):
        """`{ int }`
            \nNumber of CPU threads
        """ # noqa: E501
        return self.__number_of_cpu_threads

    @number_of_cpu_threads.setter
    def number_of_cpu_threads(self, number_of_cpu_threads):

        self.__number_of_cpu_threads = number_of_cpu_threads

    @property
    def number_of_cpu_sockets(self):
        """`{ int }`
            \nNumber of CPU sockets
        """ # noqa: E501
        return self.__number_of_cpu_sockets

    @number_of_cpu_sockets.setter
    def number_of_cpu_sockets(self, number_of_cpu_sockets):

        self.__number_of_cpu_sockets = number_of_cpu_sockets

    @property
    def cpu_capacity_hz(self):
        """`{ int }`
            \nCPU capacity in Hz
        """ # noqa: E501
        return self.__cpu_capacity_hz

    @cpu_capacity_hz.setter
    def cpu_capacity_hz(self, cpu_capacity_hz):

        self.__cpu_capacity_hz = cpu_capacity_hz

    @property
    def cpu_frequency_hz(self):
        """`{ int }`
            \nCPU frequency in Hz
        """ # noqa: E501
        return self.__cpu_frequency_hz

    @cpu_frequency_hz.setter
    def cpu_frequency_hz(self, cpu_frequency_hz):

        self.__cpu_frequency_hz = cpu_frequency_hz

    @property
    def cpu_model(self):
        """`{ str }`
            \nCPU model name
        """ # noqa: E501
        return self.__cpu_model

    @cpu_model.setter
    def cpu_model(self, cpu_model):

        self.__cpu_model = cpu_model

    @property
    def host_nics_id_list(self):
        """`{ list[str] }`
            \nHost NICs Id
        """ # noqa: E501
        return self.__host_nics_id_list

    @host_nics_id_list.setter
    def host_nics_id_list(self, host_nics_id_list):

        self.__host_nics_id_list = host_nics_id_list

    @property
    def gpu_driver_version(self):
        """`{ str }`
            \nGPU driver version
        """ # noqa: E501
        return self.__gpu_driver_version

    @gpu_driver_version.setter
    def gpu_driver_version(self, gpu_driver_version):

        self.__gpu_driver_version = gpu_driver_version

    @property
    def gpu_list(self):
        """`{ list[str] }`
            \nGPU attached list
        """ # noqa: E501
        return self.__gpu_list

    @gpu_list.setter
    def gpu_list(self, gpu_list):

        self.__gpu_list = gpu_list

    @property
    def default_vhd_location(self):
        """`{ str }`
            \nDefault VHD location
        """ # noqa: E501
        return self.__default_vhd_location

    @default_vhd_location.setter
    def default_vhd_location(self, default_vhd_location):

        self.__default_vhd_location = default_vhd_location

    @property
    def default_vhd_container_id(self):
        """`{ str }`
            \nDefault VHD container Id
        """ # noqa: E501
        return self.__default_vhd_container_id

    @default_vhd_container_id.setter
    def default_vhd_container_id(self, default_vhd_container_id):

        self.__default_vhd_container_id = default_vhd_container_id

    @property
    def default_vhd_container_uuid(self):
        """`{ str }`
            \nDefault VHD container UUID
        """ # noqa: E501
        return self.__default_vhd_container_uuid

    @default_vhd_container_uuid.setter
    def default_vhd_container_uuid(self, default_vhd_container_uuid):

        self.__default_vhd_container_uuid = default_vhd_container_uuid

    @property
    def default_vm_location(self):
        """`{ str }`
            \nDefault VM location
        """ # noqa: E501
        return self.__default_vm_location

    @default_vm_location.setter
    def default_vm_location(self, default_vm_location):

        self.__default_vm_location = default_vm_location

    @property
    def default_vm_container_id(self):
        """`{ str }`
            \nDefault VM container Id
        """ # noqa: E501
        return self.__default_vm_container_id

    @default_vm_container_id.setter
    def default_vm_container_id(self, default_vm_container_id):

        self.__default_vm_container_id = default_vm_container_id

    @property
    def default_vm_container_uuid(self):
        """`{ str }`
            \nDefault VM container UUID
        """ # noqa: E501
        return self.__default_vm_container_uuid

    @default_vm_container_uuid.setter
    def default_vm_container_uuid(self, default_vm_container_uuid):

        self.__default_vm_container_uuid = default_vm_container_uuid

    @property
    def reboot_pending(self):
        """`{ bool }`
            \nReboot pending status
        """ # noqa: E501
        return self.__reboot_pending

    @reboot_pending.setter
    def reboot_pending(self, reboot_pending):

        self.__reboot_pending = reboot_pending

    @property
    def failover_cluster_fqdn(self):
        """`{ str }`
            \nFailover cluster FQDN
        """ # noqa: E501
        return self.__failover_cluster_fqdn

    @failover_cluster_fqdn.setter
    def failover_cluster_fqdn(self, failover_cluster_fqdn):

        self.__failover_cluster_fqdn = failover_cluster_fqdn

    @property
    def failover_cluster_node_status(self):
        """`{ str }`
            \nFailover cluster node status
        """ # noqa: E501
        return self.__failover_cluster_node_status

    @failover_cluster_node_status.setter
    def failover_cluster_node_status(self, failover_cluster_node_status):

        self.__failover_cluster_node_status = failover_cluster_node_status

    @property
    def boot_time_usecs(self):
        """`{ int }`
            \nBoot time in secs
        """ # noqa: E501
        return self.__boot_time_usecs

    @boot_time_usecs.setter
    def boot_time_usecs(self, boot_time_usecs):

        self.__boot_time_usecs = boot_time_usecs

    @property
    def memory_size_bytes(self):
        """`{ int }`
            \nMemory size in bytes
        """ # noqa: E501
        return self.__memory_size_bytes

    @memory_size_bytes.setter
    def memory_size_bytes(self, memory_size_bytes):

        self.__memory_size_bytes = memory_size_bytes

    def _to_dict(self, sanitize):
        """
        Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.
        :param bool sanitize
        """

        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize))
                    if hasattr(item[1], "_to_dict") else item,
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(HostEntity, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dict"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HostEntity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

