# coding: utf-8


"""
IGNORE:
    Nutanix Clustermgmt Versioned APIs

    Manage Hosts, Clusters and other Infrastructure.  # noqa: E501

    OpenAPI spec version: 4.0.2-alpha-2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from ntnx_clustermgmt_py_client.Ntnx.clustermgmt.v4.config.DigitalCertificateMapReference import DigitalCertificateMapReference  # noqa: F401,E501
from ntnx_clustermgmt_py_client.Ntnx.common.v1.config.IPAddress import IPAddress  # noqa: F401,E501

"""
IGNORE:
NOTE: This class is auto generated by the swagger code generator program.

Do not edit the class manually.
IGNORE
"""


class ComputeNodeItem(object):
    """ComputeNodeItem - a model defined in Swagger"""
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """ # noqa: E501
    swagger_types = {
        'node_uuid': 'str',
        'block_id': 'str',
        'node_position': 'str',
        'hypervisor_ip': 'common.v1.config.IPAddress',
        'ipmi_ip': 'common.v1.config.IPAddress',
        'digital_certificate_map_list': 'list[clustermgmt.v4.config.DigitalCertificateMapReference]',
        'hypervisor_hostname': 'str',
        'model': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'node_uuid': 'nodeUuid',
        'block_id': 'blockId',
        'node_position': 'nodePosition',
        'hypervisor_ip': 'hypervisorIp',
        'ipmi_ip': 'ipmiIp',
        'digital_certificate_map_list': 'digitalCertificateMapList',
        'hypervisor_hostname': 'hypervisorHostname',
        'model': 'model',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, node_uuid=None, block_id=None, node_position=None, hypervisor_ip=None, ipmi_ip=None, digital_certificate_map_list=None, hypervisor_hostname=None, model=None, *args, **kwargs):  # noqa: E501
        """ComputeNodeItem - a model defined in Swagger
            \nCompute node details
        """
        self.__node_uuid = None
        self.__block_id = None
        self.__node_position = None
        self.__hypervisor_ip = None
        self.__ipmi_ip = None
        self.__digital_certificate_map_list = None
        self.__hypervisor_hostname = None
        self.__model = None
        self.discriminator = None
        if node_uuid is not None:
            self.__node_uuid = node_uuid
        if block_id is not None:
            self.__block_id = block_id
        if node_position is not None:
            self.__node_position = node_position
        if hypervisor_ip is not None:
            self.__hypervisor_ip = hypervisor_ip
        if ipmi_ip is not None:
            self.__ipmi_ip = ipmi_ip
        if digital_certificate_map_list is not None:
            self.__digital_certificate_map_list = digital_certificate_map_list
        if hypervisor_hostname is not None:
            self.__hypervisor_hostname = hypervisor_hostname
        if model is not None:
            self.__model = model
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'clustermgmt.v4.config.ComputeNodeItem'

    def _initialize_fq_object_type(self):
        return 'clustermgmt.v4.r0.a2.config.ComputeNodeItem'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fqObjectType": self._initialize_fq_object_type()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def node_uuid(self):
        """`{ str }`
            \nUUID of a node
        """ # noqa: E501
        return self.__node_uuid

    @node_uuid.setter
    def node_uuid(self, node_uuid):
        if node_uuid is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', node_uuid):  # noqa: E501
            raise ValueError(r"Invalid value for `node_uuid`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__node_uuid = node_uuid

    @property
    def block_id(self):
        """`{ str }`
            \nRackable unit Id in which node resides
        """ # noqa: E501
        return self.__block_id

    @block_id.setter
    def block_id(self, block_id):

        self.__block_id = block_id

    @property
    def node_position(self):
        """`{ str }`
            \nPosition of a node in a rackable unit
        """ # noqa: E501
        return self.__node_position

    @node_position.setter
    def node_position(self, node_position):

        self.__node_position = node_position

    @property
    def hypervisor_ip(self):
        """`{ common.v1.config.IPAddress }`
            
        """ # noqa: E501
        return self.__hypervisor_ip

    @hypervisor_ip.setter
    def hypervisor_ip(self, hypervisor_ip):

        self.__hypervisor_ip = hypervisor_ip

    @property
    def ipmi_ip(self):
        """`{ common.v1.config.IPAddress }`
            
        """ # noqa: E501
        return self.__ipmi_ip

    @ipmi_ip.setter
    def ipmi_ip(self, ipmi_ip):

        self.__ipmi_ip = ipmi_ip

    @property
    def digital_certificate_map_list(self):
        """`{ list[clustermgmt.v4.config.DigitalCertificateMapReference] }`
            \nList of objects containing digital_certificate_base64 and key_management_server_uuid fields for key management server
        """ # noqa: E501
        return self.__digital_certificate_map_list

    @digital_certificate_map_list.setter
    def digital_certificate_map_list(self, digital_certificate_map_list):

        self.__digital_certificate_map_list = digital_certificate_map_list

    @property
    def hypervisor_hostname(self):
        """`{ str }`
            \nName of the host
        """ # noqa: E501
        return self.__hypervisor_hostname

    @hypervisor_hostname.setter
    def hypervisor_hostname(self, hypervisor_hostname):

        self.__hypervisor_hostname = hypervisor_hostname

    @property
    def model(self):
        """`{ str }`
            \nRackable unit model type
        """ # noqa: E501
        return self.__model

    @model.setter
    def model(self, model):

        self.__model = model

    @property
    def _reserved(self):
        """`{ dict(str, object) }`
            
        """ # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """`{ str }`
            
        """ # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """`{ dict(str, object) }`
            
        """ # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """
        Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.
        :param bool sanitize
        """

        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize))
                    if hasattr(item[1], "_to_dict") else item,
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(ComputeNodeItem, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dict"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComputeNodeItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

