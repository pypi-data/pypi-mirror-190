# coding: utf-8


"""
IGNORE:
    Nutanix Clustermgmt Versioned APIs

    Manage Hosts, Clusters and other Infrastructure.  # noqa: E501

    OpenAPI spec version: 4.0.2-alpha-2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from ntnx_clustermgmt_py_client.Ntnx.clustermgmt.v4.config.HypervisorType import HypervisorType  # noqa: F401,E501

"""
IGNORE:
NOTE: This class is auto generated by the swagger code generator program.

Do not edit the class manually.
IGNORE
"""


class HypervisorUploadNodeListItem(object):
    """HypervisorUploadNodeListItem - a model defined in Swagger"""
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """ # noqa: E501
    swagger_types = {
        'node_uuid': 'str',
        'hypervisor_version': 'str',
        'nos_version': 'str',
        'model': 'str',
        'block_id': 'str',
        'is_light_compute': 'bool',
        'hypervisor_type': 'clustermgmt.v4.config.HypervisorType',
        'robo_mixed_hypervisor': 'bool',
        'minimum_compute_node': 'bool',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'node_uuid': 'nodeUuid',
        'hypervisor_version': 'hypervisorVersion',
        'nos_version': 'nosVersion',
        'model': 'model',
        'block_id': 'blockId',
        'is_light_compute': 'isLightCompute',
        'hypervisor_type': 'hypervisorType',
        'robo_mixed_hypervisor': 'roboMixedHypervisor',
        'minimum_compute_node': 'minimumComputeNode',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, node_uuid=None, hypervisor_version=None, nos_version=None, model=None, block_id=None, is_light_compute=None, hypervisor_type=None, robo_mixed_hypervisor=None, minimum_compute_node=None, *args, **kwargs):  # noqa: E501
        """HypervisorUploadNodeListItem - a model defined in Swagger
            \nIndividual node item details for checking whether hypervisor ISO upload is required or not
        """
        self.__node_uuid = None
        self.__hypervisor_version = None
        self.__nos_version = None
        self.__model = None
        self.__block_id = None
        self.__is_light_compute = None
        self.__hypervisor_type = None
        self.__robo_mixed_hypervisor = None
        self.__minimum_compute_node = None
        self.discriminator = None
        if node_uuid is not None:
            self.__node_uuid = node_uuid
        if hypervisor_version is not None:
            self.__hypervisor_version = hypervisor_version
        if nos_version is not None:
            self.__nos_version = nos_version
        if model is not None:
            self.__model = model
        if block_id is not None:
            self.__block_id = block_id
        if is_light_compute is not None:
            self.__is_light_compute = is_light_compute
        if hypervisor_type is not None:
            self.__hypervisor_type = hypervisor_type
        if robo_mixed_hypervisor is not None:
            self.__robo_mixed_hypervisor = robo_mixed_hypervisor
        if minimum_compute_node is not None:
            self.__minimum_compute_node = minimum_compute_node
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'clustermgmt.v4.config.HypervisorUploadNodeListItem'

    def _initialize_fq_object_type(self):
        return 'clustermgmt.v4.r0.a2.config.HypervisorUploadNodeListItem'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fqObjectType": self._initialize_fq_object_type()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def node_uuid(self):
        """`{ str }`
            \nUUID of a node
        """ # noqa: E501
        return self.__node_uuid

    @node_uuid.setter
    def node_uuid(self, node_uuid):
        if node_uuid is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', node_uuid):  # noqa: E501
            raise ValueError(r"Invalid value for `node_uuid`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__node_uuid = node_uuid

    @property
    def hypervisor_version(self):
        """`{ str }`
            \nHost version of the node
        """ # noqa: E501
        return self.__hypervisor_version

    @hypervisor_version.setter
    def hypervisor_version(self, hypervisor_version):

        self.__hypervisor_version = hypervisor_version

    @property
    def nos_version(self):
        """`{ str }`
            \nNOS software version of a node
        """ # noqa: E501
        return self.__nos_version

    @nos_version.setter
    def nos_version(self, nos_version):

        self.__nos_version = nos_version

    @property
    def model(self):
        """`{ str }`
            \nRackable unit model type
        """ # noqa: E501
        return self.__model

    @model.setter
    def model(self, model):

        self.__model = model

    @property
    def block_id(self):
        """`{ str }`
            \nRackable unit Id in which node resides
        """ # noqa: E501
        return self.__block_id

    @block_id.setter
    def block_id(self, block_id):

        self.__block_id = block_id

    @property
    def is_light_compute(self):
        """`{ bool }`
            \nIndicates whether the node is light compute or not
        """ # noqa: E501
        return self.__is_light_compute

    @is_light_compute.setter
    def is_light_compute(self, is_light_compute):

        self.__is_light_compute = is_light_compute

    @property
    def hypervisor_type(self):
        """`{ clustermgmt.v4.config.HypervisorType }`
            
        """ # noqa: E501
        return self.__hypervisor_type

    @hypervisor_type.setter
    def hypervisor_type(self, hypervisor_type):

        self.__hypervisor_type = hypervisor_type

    @property
    def robo_mixed_hypervisor(self):
        """`{ bool }`
            \nIndicates whether the hypervisor is robo mixed or not
        """ # noqa: E501
        return self.__robo_mixed_hypervisor

    @robo_mixed_hypervisor.setter
    def robo_mixed_hypervisor(self, robo_mixed_hypervisor):

        self.__robo_mixed_hypervisor = robo_mixed_hypervisor

    @property
    def minimum_compute_node(self):
        """`{ bool }`
            \nIndicates if node is minimum compute or not
        """ # noqa: E501
        return self.__minimum_compute_node

    @minimum_compute_node.setter
    def minimum_compute_node(self, minimum_compute_node):

        self.__minimum_compute_node = minimum_compute_node

    @property
    def _reserved(self):
        """`{ dict(str, object) }`
            
        """ # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """`{ str }`
            
        """ # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """`{ dict(str, object) }`
            
        """ # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """
        Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.
        :param bool sanitize
        """

        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize))
                    if hasattr(item[1], "_to_dict") else item,
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(HypervisorUploadNodeListItem, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dict"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HypervisorUploadNodeListItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

