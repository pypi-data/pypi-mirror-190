# coding: utf-8


"""
IGNORE:
    Nutanix Clustermgmt Versioned APIs

    Manage Hosts, Clusters and other Infrastructure.  # noqa: E501

    OpenAPI spec version: 4.0.2-alpha-2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from ntnx_clustermgmt_py_client.Ntnx.clustermgmt.v4.config.ClusterReference import ClusterReference  # noqa: F401,E501
from ntnx_clustermgmt_py_client.Ntnx.clustermgmt.v4.config.GpuConfig import GpuConfig  # noqa: F401,E501
from ntnx_clustermgmt_py_client.Ntnx.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_clustermgmt_py_client.Ntnx.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501

"""
IGNORE:
NOTE: This class is auto generated by the swagger code generator program.

Do not edit the class manually.
IGNORE
"""


class HostGpuEntity(ExternalizableAbstractModel):
    """HostGpuEntity - a model defined in Swagger"""
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """ # noqa: E501
    swagger_types = {
        'node_uuid': 'str',
        'node_id': 'str',
        'cluster': 'clustermgmt.v4.config.ClusterReference',
        'number_of_vgpus_allocated': 'int',
        'config': 'clustermgmt.v4.config.GpuConfig',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'node_uuid': 'nodeUuid',
        'node_id': 'nodeId',
        'cluster': 'cluster',
        'number_of_vgpus_allocated': 'numberOfVgpusAllocated',
        'config': 'config',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, node_uuid=None, node_id=None, cluster=None, number_of_vgpus_allocated=None, config=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        """HostGpuEntity - a model defined in Swagger
            \nHost GPU details
        """
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__node_uuid = None
        self.__node_id = None
        self.__cluster = None
        self.__number_of_vgpus_allocated = None
        self.__config = None
        self.discriminator = None
        if node_uuid is not None:
            self.__node_uuid = node_uuid
        if node_id is not None:
            self.__node_id = node_id
        if cluster is not None:
            self.__cluster = cluster
        if number_of_vgpus_allocated is not None:
            self.__number_of_vgpus_allocated = number_of_vgpus_allocated
        if config is not None:
            self.__config = config

    def _initialize_object_type(self):
        return 'clustermgmt.v4.config.HostGpuEntity'

    def _initialize_fq_object_type(self):
        return 'clustermgmt.v4.r0.a2.config.HostGpuEntity'


    @property
    def node_uuid(self):
        """`{ str }`
            \nUUID of a node
        """ # noqa: E501
        return self.__node_uuid

    @node_uuid.setter
    def node_uuid(self, node_uuid):
        if node_uuid is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', node_uuid):  # noqa: E501
            raise ValueError(r"Invalid value for `node_uuid`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__node_uuid = node_uuid

    @property
    def node_id(self):
        """`{ str }`
            \nController VM Id
        """ # noqa: E501
        return self.__node_id

    @node_id.setter
    def node_id(self, node_id):

        self.__node_id = node_id

    @property
    def cluster(self):
        """`{ clustermgmt.v4.config.ClusterReference }`
            
        """ # noqa: E501
        return self.__cluster

    @cluster.setter
    def cluster(self, cluster):

        self.__cluster = cluster

    @property
    def number_of_vgpus_allocated(self):
        """`{ int }`
            \nNumber of vGPUs allocated
        """ # noqa: E501
        return self.__number_of_vgpus_allocated

    @number_of_vgpus_allocated.setter
    def number_of_vgpus_allocated(self, number_of_vgpus_allocated):

        self.__number_of_vgpus_allocated = number_of_vgpus_allocated

    @property
    def config(self):
        """`{ clustermgmt.v4.config.GpuConfig }`
            
        """ # noqa: E501
        return self.__config

    @config.setter
    def config(self, config):

        self.__config = config

    def _to_dict(self, sanitize):
        """
        Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.
        :param bool sanitize
        """

        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize))
                    if hasattr(item[1], "_to_dict") else item,
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(HostGpuEntity, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dict"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HostGpuEntity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

