# coding: utf-8


"""
IGNORE:
    Nutanix Clustermgmt Versioned APIs

    Manage Hosts, Clusters and other Infrastructure.  # noqa: E501

    OpenAPI spec version: 4.0.2-alpha-2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from ntnx_clustermgmt_py_client.Ntnx.clustermgmt.v4.config.StatsData import StatsData  # noqa: F401,E501
from ntnx_clustermgmt_py_client.Ntnx.clustermgmt.v4.config.StatsType import StatsType  # noqa: F401,E501
from ntnx_clustermgmt_py_client.Ntnx.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_clustermgmt_py_client.Ntnx.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501

"""
IGNORE:
NOTE: This class is auto generated by the swagger code generator program.

Do not edit the class manually.
IGNORE
"""


class StatsQueryResp(ExternalizableAbstractModel):
    """StatsQueryResp - a model defined in Swagger"""
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """ # noqa: E501
    swagger_types = {
        'entity_uuid': 'str',
        'stats_type': 'clustermgmt.v4.config.StatsType',
        'stats_data': 'list[clustermgmt.v4.config.StatsData]',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'entity_uuid': 'entityUuid',
        'stats_type': 'statsType',
        'stats_data': 'statsData',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, entity_uuid=None, stats_type=None, stats_data=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        """StatsQueryResp - a model defined in Swagger
            \nResponse of statistics query.
        """
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__entity_uuid = None
        self.__stats_type = None
        self.__stats_data = None
        self.discriminator = None
        if entity_uuid is not None:
            self.__entity_uuid = entity_uuid
        if stats_type is not None:
            self.__stats_type = stats_type
        if stats_data is not None:
            self.__stats_data = stats_data

    def _initialize_object_type(self):
        return 'clustermgmt.v4.config.StatsQueryResp'

    def _initialize_fq_object_type(self):
        return 'clustermgmt.v4.r0.a2.config.StatsQueryResp'


    @property
    def entity_uuid(self):
        """`{ str }`
            \nUUID of queried entity.
        """ # noqa: E501
        return self.__entity_uuid

    @entity_uuid.setter
    def entity_uuid(self, entity_uuid):
        if entity_uuid is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', entity_uuid):  # noqa: E501
            raise ValueError(r"Invalid value for `entity_uuid`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__entity_uuid = entity_uuid

    @property
    def stats_type(self):
        """`{ clustermgmt.v4.config.StatsType }`
            
        """ # noqa: E501
        return self.__stats_type

    @stats_type.setter
    def stats_type(self, stats_type):

        self.__stats_type = stats_type

    @property
    def stats_data(self):
        """`{ list[clustermgmt.v4.config.StatsData] }`
            \nReturned list of statistics data.
        """ # noqa: E501
        return self.__stats_data

    @stats_data.setter
    def stats_data(self, stats_data):

        self.__stats_data = stats_data

    def _to_dict(self, sanitize):
        """
        Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.
        :param bool sanitize
        """

        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize))
                    if hasattr(item[1], "_to_dict") else item,
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(StatsQueryResp, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dict"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatsQueryResp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

