# Author: Gregor Boehl [mail@gregorboehl.com]
---

name: 'hank2'
description: 'A HANK model with two assets and portfolio choice'
functions_file: 'hank2_functions.py'
# NOTE: the file hank.yaml contains a detailed explanation of the objects defined here

definitions: |
    from jax.numpy import log, maximum
    from econpizza.utilities.grids import log_grid
    from econpizza.utilities.dists import expect_transition
    from econpizza.tools import jax_print
    k_grid = log_grid(amax=1., n=4)[::-1]

variables: [ C, mc, Y, pi, div, p, N, Z, w, K, Q, R, Rn, Rstar, tax, G, Rb, Ra, piw, wealth, A, B, I, beta ]
parameters: [ eis, frisch, psi, psiw, delta, Bg, chi0, chi2, phiss, omega, phi_pi, phi_y, rho, rho_beta, rho_Rstar, rho_G, rho_Z, thetaw, alpha, theta, vphi, chi1 ]
shocks: [ e_beta ]

distributions:
  dist:
    skills:
      type: exogenous
      grid_variables: [skills_grid, skills_stationary, skills_transition]
      rho: 0.966
      sigma: 0.92
      n: 3
    b:
      type: endogenous
      grid_variables: b_grid
      min: 0.0
      max: 50
      n: 10
    a:
      type: endogenous
      grid_variables: a_grid
      min: 0.0
      max: 1000
      n: 16

decisions:
  inputs: [VaPrime,VbPrime]
  calls: |
    z_grid = income(skills_grid, tax, w, N)
    Psi1 = marginal_cost_grid(a_grid, Ra-1, chi0, chi1, chi2)
    VaPrimeExp = expect_transition(skills_transition, VaPrime)
    VbPrimeExp = expect_transition(skills_transition, VbPrime)
    Va, Vb, a, b, c, uce = hh(VaPrimeExp, VbPrimeExp, a_grid, b_grid, z_grid, skills_grid, k_grid, beta, eis, Rb-1, Ra-1, chi0, chi1, chi2, Psi1)
  outputs: [a,b,c,uce]

aux_equations: |
    # aggregation
    aggr_a = jnp.sum(dist*a, axis=(0,1,2))
    aggr_b = jnp.sum(dist*b, axis=(0,1,2))
    aggr_c = jnp.sum(dist*c, axis=(0,1,2))
    UCE = jnp.sum(dist*uce, axis=(0,1,2))

    # misc definitions
    dI = I/ILag
    dIPrime = IPrime/I
    p_adj_cost = psi*(pi/piSS - 1)**2/2*Y
    kap_adj_cost = 1/(2*phiss)*(dI - 1)**2
    pshareLag = pLag / ALag

equations:
  # definitions that should be tracked
  ~ A = aggr_a
  ~ B = aggr_b
  ~ C = aggr_c
  ~ wealth = A + B
  ~ p + Bg = wealth

  # firms
  ~ psi*(pi/piSS - 1)*pi/piSS = (1-theta) + theta*mc + psi*piPrime/Rn*(piPrime/piSS - 1)*piPrime/piSS*YPrime/Y # NKPC
  ~ divPrime + pPrime = p * RPrime
  ~ N = (Y / Z / KLag ** alpha) ** (1 / (1 - alpha))
  ~ mc = w * N / (1 - alpha) / Y
  ~ Q*(1 - 1/(2*phiss)*(dI - 1)**2 - 1/phiss*(dI - 1)*dI) + QPrime/(RPrime*phiss)*(dIPrime-1)*dIPrime**2 = 1
  ~ RPrime*Q - (1-delta)*QPrime = alpha * ZPrime * (NPrime / K) ** (1 - alpha) * mcPrime
  ~ I = K - (1 - delta) * KLag + kap_adj_cost
  ~ div = Y - w * N - I - p_adj_cost

  # government
  ~ Rn = (Rstar*((pi/piSS)**phi_pi)*((Y/YLag)**phi_y))**(1-rho)*RnLag**rho
  ~ Rb = R - omega
  ~ Ra = pshareLag * (div + p) / pLag + (1 - pshareLag) * R
  ~ R = RnLag/pi # ex-post real rate
  ~ tax = ((R-1) * Bg + G) / w / N

  # unions
  ~ piw = pi * w / wLag
  ~ psiw*(piw/piwSS - 1)*piw/piwSS = thetaw*vphi * N ** (1 + 1 / frisch) + (1-thetaw)*(1 - tax) * w * N * UCE + psi*beta*(piwPrime/piwSS - 1)*piwPrime/piwSS

  # exogenous process
  ~ Rstar = RstarSS*(RstarLag/RstarSS)**rho_Rstar # exogenous Rstar
  ~ G = GSS*(GLag/GSS)**rho_G
  ~ Z = ZSS*(ZLag/ZSS)**rho_Z
  ~ beta = betaSS*(betaLag/betaSS)**rho_beta*exp(e_beta)

steady_state:
    fixed_values:

      # parameters
      eis: 0.5
      frisch: 1
      psi: 96
      psiw: 96
      delta: 0.02
      Bg: 2.8
      chi0: 0.25
      chi2: 2
      phiss: 4
      omega: 0.005
      phi_pi: 1.5
      phi_y: 1.5
      rho: 0.8
      rho_beta: 0.8
      rho_Rstar: 0.8
      rho_G: 0.8
      rho_Z: 0.8
      thetaw: 11

      # steady state
      piw: 1.
      Y: 1.
      N: 1.
      Q: 1.
      K: 10.
      I: 0.2
      Rstar: 1.0125
      R: Rstar
      Rn: Rstar
      Ra: Rstar
      Rb: Ra - omega
      pi: 1.
      G: 0.2
      wealth: 14
      B: 1.04

      # 1. Solve for markup to hit total wealth
      p: wealth - Bg
      mc: 1 - (R - 1) * (p - K) / Y
      theta: 1/(1-mc)
      # 2. Solve for capital share to hit K
      alpha: (R - 1 + delta) * K / Y / mc
      # 3. Solve for TFP to hit Y
      Z: Y * K ** (-alpha) * N ** (alpha - 1)
      # 4. Solve for w such that piw = 0
      w: mc * (1 - alpha) * Y / N

    init_guesses:
      div: .14
      vphi: 2.
      beta: 0.98
      chi1: 5.
      tax: 0.3

      # get rough idea on initial value functions
      z_grid: income(skills_grid, tax, w, N)
      VaPrime: hh_init_Va(b_grid, a_grid, z_grid, eis)
      VbPrime: hh_init_Vb(b_grid, a_grid, z_grid, eis)
