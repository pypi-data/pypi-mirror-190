from dataclasses import dataclass
from contextlib import contextmanager
import bolt_expressions.sources as sources
import inspect
import re

from ./low_level import store_raw, get_raw
from ./comparison import ExpressionComparison


@dataclass(unsafe_hash=True, order=False)
class ScoreSource(sources.ScoreSource):
    def __eq__(self, other):
        if is_comparison_case():
            return ExpressionComparison(self, '==', other)

        elif not isinstance(other, ScoreSource):
            return NotImplemented

        return (self.scoreholder, self.objective) == (other.scoreholder, other.objective)

    def __ne__(self, other):
        if is_comparison_case():
            return ExpressionComparison(self, '!=', other)

        elif not isinstance(other, ScoreSource):
            return NotImplemented

        return (self.scoreholder, self.objective) != (other.scoreholder, other.objective)

    def __lt__(self, other):
        return ExpressionComparison(self, '<', other)

    def __gt__(self, other):
        return ExpressionComparison(self, '>', other)

    def __le__(self, other):
        return ExpressionComparison(self, '<=', other)

    def __ge__(self, other):
        return ExpressionComparison(self, '>=', other)

    @contextmanager
    def __branch__(self):
        if ExpressionComparison(self, '==', None):
            yield True

    def __not__(self):
        return ExpressionComparison(self, '!=', None)

    def exists(self):
        return ExpressionComparison(self, '==', None, _check_exists=True)

    @contextmanager
    def store(self, mode='result', type='int', scale=1):
        with store_raw(self, mode, type, scale):
            yield True

    def get(self, scale=None):
        get_raw(self, scale)

@dataclass(unsafe_hash=True, order=False)
class DataSource(sources.DataSource):
    def __eq__(self, other):
        if is_comparison_case():
            return ExpressionComparison(self, '==', other)

        elif not isinstance(other, DataSource):
            return NotImplemented

        return (self._type, self._target, self._path, self._scale, self._nbt_type, self._constructed) == (other._type, other._target, other._path, other._scale, other._nbt_type, other._constructed)

    def __ne__(self, other):
        if is_comparison_case():
            return ExpressionComparison(self, '!=', other)

        elif not isinstance(other, ScoreSource):
            return NotImplemented

        return (self.scoreholder, self.objective) != (other.scoreholder, other.objective)

    def __lt__(self, other):
        return ExpressionComparison(self, '<', other)

    def __gt__(self, other):
        return ExpressionComparison(self, '>', other)

    def __le__(self, other):
        return ExpressionComparison(self, '<=', other)

    def __ge__(self, other):
        return ExpressionComparison(self, '>=', other)

    @contextmanager
    def __branch__(self):
        if ExpressionComparison(self, '==', None):
            yield True

    def __not__(self):
        return ExpressionComparison(self, '!=', None)

    def exists(self):
        return ExpressionComparison(self, '==', None, _check_exists=True)

    @contextmanager
    def store(self, mode='result', type='int', scale=1):
        with store_raw(self, mode, type, scale):
            yield True

    def get(self, scale=None):
        get_raw(self, scale)

def is_comparison_case() -> bool:
    """ Determines whether a comparison dunder method call was intended to compare """

    frame = inspect.getouterframes(inspect.currentframe(), 2)[2]
    output = re.compile(r"sources.|optimizer.").search(frame.filename) == None

    # print([' ', '+'][output], frame.filename)
    return output

