{"version":3,"file":"bce613cc.js","mappings":";AA+EA;AAeA;;ACsDA;AACA;AACA;AACA;AACA;;AAGA","sources":["webpack://home-assistant-frontend/./src/components/ha-selector/ha-selector.ts","webpack://home-assistant-frontend/./src/panels/lovelace/editor/config-elements/hui-weather-forecast-card-editor.ts"],"sourcesContent":["import { html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { dynamicElement } from \"../../common/dom/dynamic-element-directive\";\nimport type { Selector } from \"../../data/selector\";\nimport type { HomeAssistant } from \"../../types\";\n\nconst LOAD_ELEMENTS = {\n  action: () => import(\"./ha-selector-action\"),\n  addon: () => import(\"./ha-selector-addon\"),\n  area: () => import(\"./ha-selector-area\"),\n  attribute: () => import(\"./ha-selector-attribute\"),\n  boolean: () => import(\"./ha-selector-boolean\"),\n  color_rgb: () => import(\"./ha-selector-color-rgb\"),\n  config_entry: () => import(\"./ha-selector-config-entry\"),\n  date: () => import(\"./ha-selector-date\"),\n  datetime: () => import(\"./ha-selector-datetime\"),\n  device: () => import(\"./ha-selector-device\"),\n  duration: () => import(\"./ha-selector-duration\"),\n  entity: () => import(\"./ha-selector-entity\"),\n  statistic: () => import(\"./ha-selector-statistic\"),\n  file: () => import(\"./ha-selector-file\"),\n  navigation: () => import(\"./ha-selector-navigation\"),\n  number: () => import(\"./ha-selector-number\"),\n  object: () => import(\"./ha-selector-object\"),\n  select: () => import(\"./ha-selector-select\"),\n  state: () => import(\"./ha-selector-state\"),\n  target: () => import(\"./ha-selector-target\"),\n  template: () => import(\"./ha-selector-template\"),\n  text: () => import(\"./ha-selector-text\"),\n  time: () => import(\"./ha-selector-time\"),\n  icon: () => import(\"./ha-selector-icon\"),\n  media: () => import(\"./ha-selector-media\"),\n  theme: () => import(\"./ha-selector-theme\"),\n  location: () => import(\"./ha-selector-location\"),\n  color_temp: () => import(\"./ha-selector-color-temp\"),\n  \"ui-action\": () => import(\"./ha-selector-ui-action\"),\n  \"ui-color\": () => import(\"./ha-selector-ui-color\"),\n};\n\n@customElement(\"ha-selector\")\nexport class HaSelector extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public name?: string;\n\n  @property() public selector!: Selector;\n\n  @property() public value?: any;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property() public localizeValue?: (key: string) => string;\n\n  @property() public placeholder?: any;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  @property() public context?: Record<string, any>;\n\n  public focus() {\n    this.shadowRoot?.getElementById(\"selector\")?.focus();\n  }\n\n  private get _type() {\n    return Object.keys(this.selector)[0];\n  }\n\n  protected willUpdate(changedProps: PropertyValues) {\n    if (changedProps.has(\"selector\") && this.selector) {\n      LOAD_ELEMENTS[this._type]?.();\n    }\n  }\n\n  protected render() {\n    return html`\n      ${dynamicElement(`ha-selector-${this._type}`, {\n        hass: this.hass,\n        name: this.name,\n        selector: this.selector,\n        value: this.value,\n        label: this.label,\n        placeholder: this.placeholder,\n        disabled: this.disabled,\n        required: this.required,\n        helper: this.helper,\n        context: this.context,\n        localizeValue: this.localizeValue,\n        id: \"selector\",\n      })}\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector\": HaSelector;\n  }\n}\n","import { memoize } from \"@fullcalendar/common\";\nimport { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { assert, assign, boolean, object, optional, string } from \"superstruct\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { entityId } from \"../../../../common/structs/is-entity-id\";\nimport type { LocalizeFunc } from \"../../../../common/translations/localize\";\nimport \"../../../../components/ha-form/ha-form\";\nimport type { SchemaUnion } from \"../../../../components/ha-form/types\";\nimport { UNAVAILABLE } from \"../../../../data/entity\";\nimport type { WeatherEntity } from \"../../../../data/weather\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport type { WeatherForecastCardConfig } from \"../../cards/types\";\nimport type { LovelaceCardEditor } from \"../../types\";\nimport { actionConfigStruct } from \"../structs/action-struct\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\n\nconst cardConfigStruct = assign(\n  baseLovelaceCardConfig,\n  object({\n    entity: optional(entityId()),\n    name: optional(string()),\n    theme: optional(string()),\n    show_current: optional(boolean()),\n    show_forecast: optional(boolean()),\n    secondary_info_attribute: optional(string()),\n    tap_action: optional(actionConfigStruct),\n    hold_action: optional(actionConfigStruct),\n    double_tap_action: optional(actionConfigStruct),\n  })\n);\n\n@customElement(\"hui-weather-forecast-card-editor\")\nexport class HuiWeatherForecastCardEditor\n  extends LitElement\n  implements LovelaceCardEditor\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: WeatherForecastCardConfig;\n\n  public setConfig(config: WeatherForecastCardConfig): void {\n    assert(config, cardConfigStruct);\n    this._config = config;\n\n    if (\n      /* cannot show forecast in case it is unavailable on the entity */\n      (config.show_forecast === true && this._has_forecast === false) ||\n      /* cannot hide both weather and forecast, need one of them */\n      (config.show_current === false && config.show_forecast === false)\n    ) {\n      /* reset to sane default, show weather, but hide forecast */\n      fireEvent(this, \"config-changed\", {\n        config: { ...config, show_current: true, show_forecast: false },\n      });\n    }\n  }\n\n  get _has_forecast(): boolean | undefined {\n    if (this.hass && this._config) {\n      const stateObj = this.hass.states[this._config.entity] as WeatherEntity;\n      if (stateObj && stateObj.state !== UNAVAILABLE) {\n        return !!stateObj.attributes.forecast?.length;\n      }\n    }\n    return undefined;\n  }\n\n  private _schema = memoize(\n    (entity: string, localize: LocalizeFunc, hasForecast?: boolean) =>\n      [\n        {\n          name: \"entity\",\n          required: true,\n          selector: { entity: { domain: \"weather\" } },\n        },\n        { name: \"name\", selector: { text: {} } },\n        {\n          name: \"\",\n          type: \"grid\",\n          schema: [\n            {\n              name: \"secondary_info_attribute\",\n              selector: { attribute: { entity_id: entity } },\n            },\n            { name: \"theme\", selector: { theme: {} } },\n          ],\n        },\n        ...(hasForecast\n          ? ([\n              {\n                name: \"forecast\",\n                selector: {\n                  select: {\n                    options: [\n                      {\n                        value: \"show_both\",\n                        label: localize(\n                          \"ui.panel.lovelace.editor.card.weather-forecast.show_both\"\n                        ),\n                      },\n                      {\n                        value: \"show_current\",\n                        label: localize(\n                          \"ui.panel.lovelace.editor.card.weather-forecast.show_only_current\"\n                        ),\n                      },\n                      {\n                        value: \"show_forecast\",\n                        label: localize(\n                          \"ui.panel.lovelace.editor.card.weather-forecast.show_only_forecast\"\n                        ),\n                      },\n                    ],\n                  },\n                },\n              },\n            ] as const)\n          : []),\n      ] as const\n  );\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    const schema = this._schema(\n      this._config.entity,\n      this.hass.localize,\n      this._has_forecast\n    );\n\n    const data: WeatherForecastCardConfig = {\n      show_current: true,\n      show_forecast: this._has_forecast,\n      ...this._config,\n    };\n\n    data.forecast =\n      data.show_current && data.show_forecast\n        ? \"show_both\"\n        : data.show_current\n        ? \"show_current\"\n        : \"show_forecast\";\n\n    return html`\n      <ha-form\n        .hass=${this.hass}\n        .data=${data}\n        .schema=${schema}\n        .computeLabel=${this._computeLabelCallback}\n        @value-changed=${this._valueChanged}\n      ></ha-form>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    const config = ev.detail.value;\n    if (config.forecast === \"show_both\") {\n      config.show_current = true;\n      config.show_forecast = true;\n    } else if (config.forecast === \"show_current\") {\n      config.show_current = true;\n      config.show_forecast = false;\n    } else {\n      config.show_current = false;\n      config.show_forecast = true;\n    }\n\n    delete config.forecast;\n    fireEvent(this, \"config-changed\", { config });\n  }\n\n  private _computeLabelCallback = (\n    schema: SchemaUnion<ReturnType<typeof this._schema>>\n  ) => {\n    switch (schema.name) {\n      case \"entity\":\n        return `${this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.generic.entity\"\n        )} (${this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.config.required\"\n        )})`;\n      case \"theme\":\n        return `${this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.generic.theme\"\n        )} (${this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.config.optional\"\n        )})`;\n      case \"forecast\":\n        return this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.weather-forecast.weather_to_show\"\n        );\n      default:\n        return this.hass!.localize(\n          `ui.panel.lovelace.editor.card.generic.${schema.name}`\n        );\n    }\n  };\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-weather-forecast-card-editor\": HuiWeatherForecastCardEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}