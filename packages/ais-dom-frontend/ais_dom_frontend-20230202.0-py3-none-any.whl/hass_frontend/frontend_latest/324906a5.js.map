{"version":3,"file":"324906a5.js","mappings":";AA+EA;AAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACmBA;AACA;AACA;AACA;AACA;;AAGA","sources":["webpack://home-assistant-frontend/./src/components/ha-selector/ha-selector.ts","webpack://home-assistant-frontend/./src/panels/lovelace/editor/config-elements/hui-sensor-card-editor.ts"],"sourcesContent":["import { html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { dynamicElement } from \"../../common/dom/dynamic-element-directive\";\nimport type { Selector } from \"../../data/selector\";\nimport type { HomeAssistant } from \"../../types\";\n\nconst LOAD_ELEMENTS = {\n  action: () => import(\"./ha-selector-action\"),\n  addon: () => import(\"./ha-selector-addon\"),\n  area: () => import(\"./ha-selector-area\"),\n  attribute: () => import(\"./ha-selector-attribute\"),\n  boolean: () => import(\"./ha-selector-boolean\"),\n  color_rgb: () => import(\"./ha-selector-color-rgb\"),\n  config_entry: () => import(\"./ha-selector-config-entry\"),\n  date: () => import(\"./ha-selector-date\"),\n  datetime: () => import(\"./ha-selector-datetime\"),\n  device: () => import(\"./ha-selector-device\"),\n  duration: () => import(\"./ha-selector-duration\"),\n  entity: () => import(\"./ha-selector-entity\"),\n  statistic: () => import(\"./ha-selector-statistic\"),\n  file: () => import(\"./ha-selector-file\"),\n  navigation: () => import(\"./ha-selector-navigation\"),\n  number: () => import(\"./ha-selector-number\"),\n  object: () => import(\"./ha-selector-object\"),\n  select: () => import(\"./ha-selector-select\"),\n  state: () => import(\"./ha-selector-state\"),\n  target: () => import(\"./ha-selector-target\"),\n  template: () => import(\"./ha-selector-template\"),\n  text: () => import(\"./ha-selector-text\"),\n  time: () => import(\"./ha-selector-time\"),\n  icon: () => import(\"./ha-selector-icon\"),\n  media: () => import(\"./ha-selector-media\"),\n  theme: () => import(\"./ha-selector-theme\"),\n  location: () => import(\"./ha-selector-location\"),\n  color_temp: () => import(\"./ha-selector-color-temp\"),\n  \"ui-action\": () => import(\"./ha-selector-ui-action\"),\n  \"ui-color\": () => import(\"./ha-selector-ui-color\"),\n};\n\n@customElement(\"ha-selector\")\nexport class HaSelector extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public name?: string;\n\n  @property() public selector!: Selector;\n\n  @property() public value?: any;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property() public localizeValue?: (key: string) => string;\n\n  @property() public placeholder?: any;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  @property() public context?: Record<string, any>;\n\n  public focus() {\n    this.shadowRoot?.getElementById(\"selector\")?.focus();\n  }\n\n  private get _type() {\n    return Object.keys(this.selector)[0];\n  }\n\n  protected willUpdate(changedProps: PropertyValues) {\n    if (changedProps.has(\"selector\") && this.selector) {\n      LOAD_ELEMENTS[this._type]?.();\n    }\n  }\n\n  protected render() {\n    return html`\n      ${dynamicElement(`ha-selector-${this._type}`, {\n        hass: this.hass,\n        name: this.name,\n        selector: this.selector,\n        value: this.value,\n        label: this.label,\n        placeholder: this.placeholder,\n        disabled: this.disabled,\n        required: this.required,\n        helper: this.helper,\n        context: this.context,\n        localizeValue: this.localizeValue,\n        id: \"selector\",\n      })}\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector\": HaSelector;\n  }\n}\n","import { CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport {\n  assert,\n  assign,\n  literal,\n  number,\n  object,\n  optional,\n  string,\n  union,\n} from \"superstruct\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { entityId } from \"../../../../common/structs/is-entity-id\";\nimport \"../../../../components/ha-form/ha-form\";\nimport type { SchemaUnion } from \"../../../../components/ha-form/types\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport type { SensorCardConfig } from \"../../cards/types\";\nimport type { LovelaceCardEditor } from \"../../types\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\nimport { configElementStyle } from \"./config-elements-style\";\n\nconst cardConfigStruct = assign(\n  baseLovelaceCardConfig,\n  object({\n    entity: optional(entityId()),\n    name: optional(string()),\n    icon: optional(string()),\n    graph: optional(union([literal(\"line\"), literal(\"none\")])),\n    unit: optional(string()),\n    detail: optional(number()),\n    theme: optional(string()),\n    hours_to_show: optional(number()),\n  })\n);\n\nconst SCHEMA = [\n  {\n    name: \"entity\",\n    selector: {\n      entity: { domain: [\"counter\", \"input_number\", \"number\", \"sensor\"] },\n    },\n  },\n  { name: \"name\", selector: { text: {} } },\n  {\n    type: \"grid\",\n    name: \"\",\n    schema: [\n      {\n        name: \"icon\",\n        selector: {\n          icon: {},\n        },\n        context: {\n          icon_entity: \"entity\",\n        },\n      },\n      {\n        name: \"graph\",\n        selector: {\n          select: {\n            options: [\n              {\n                value: \"none\",\n                label: \"None\",\n              },\n              {\n                value: \"line\",\n                label: \"Line\",\n              },\n            ],\n          },\n        },\n      },\n      { name: \"unit\", selector: { text: {} } },\n      { name: \"detail\", selector: { boolean: {} } },\n      { name: \"theme\", selector: { theme: {} } },\n      {\n        name: \"hours_to_show\",\n        selector: { number: { min: 1, mode: \"box\" } },\n      },\n    ],\n  },\n] as const;\n\n@customElement(\"hui-sensor-card-editor\")\nexport class HuiSensorCardEditor\n  extends LitElement\n  implements LovelaceCardEditor\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: SensorCardConfig;\n\n  public setConfig(config: SensorCardConfig): void {\n    assert(config, cardConfigStruct);\n    this._config = config;\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    const data = {\n      hours_to_show: 24,\n      graph: \"none\",\n      ...this._config,\n      detail: this._config!.detail === 2,\n    };\n\n    return html`\n      <ha-form\n        .hass=${this.hass}\n        .data=${data}\n        .schema=${SCHEMA}\n        .computeLabel=${this._computeLabelCallback}\n        @value-changed=${this._valueChanged}\n      ></ha-form>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    const config = ev.detail.value;\n    config.detail = config.detail ? 2 : 1;\n    fireEvent(this, \"config-changed\", { config });\n  }\n\n  private _computeLabelCallback = (schema: SchemaUnion<typeof SCHEMA>) => {\n    switch (schema.name) {\n      case \"theme\":\n        return `${this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.generic.theme\"\n        )} (${this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.config.optional\"\n        )})`;\n      case \"detail\":\n        return this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.sensor.show_more_detail\"\n        );\n      case \"graph\":\n        return this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.sensor.graph_type\"\n        );\n      default:\n        return this.hass!.localize(\n          `ui.panel.lovelace.editor.card.generic.${schema.name}`\n        );\n    }\n  };\n\n  static get styles(): CSSResultGroup {\n    return configElementStyle;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-sensor-card-editor\": HuiSensorCardEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}