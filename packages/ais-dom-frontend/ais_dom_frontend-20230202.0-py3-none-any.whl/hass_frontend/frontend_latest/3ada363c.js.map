{"version":3,"file":"3ada363c.js","mappings":";AA+EA;AAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxBA;AAKA;AACA;AACA;;;AAGA;AAKA;AACA;AACA;;;AAGA;AACA;AACA;AAKA;AACA;;;AAGA;AAKA;AACA;AACA;AACA;AACA;;;AAGA;AAKA;AACA;AACA;AACA;AACA;;;AAIA;;;;;AAoCA","sources":["webpack://home-assistant-frontend/./src/components/ha-selector/ha-selector.ts","webpack://home-assistant-frontend/./src/panels/lovelace/editor/config-elements/hui-picture-card-editor.ts"],"sourcesContent":["import { html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { dynamicElement } from \"../../common/dom/dynamic-element-directive\";\nimport type { Selector } from \"../../data/selector\";\nimport type { HomeAssistant } from \"../../types\";\n\nconst LOAD_ELEMENTS = {\n  action: () => import(\"./ha-selector-action\"),\n  addon: () => import(\"./ha-selector-addon\"),\n  area: () => import(\"./ha-selector-area\"),\n  attribute: () => import(\"./ha-selector-attribute\"),\n  boolean: () => import(\"./ha-selector-boolean\"),\n  color_rgb: () => import(\"./ha-selector-color-rgb\"),\n  config_entry: () => import(\"./ha-selector-config-entry\"),\n  date: () => import(\"./ha-selector-date\"),\n  datetime: () => import(\"./ha-selector-datetime\"),\n  device: () => import(\"./ha-selector-device\"),\n  duration: () => import(\"./ha-selector-duration\"),\n  entity: () => import(\"./ha-selector-entity\"),\n  statistic: () => import(\"./ha-selector-statistic\"),\n  file: () => import(\"./ha-selector-file\"),\n  navigation: () => import(\"./ha-selector-navigation\"),\n  number: () => import(\"./ha-selector-number\"),\n  object: () => import(\"./ha-selector-object\"),\n  select: () => import(\"./ha-selector-select\"),\n  state: () => import(\"./ha-selector-state\"),\n  target: () => import(\"./ha-selector-target\"),\n  template: () => import(\"./ha-selector-template\"),\n  text: () => import(\"./ha-selector-text\"),\n  time: () => import(\"./ha-selector-time\"),\n  icon: () => import(\"./ha-selector-icon\"),\n  media: () => import(\"./ha-selector-media\"),\n  theme: () => import(\"./ha-selector-theme\"),\n  location: () => import(\"./ha-selector-location\"),\n  color_temp: () => import(\"./ha-selector-color-temp\"),\n  \"ui-action\": () => import(\"./ha-selector-ui-action\"),\n  \"ui-color\": () => import(\"./ha-selector-ui-color\"),\n};\n\n@customElement(\"ha-selector\")\nexport class HaSelector extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public name?: string;\n\n  @property() public selector!: Selector;\n\n  @property() public value?: any;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property() public localizeValue?: (key: string) => string;\n\n  @property() public placeholder?: any;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  @property() public context?: Record<string, any>;\n\n  public focus() {\n    this.shadowRoot?.getElementById(\"selector\")?.focus();\n  }\n\n  private get _type() {\n    return Object.keys(this.selector)[0];\n  }\n\n  protected willUpdate(changedProps: PropertyValues) {\n    if (changedProps.has(\"selector\") && this.selector) {\n      LOAD_ELEMENTS[this._type]?.();\n    }\n  }\n\n  protected render() {\n    return html`\n      ${dynamicElement(`ha-selector-${this._type}`, {\n        hass: this.hass,\n        name: this.name,\n        selector: this.selector,\n        value: this.value,\n        label: this.label,\n        placeholder: this.placeholder,\n        disabled: this.disabled,\n        required: this.required,\n        helper: this.helper,\n        context: this.context,\n        localizeValue: this.localizeValue,\n        id: \"selector\",\n      })}\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector\": HaSelector;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { assert, assign, object, optional, string } from \"superstruct\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { ActionConfig } from \"../../../../data/lovelace\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { PictureCardConfig } from \"../../cards/types\";\nimport \"../../components/hui-action-editor\";\nimport \"../../../../components/ha-theme-picker\";\nimport { LovelaceCardEditor } from \"../../types\";\nimport { actionConfigStruct } from \"../structs/action-struct\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\nimport { EditorTarget } from \"../types\";\nimport { configElementStyle } from \"./config-elements-style\";\n\nconst cardConfigStruct = assign(\n  baseLovelaceCardConfig,\n  object({\n    image: optional(string()),\n    tap_action: optional(actionConfigStruct),\n    hold_action: optional(actionConfigStruct),\n    theme: optional(string()),\n    alt_text: optional(string()),\n  })\n);\n\n@customElement(\"hui-picture-card-editor\")\nexport class HuiPictureCardEditor\n  extends LitElement\n  implements LovelaceCardEditor\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: PictureCardConfig;\n\n  public setConfig(config: PictureCardConfig): void {\n    assert(config, cardConfigStruct);\n    this._config = config;\n  }\n\n  get _image(): string {\n    return this._config!.image || \"\";\n  }\n\n  get _tap_action(): ActionConfig {\n    return this._config!.tap_action || { action: \"none\" };\n  }\n\n  get _hold_action(): ActionConfig {\n    return this._config!.hold_action || { action: \"none\" };\n  }\n\n  get _theme(): string {\n    return this._config!.theme || \"\";\n  }\n\n  get _alt_text(): string {\n    return this._config!.alt_text || \"\";\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    const actions = [\"navigate\", \"url\", \"call-service\", \"none\"];\n\n    return html`\n      <div class=\"card-config\">\n        <ha-textfield\n          .label=\"${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.generic.image\"\n          )} (${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.config.required\"\n          )})\"\n          .value=${this._image}\n          .configValue=${\"image\"}\n          @input=${this._valueChanged}\n        ></ha-textfield>\n        <ha-textfield\n          .label=\"${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.generic.alt_text\"\n          )} (${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.config.optional\"\n          )})\"\n          .value=${this._alt_text}\n          .configValue=${\"alt_text\"}\n          @input=${this._valueChanged}\n        ></ha-textfield>\n        <ha-theme-picker\n          .hass=${this.hass}\n          .value=${this._theme}\n          .label=${`${this.hass!.localize(\n            \"ui.panel.lovelace.editor.card.generic.theme\"\n          )} (${this.hass!.localize(\n            \"ui.panel.lovelace.editor.card.config.optional\"\n          )})`}\n          .configValue=${\"theme\"}\n          @value-changed=${this._valueChanged}\n        ></ha-theme-picker>\n        <hui-action-editor\n          .label=\"${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.generic.tap_action\"\n          )} (${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.config.optional\"\n          )})\"\n          .hass=${this.hass}\n          .config=${this._tap_action}\n          .actions=${actions}\n          .configValue=${\"tap_action\"}\n          @value-changed=${this._valueChanged}\n        ></hui-action-editor>\n        <hui-action-editor\n          .label=\"${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.generic.hold_action\"\n          )} (${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.config.optional\"\n          )})\"\n          .hass=${this.hass}\n          .config=${this._hold_action}\n          .actions=${actions}\n          .configValue=${\"hold_action\"}\n          @value-changed=${this._valueChanged}\n        ></hui-action-editor>\n      </div>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    if (!this._config || !this.hass) {\n      return;\n    }\n    const target = ev.target! as EditorTarget;\n    const value = ev.detail?.value ?? target.value;\n\n    if (this[`_${target.configValue}`] === value) {\n      return;\n    }\n    if (target.configValue) {\n      if (value !== false && !value) {\n        this._config = { ...this._config };\n        delete this._config[target.configValue!];\n      } else {\n        this._config = {\n          ...this._config,\n          [target.configValue!]: value,\n        };\n      }\n    }\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      configElementStyle,\n      css`\n        ha-textfield {\n          display: block;\n          margin-bottom: 8px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-picture-card-editor\": HuiPictureCardEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}