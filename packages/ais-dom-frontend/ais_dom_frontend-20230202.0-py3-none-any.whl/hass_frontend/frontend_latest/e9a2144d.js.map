{"version":3,"file":"e9a2144d.js","mappings":";;AA8BA;;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;;AAGA;;AAYA;AACA;AACA;;AAIA;AAOA;AACA;AACA;;AAyCA;;AAPA;AACA;;;AAMA;;;;;AA2BA","sources":["webpack://home-assistant-frontend/./src/panels/lovelace/editor/card-editor/hui-entity-picker-table.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport type { HASSDomEvent } from \"../../../../common/dom/fire_event\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { computeRTLDirection } from \"../../../../common/util/compute_rtl\";\nimport \"../../../../components/data-table/ha-data-table\";\nimport type {\n  DataTableColumnContainer,\n  DataTableRowData,\n  SelectionChangedEvent,\n} from \"../../../../components/data-table/ha-data-table\";\nimport \"../../../../components/entity/state-badge\";\nimport \"../../../../components/ha-relative-time\";\nimport type { HomeAssistant } from \"../../../../types\";\n\n@customElement(\"hui-entity-picker-table\")\nexport class HuiEntityPickerTable extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public narrow?: boolean;\n\n  @property({ type: Boolean, attribute: \"no-label-float\" })\n  public noLabelFloat? = false;\n\n  @property({ type: Array }) public entities!: DataTableRowData[];\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-data-table\n        .hass=${this.hass}\n        selectable\n        .id=${\"entity_id\"}\n        .columns=${this._columns(this.narrow!)}\n        .data=${this.entities}\n        .dir=${computeRTLDirection(this.hass)}\n        .searchLabel=${this.hass.localize(\n          \"ui.panel.lovelace.unused_entities.search\"\n        )}\n        .noLabelFloat=${this.noLabelFloat}\n        .noDataText=${this.hass.localize(\n          \"ui.panel.lovelace.unused_entities.no_data\"\n        )}\n        @selection-changed=${this._handleSelectionChanged}\n      ></ha-data-table>\n    `;\n  }\n\n  private _columns = memoizeOne((narrow: boolean) => {\n    const columns: DataTableColumnContainer = {\n      icon: {\n        title: \"\",\n        label: this.hass!.localize(\n          \"ui.panel.lovelace.unused_entities.state_icon\"\n        ),\n        type: \"icon\",\n        template: (_icon, entity: any) => html`\n          <state-badge\n            @click=${this._handleEntityClicked}\n            .hass=${this.hass!}\n            .stateObj=${entity.stateObj}\n          ></state-badge>\n        `,\n      },\n      name: {\n        title: this.hass!.localize(\"ui.panel.lovelace.unused_entities.entity\"),\n        sortable: true,\n        filterable: true,\n        grows: true,\n        direction: \"asc\",\n        template: (name, entity: any) => html`\n          <div @click=${this._handleEntityClicked} style=\"cursor: pointer;\">\n            ${name}\n            ${narrow\n              ? html` <div class=\"secondary\">${entity.entity_id}</div> `\n              : \"\"}\n          </div>\n        `,\n      },\n    };\n\n    columns.entity_id = {\n      title: this.hass!.localize(\"ui.panel.lovelace.unused_entities.entity_id\"),\n      sortable: true,\n      filterable: true,\n      width: \"30%\",\n      hidden: narrow,\n    };\n\n    columns.domain = {\n      title: this.hass!.localize(\"ui.panel.lovelace.unused_entities.domain\"),\n      sortable: true,\n      filterable: true,\n      width: \"15%\",\n      hidden: narrow,\n    };\n\n    columns.last_changed = {\n      title: this.hass!.localize(\n        \"ui.panel.lovelace.unused_entities.last_changed\"\n      ),\n      type: \"numeric\",\n      sortable: true,\n      width: \"15%\",\n      hidden: narrow,\n      template: (lastChanged: string) => html`\n        <ha-relative-time\n          .hass=${this.hass!}\n          .datetime=${lastChanged}\n          capitalize\n        ></ha-relative-time>\n      `,\n    };\n\n    return columns;\n  });\n\n  private _handleSelectionChanged(\n    ev: HASSDomEvent<SelectionChangedEvent>\n  ): void {\n    const selectedEntities = ev.detail.value;\n\n    fireEvent(this, \"selected-changed\", { selectedEntities });\n  }\n\n  private _handleEntityClicked(ev: Event) {\n    const entityId = (\n      (ev.target as HTMLElement).closest(\".mdc-data-table__row\") as any\n    ).rowId;\n    fireEvent(this, \"hass-more-info\", {\n      entityId,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-data-table {\n        --data-table-border-width: 0;\n        height: 100%;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-entity-picker-table\": HuiEntityPickerTable;\n  }\n}\n"],"names":[],"sourceRoot":""}