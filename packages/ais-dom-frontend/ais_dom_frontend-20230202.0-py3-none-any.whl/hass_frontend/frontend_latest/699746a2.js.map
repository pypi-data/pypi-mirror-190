{"version":3,"file":"699746a2.js","mappings":";;AA4DA;;AAGA;;;AAKA;AAGA;AAEA;AAGA;;;;;AAOA;AACA;AACA;AAWA;;;;AAIA;;;AAMA;;AAEA;;;;;AAzDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+IA","sources":["webpack://home-assistant-frontend/./src/panels/lovelace/editor/unused-entities/hui-unused-entities.ts"],"sourcesContent":["import { mdiPlus } from \"@mdi/js\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { computeDomain } from \"../../../../common/entity/compute_domain\";\nimport { computeStateName } from \"../../../../common/entity/compute_state_name\";\nimport { computeRTL } from \"../../../../common/util/compute_rtl\";\nimport type { DataTableRowData } from \"../../../../components/data-table/ha-data-table\";\nimport \"../../../../components/ha-fab\";\nimport \"../../../../components/ha-svg-icon\";\nimport type { LovelaceConfig } from \"../../../../data/lovelace\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport { computeUnusedEntities } from \"../../common/compute-unused-entities\";\nimport type { Lovelace } from \"../../types\";\nimport \"../card-editor/hui-entity-picker-table\";\nimport { showSuggestCardDialog } from \"../card-editor/show-suggest-card-dialog\";\nimport { showSelectViewDialog } from \"../select-view/show-select-view-dialog\";\n\n@customElement(\"hui-unused-entities\")\nexport class HuiUnusedEntities extends LitElement {\n  @property({ attribute: false }) public lovelace!: Lovelace;\n\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public narrow?: boolean;\n\n  @state() private _unusedEntities: string[] = [];\n\n  @state() private _selectedEntities: string[] = [];\n\n  private get _config(): LovelaceConfig {\n    return this.lovelace.config;\n  }\n\n  protected updated(changedProperties: PropertyValues): void {\n    super.updated(changedProperties);\n\n    if (changedProperties.has(\"lovelace\")) {\n      this._getUnusedEntities();\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this.lovelace) {\n      return html``;\n    }\n\n    if (this.lovelace.mode === \"storage\" && this.lovelace.editMode === false) {\n      return html``;\n    }\n\n    return html`\n      <div class=\"container\">\n        ${!this.narrow\n          ? html`\n              <ha-card\n                header=${this.hass.localize(\n                  \"ui.panel.lovelace.unused_entities.title\"\n                )}\n              >\n                <div class=\"card-content\">\n                  ${this.hass.localize(\n                    \"ui.panel.lovelace.unused_entities.available_entities\"\n                  )}\n                  ${this.lovelace.mode === \"storage\"\n                    ? html`\n                        <br />${this.hass.localize(\n                          \"ui.panel.lovelace.unused_entities.select_to_add\"\n                        )}\n                      `\n                    : \"\"}\n                </div>\n              </ha-card>\n            `\n          : \"\"}\n        <hui-entity-picker-table\n          .hass=${this.hass}\n          .narrow=${this.narrow}\n          .entities=${this._unusedEntities.map((entity) => {\n            const stateObj = this.hass!.states[entity];\n            return {\n              icon: \"\",\n              entity_id: entity,\n              stateObj,\n              name: stateObj ? computeStateName(stateObj) : \"Unavailable\",\n              domain: computeDomain(entity),\n              last_changed: stateObj?.last_changed,\n            };\n          }) as DataTableRowData[]}\n          @selected-changed=${this._handleSelectedChanged}\n        ></hui-entity-picker-table>\n      </div>\n      <div\n        class=\"fab ${classMap({\n          rtl: computeRTL(this.hass),\n          selected: this._selectedEntities.length,\n        })}\"\n      >\n        <ha-fab\n          .label=${this.hass.localize(\"ui.panel.lovelace.editor.edit_card.add\")}\n          extended\n          @click=${this._addToLovelaceView}\n        >\n          <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\n        </ha-fab>\n      </div>\n    `;\n  }\n\n  private _getUnusedEntities(): void {\n    if (!this.hass || !this.lovelace) {\n      return;\n    }\n    this._selectedEntities = [];\n    const unusedEntities = computeUnusedEntities(this.hass, this._config!);\n    this._unusedEntities = [...unusedEntities].sort();\n  }\n\n  private _handleSelectedChanged(ev: CustomEvent): void {\n    this._selectedEntities = ev.detail.selectedEntities;\n  }\n\n  private _addToLovelaceView(): void {\n    if (this.lovelace.config.views.length === 1) {\n      showSuggestCardDialog(this, {\n        lovelaceConfig: this.lovelace.config!,\n        saveConfig: this.lovelace.saveConfig,\n        path: [0],\n        entities: this._selectedEntities,\n      });\n      return;\n    }\n    showSelectViewDialog(this, {\n      lovelaceConfig: this.lovelace.config,\n      allowDashboardChange: false,\n      viewSelectedCallback: (_urlPath, _selectedDashConfig, viewIndex) => {\n        showSuggestCardDialog(this, {\n          lovelaceConfig: this.lovelace.config!,\n          saveConfig: this.lovelace.saveConfig,\n          path: [viewIndex],\n          entities: this._selectedEntities,\n        });\n      },\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        background: var(--lovelace-background);\n        overflow: hidden;\n      }\n      .container {\n        display: flex;\n        flex-direction: column;\n        height: 100%;\n      }\n      ha-card {\n        --ha-card-box-shadow: none;\n        --ha-card-border-radius: 0;\n      }\n      hui-entity-picker-table {\n        flex-grow: 1;\n      }\n      .fab {\n        position: sticky;\n        float: right;\n        right: calc(16px + env(safe-area-inset-right));\n        bottom: calc(16px + env(safe-area-inset-bottom));\n        z-index: 1;\n      }\n      .fab.rtl {\n        right: initial;\n        left: 0;\n        bottom: 0;\n        padding-right: 16px;\n        padding-left: calc(16px + env(safe-area-inset-left));\n      }\n      ha-fab {\n        position: relative;\n        bottom: calc(-80px - env(safe-area-inset-bottom));\n        transition: bottom 0.3s;\n      }\n      .fab.selected ha-fab {\n        bottom: 0;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-unused-entities\": HuiUnusedEntities;\n  }\n}\n"],"names":[],"sourceRoot":""}