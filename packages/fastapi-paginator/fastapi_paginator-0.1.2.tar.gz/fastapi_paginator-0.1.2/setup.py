# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['fastapi_paginator']

package_data = \
{'': ['*']}

install_requires = \
['databases', 'fastapi']

setup_kwargs = {
    'name': 'fastapi-paginator',
    'version': '0.1.2',
    'description': 'Paginator for FastAPI',
    'long_description': '![Tests](https://github.com/JGoutin/fastapi_paginator/workflows/tests/badge.svg)\n[![codecov](https://codecov.io/gh/JGoutin/fastapi_paginator/branch/main/graph/badge.svg?token=QR5nYeX11F)](https://codecov.io/gh/JGoutin/fastapi_paginator)\n[![PyPI](https://img.shields.io/pypi/v/fastapi_paginator.svg)](https://pypi.org/project/fastapi_paginator)\n\n# FastAPI Paginator\n\nEasy to use paginator for [FastAPI](https://fastapi.tiangolo.com/)\n\nCurrently, supports only [encode/databases](https://github.com/encode/databases) as \ndatabase library and tested with SQlite and PostgreSQL.\n\n## Features\n\n* Simple FastAPI integration.\n* Navigation with page numbers (With total page count returned on first page).\n* Navigation from a specific row (since).\n* Ordering result (On multiple columns).\n* Filtering result using various SQL functions.\n\n## Installation\n\nFastAPI Paginator is available on PyPI, so it can be installed like any other Python \npackage.\n\nExample with Pip:\n```bash\npip install fastapi_paginator\n```\n\n## Usage\n\n### Routes creations in FastAPI\n\nTo use it, you only need to create a `fastapi_paginator.Paginator` instance linked to\nthe database and routes\nusing `fastapi_paginator.PageParameters` and `fastapi_paginator.Page`.\n\n```python\nimport databases\nimport fastapi\nimport pydantic\nimport sqlalchemy\nimport fastapi_paginator\n\n# Already existing database, FastAPI application, "item" table, and "item" model\ndatabase = databases.Database(f"sqlite:///local.db}")\napp = fastapi.FastAPI()\n\ntable = sqlalchemy.Table(\n    "table",\n    sqlalchemy.MetaData(),\n    Column("id", sqlalchemy.Integer, primary_key=True),\n    Column("name", sqlalchemy.String, nullable=False),\n)\n\nclass Item(pydantic.BaseModel):\n    """Item in database."""\n\n    class Config:\n        """Config."""\n\n        orm_mode = True  # Required\n\n    id: int\n    name: str\n\n\n# Create a paginator for the database (Required only once per database)\npaginator = fastapi_paginator.Paginator(database)\n\n# Create a paginated route\n@app.get("/list")\nasync def list_data(\n    page_parameters: fastapi_paginator.PageParameters = Depends(),\n) -> fastapi_paginator.Page[Item]:\n    """List data with pagination."""\n    return await paginator(table.select(), Item, page_parameters)\n```\n\n### Paginated routes usage from clients\n\n\n#### Request\nPaginator parameters are passed as query parameters, for instance:\n\n```http request\nGET /list?order_by=id&page=2\n```\n\n##### Query parameters\n\n###### page\nThe page to return.\n\nWhen page is not specified or equal to `1`, the request returns `total_page` that is\nthe maximum number of pages.\n\n*Cannot be used with `since`.*\n\n###### since\n\nThe item from where starting to return the result.\n\nWhen navigating between successive pages, the `next_since` returned value should be used\nas `since` for the subsequent requests.\n\n*Cannot be used with `page`*.\n\n*Cannot be used with `order_by` if not ordering on the field used by `since`*.\n\n###### order_by\nSort the resulting items by the specified field name.\n\nOrder is descending if `-` is added before the field name, else order is ascending.\n\nThis query parameter can be specified multiple time to sort by multiple columns.\n\n**Example:**\n"Ordering descending by the `created_at` column: `order_by=-created_at`\n\n###### filter_by\n\nFilter the resulting items.\n\nThe query must be in the form `field_name operator argument`, with:\n  * `field_name`:  the name on the field on where apply the filter.\n  * `operator`:  one operator from the list bellow.\n  * `argument`: is the operator argument, it can be one or more value separated by `,`\n    (Depending on the operator), valid values must be a primitive JSON type like \n    numbers, double-quoted strings, `true`, `false` and `null`.\n\nThis query parameter can be specified multiple time to filter on more criteria\n(Using AND logical conjunction).\n\nAvailable operators:\n  * `=`: Equal to a single value (Also supports `null`, `true` and `false`)\n  * `<`: Lower than a single value.\n  * `<=`: Lower or equal than a single value.\n  * `>`: Greater than a single value.\n  * `>=`: Greater or equal than a single value.\n  * `between`: Between a pair of values (`value_1` <= `field_value` <= `value_2`).\n  * `in`: Present in a list of one or more values.\n  * `like`: Like a single value (`%` can be used as wildcard for zero to multiple\n     characters, `_` as wildcard for a single character, `/` can be used as escape\n     character for `%` and `_`).\n  * `ilike`: Same as `like`, but case insensitive.\n  * `startswith`: String representation starts with a single value.\n  * `endswith`: String representation ends with a single value.\n  * `contains`: String representation contains a single value.\n\nAny operator can be negated by adding `!` in front of it.\n\n*Warning*: Depending on your HTTP client, the query parameter value may require to be\nURL encoded.\n\n**Example:**\nReturning only data with a `name` field that does not start with\n`Product`: `filter_by=name%20%21like%20%22Product%25%22`\n(With URL encoded value of: `name !like "Product%"`\')\n\n##### Response\n\nThe response is a JSON dictionnary with the following fields:\n* `items`: The list returned items.\n* `next_since`: Next value to use with `since` query parameter.\n* `next_page`: Next value to use with `page` query parameter.\n* `total_pages`: Total pages, only computed and returned when on page 1\n\n### Using alternates JSON libraries\n\nIt is possible to override the `json.loads` function used in all paginator as follows \n(Example with [orjson](https://github.com/ijl/orjson)):\n\n```python\nimport orjson\nimport fastapi_paginator\n\n\nfastapi_paginator.Paginator.json_loads = orjson.loads\n```\n',
    'author': 'JGoutin',
    'author_email': 'None',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://github.com/JGoutin/fastapi_paginator',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.10,<4.0',
}


setup(**setup_kwargs)
