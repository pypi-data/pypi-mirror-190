# coding: utf-8


"""
IGNORE:
    Nutanix Prism Versioned APIs

    Task Management, Category Associations, Prism Central DR, Alerts, Alert policies, Events and Audits  # noqa: E501

    OpenAPI spec version: 4.0.2-alpha-1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
import ntnx_prism_py_client.Ntnx
from ntnx_prism_py_client.Ntnx.OneOfprism.v4.common.MetricDetailmetric_value import MetricDetailmetric_value  # noqa: F401,E501
from ntnx_prism_py_client.Ntnx.OneOfprism.v4.common.MetricDetailthreshold_value import MetricDetailthreshold_value  # noqa: F401,E501
from ntnx_prism_py_client.Ntnx.prism.v4.common.ComparisonOperator import ComparisonOperator  # noqa: F401,E501
from ntnx_prism_py_client.Ntnx.prism.v4.common.ConditionType import ConditionType  # noqa: F401,E501
from ntnx_prism_py_client.Ntnx.prism.v4.common.DataType import DataType  # noqa: F401,E501

"""
IGNORE:
NOTE: This class is auto generated by the swagger code generator program.

Do not edit the class manually.
IGNORE
"""


class MetricDetail(object):
    """MetricDetail - a model defined in Swagger"""
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """ # noqa: E501
    swagger_types = {
        'metric_name': 'str',
        'metric_display_name': 'str',
        'unit': 'str',
        'trigger_wait_time': 'int',
        'trigger_timestamp': 'int',
        'comparison_operator': 'prism.v4.common.ComparisonOperator',
        'condition_type': 'prism.v4.common.ConditionType',
        'metric_category': 'str',
        'data_type': 'prism.v4.common.DataType',
        'threshold_value': 'OneOfprism.v4.common.MetricDetailthreshold_value',
        'metric_value': 'OneOfprism.v4.common.MetricDetailmetric_value',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'metric_name': 'metricName',
        'metric_display_name': 'metricDisplayName',
        'unit': 'unit',
        'trigger_wait_time': 'triggerWaitTime',
        'trigger_timestamp': 'triggerTimestamp',
        'comparison_operator': 'comparisonOperator',
        'condition_type': 'conditionType',
        'metric_category': 'metricCategory',
        'data_type': 'dataType',
        'threshold_value': 'thresholdValue',
        'metric_value': 'metricValue',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, metric_name=None, metric_display_name=None, unit=None, trigger_wait_time=None, trigger_timestamp=None, comparison_operator=None, condition_type=None, metric_category=None, data_type=None, threshold_value=None, metric_value=None, *args, **kwargs):  # noqa: E501
        """MetricDetail - a model defined in Swagger
            
        """
        self.__metric_name = None
        self.__metric_display_name = None
        self.__unit = None
        self.__trigger_wait_time = None
        self.__trigger_timestamp = None
        self.__comparison_operator = None
        self.__condition_type = None
        self.__metric_category = None
        self.__data_type = None
        self.__threshold_value = None
        self.__metric_value = None
        self.discriminator = None
        if metric_name is not None:
            self.__metric_name = metric_name
        if metric_display_name is not None:
            self.__metric_display_name = metric_display_name
        if unit is not None:
            self.__unit = unit
        if trigger_wait_time is not None:
            self.__trigger_wait_time = trigger_wait_time
        if trigger_timestamp is not None:
            self.__trigger_timestamp = trigger_timestamp
        if comparison_operator is not None:
            self.__comparison_operator = comparison_operator
        if condition_type is not None:
            self.__condition_type = condition_type
        if metric_category is not None:
            self.__metric_category = metric_category
        if data_type is not None:
            self.__data_type = data_type
        if threshold_value is not None:
            self.__threshold_value = threshold_value
        if metric_value is not None:
            self.__metric_value = metric_value
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'prism.v4.common.MetricDetail'

    def _initialize_fq_object_type(self):
        return 'prism.v4.r0.a1.common.MetricDetail'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fqObjectType": self._initialize_fq_object_type()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def metric_name(self):
        """`{ str }`
            \nThe metric key.
        """ # noqa: E501
        return self.__metric_name

    @metric_name.setter
    def metric_name(self, metric_name):

        self.__metric_name = metric_name

    @property
    def metric_display_name(self):
        """`{ str }`
            \nEnglish readable name of the metric.
        """ # noqa: E501
        return self.__metric_display_name

    @metric_display_name.setter
    def metric_display_name(self, metric_display_name):

        self.__metric_display_name = metric_display_name

    @property
    def unit(self):
        """`{ str }`
            \nUnit of the metric. For example, percentage, ms, usecs and so on.
        """ # noqa: E501
        return self.__unit

    @unit.setter
    def unit(self, unit):

        self.__unit = unit

    @property
    def trigger_wait_time(self):
        """`{ int }`
            \nHow long the metric breached the given condition before raising an event.
        """ # noqa: E501
        return self.__trigger_wait_time

    @trigger_wait_time.setter
    def trigger_wait_time(self, trigger_wait_time):

        self.__trigger_wait_time = trigger_wait_time

    @property
    def trigger_timestamp(self):
        """`{ int }`
            \nThe time when the event was triggered.
        """ # noqa: E501
        return self.__trigger_timestamp

    @trigger_timestamp.setter
    def trigger_timestamp(self, trigger_timestamp):

        self.__trigger_timestamp = trigger_timestamp

    @property
    def comparison_operator(self):
        """`{ prism.v4.common.ComparisonOperator }`
            
        """ # noqa: E501
        return self.__comparison_operator

    @comparison_operator.setter
    def comparison_operator(self, comparison_operator):

        self.__comparison_operator = comparison_operator

    @property
    def condition_type(self):
        """`{ prism.v4.common.ConditionType }`
            
        """ # noqa: E501
        return self.__condition_type

    @condition_type.setter
    def condition_type(self, condition_type):

        self.__condition_type = condition_type

    @property
    def metric_category(self):
        """`{ str }`
            \nBroad category under which this metric falls. For example, Disk, CPU, Memory and so on.
        """ # noqa: E501
        return self.__metric_category

    @metric_category.setter
    def metric_category(self, metric_category):

        self.__metric_category = metric_category

    @property
    def data_type(self):
        """`{ prism.v4.common.DataType }`
            
        """ # noqa: E501
        return self.__data_type

    @data_type.setter
    def data_type(self, data_type):

        self.__data_type = data_type

    @property
    def threshold_value(self):
        """`{ prism.v4.common.StringValue | prism.v4.common.BoolValue | prism.v4.common.DoubleValue | prism.v4.common.IntValue }`
            \nThe threshold value that was used for the condition evaluation.
        """ # noqa: E501
        return self.__threshold_value

    @threshold_value.setter
    def threshold_value(self, threshold_value):

        self.__threshold_value = threshold_value

    @property
    def metric_value(self):
        """`{ prism.v4.common.StringValue | prism.v4.common.BoolValue | prism.v4.common.DoubleValue | prism.v4.common.IntValue }`
            \nRaw value of the metric when the condition threshold was exceeded.
        """ # noqa: E501
        return self.__metric_value

    @metric_value.setter
    def metric_value(self, metric_value):

        self.__metric_value = metric_value

    @property
    def _reserved(self):
        """`{ dict(str, object) }`
            
        """ # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """`{ str }`
            
        """ # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """`{ dict(str, object) }`
            
        """ # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """
        Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.
        :param bool sanitize
        """

        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if attr_type.startswith('OneOf'):
                type = getattr(ntnx_prism_py_client.Ntnx, attr_type.split('.')[-1])
                if hasattr(type, 'get_discriminator_from_object'):
                    result[type.ONE_OF_ITEM_DISCRIMINATOR_NAME] = type.get_discriminator_from_object(value)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize))
                    if hasattr(item[1], "_to_dict") else item,
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(MetricDetail, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dict"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetricDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

