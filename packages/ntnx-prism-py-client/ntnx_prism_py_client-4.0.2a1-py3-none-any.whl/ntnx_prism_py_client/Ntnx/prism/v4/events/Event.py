# coding: utf-8


"""
IGNORE:
    Nutanix Prism Versioned APIs

    Task Management, Category Associations, Prism Central DR, Alerts, Alert policies, Events and Audits  # noqa: E501

    OpenAPI spec version: 4.0.2-alpha-1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from ntnx_prism_py_client.Ntnx.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_prism_py_client.Ntnx.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_prism_py_client.Ntnx.prism.v4.common.EntityReference import EntityReference  # noqa: F401,E501
from ntnx_prism_py_client.Ntnx.prism.v4.common.MetricDetail import MetricDetail  # noqa: F401,E501
from ntnx_prism_py_client.Ntnx.prism.v4.common.Parameter import Parameter  # noqa: F401,E501

"""
IGNORE:
NOTE: This class is auto generated by the swagger code generator program.

Do not edit the class manually.
IGNORE
"""


class Event(ExternalizableAbstractModel):
    """Event - a model defined in Swagger"""
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """ # noqa: E501
    swagger_types = {
        'source_entity': 'prism.v4.common.EntityReference',
        'affected_entities': 'list[prism.v4.common.EntityReference]',
        'metric_details': 'list[prism.v4.common.MetricDetail]',
        'title': 'str',
        'event_type': 'str',
        'classifications': 'list[str]',
        'cluster_uuid': 'str',
        'creation_timestamp_in_usecs': 'str',
        'message': 'str',
        'originating_cluster_uuid': 'str',
        'parameters': 'list[prism.v4.common.Parameter]',
        'service_name': 'str',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'source_entity': 'sourceEntity',
        'affected_entities': 'affectedEntities',
        'metric_details': 'metricDetails',
        'title': 'title',
        'event_type': 'eventType',
        'classifications': 'classifications',
        'cluster_uuid': 'clusterUUID',
        'creation_timestamp_in_usecs': 'creationTimestampInUsecs',
        'message': 'message',
        'originating_cluster_uuid': 'originatingClusterUUID',
        'parameters': 'parameters',
        'service_name': 'serviceName',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, source_entity=None, affected_entities=None, metric_details=None, title=None, event_type=None, classifications=None, cluster_uuid=None, creation_timestamp_in_usecs=None, message=None, originating_cluster_uuid=None, parameters=None, service_name=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        """Event - a model defined in Swagger
            
        """
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__source_entity = None
        self.__affected_entities = None
        self.__metric_details = None
        self.__title = None
        self.__event_type = None
        self.__classifications = None
        self.__cluster_uuid = None
        self.__creation_timestamp_in_usecs = None
        self.__message = None
        self.__originating_cluster_uuid = None
        self.__parameters = None
        self.__service_name = None
        self.discriminator = None
        if source_entity is not None:
            self.__source_entity = source_entity
        if affected_entities is not None:
            self.__affected_entities = affected_entities
        if metric_details is not None:
            self.__metric_details = metric_details
        if title is not None:
            self.__title = title
        if event_type is not None:
            self.__event_type = event_type
        if classifications is not None:
            self.__classifications = classifications
        if cluster_uuid is not None:
            self.__cluster_uuid = cluster_uuid
        if creation_timestamp_in_usecs is not None:
            self.__creation_timestamp_in_usecs = creation_timestamp_in_usecs
        if message is not None:
            self.__message = message
        if originating_cluster_uuid is not None:
            self.__originating_cluster_uuid = originating_cluster_uuid
        if parameters is not None:
            self.__parameters = parameters
        if service_name is not None:
            self.__service_name = service_name

    def _initialize_object_type(self):
        return 'prism.v4.events.Event'

    def _initialize_fq_object_type(self):
        return 'prism.v4.r0.a1.events.Event'


    @property
    def source_entity(self):
        """`{ prism.v4.common.EntityReference }`
            
        """ # noqa: E501
        return self.__source_entity

    @source_entity.setter
    def source_entity(self, source_entity):

        self.__source_entity = source_entity

    @property
    def affected_entities(self):
        """`{ list[prism.v4.common.EntityReference] }`
            \nList of all entities that are affected by the event.
        """ # noqa: E501
        return self.__affected_entities

    @affected_entities.setter
    def affected_entities(self, affected_entities):

        self.__affected_entities = affected_entities

    @property
    def metric_details(self):
        """`{ list[prism.v4.common.MetricDetail] }`
            \nDetails of the metric for a metric-based event.
        """ # noqa: E501
        return self.__metric_details

    @metric_details.setter
    def metric_details(self, metric_details):

        self.__metric_details = metric_details

    @property
    def title(self):
        """`{ str }`
            \nTitle of the event.
        """ # noqa: E501
        return self.__title

    @title.setter
    def title(self, title):

        self.__title = title

    @property
    def event_type(self):
        """`{ str }`
            \nA preconfigured or dynamically generated unique value for each event type.
        """ # noqa: E501
        return self.__event_type

    @event_type.setter
    def event_type(self, event_type):

        self.__event_type = event_type

    @property
    def classifications(self):
        """`{ list[str] }`
            \nClassification of the system defined alert policy.
        """ # noqa: E501
        return self.__classifications

    @classifications.setter
    def classifications(self, classifications):

        self.__classifications = classifications

    @property
    def cluster_uuid(self):
        """`{ str }`
            \nCluster UUID associated with the source entity of the event.
        """ # noqa: E501
        return self.__cluster_uuid

    @cluster_uuid.setter
    def cluster_uuid(self, cluster_uuid):

        self.__cluster_uuid = cluster_uuid

    @property
    def creation_timestamp_in_usecs(self):
        """`{ str }`
            \nTimestamp in microseconds when the event was created.
        """ # noqa: E501
        return self.__creation_timestamp_in_usecs

    @creation_timestamp_in_usecs.setter
    def creation_timestamp_in_usecs(self, creation_timestamp_in_usecs):

        self.__creation_timestamp_in_usecs = creation_timestamp_in_usecs

    @property
    def message(self):
        """`{ str }`
            \nAdditional message associated with the event.
        """ # noqa: E501
        return self.__message

    @message.setter
    def message(self, message):

        self.__message = message

    @property
    def originating_cluster_uuid(self):
        """`{ str }`
            \nCluster UUID associated with the cluster where the event was first raised.
        """ # noqa: E501
        return self.__originating_cluster_uuid

    @originating_cluster_uuid.setter
    def originating_cluster_uuid(self, originating_cluster_uuid):

        self.__originating_cluster_uuid = originating_cluster_uuid

    @property
    def parameters(self):
        """`{ list[prism.v4.common.Parameter] }`
            \nAdditional parameters associated with the event. These parameters can be used to indicate custom key-value pairs for a given event instance. For example, Service down in Prism Central event can have the service name as a parameter.
        """ # noqa: E501
        return self.__parameters

    @parameters.setter
    def parameters(self, parameters):

        self.__parameters = parameters

    @property
    def service_name(self):
        """`{ str }`
            \nThe service which raised the event. For internal Nutanix services, this value is set to \"Nutanix\".
        """ # noqa: E501
        return self.__service_name

    @service_name.setter
    def service_name(self, service_name):

        self.__service_name = service_name

    def _to_dict(self, sanitize):
        """
        Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.
        :param bool sanitize
        """

        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize))
                    if hasattr(item[1], "_to_dict") else item,
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(Event, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dict"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Event):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

