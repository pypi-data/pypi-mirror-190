# coding: utf-8


"""
IGNORE:
    Nutanix Prism Versioned APIs

    Task Management, Category Associations, Prism Central DR, Alerts, Alert policies, Events and Audits  # noqa: E501

    OpenAPI spec version: 4.0.2-alpha-1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from ntnx_prism_py_client.Ntnx.prism.v4.config.ParameterizedMessage import ParameterizedMessage  # noqa: F401,E501
from ntnx_prism_py_client.Ntnx.prism.v4.config.Status import Status  # noqa: F401,E501

"""
IGNORE:
NOTE: This class is auto generated by the swagger code generator program.

Do not edit the class manually.
IGNORE
"""


class CommunicationStatus(object):
    """CommunicationStatus - a model defined in Swagger"""
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """ # noqa: E501
    swagger_types = {
        'last_checked_timestamp': 'int',
        'last_changed_timestamp': 'int',
        'last_successful_transmission_timestamp': 'int',
        'status': 'prism.v4.config.Status',
        'message': 'prism.v4.config.ParameterizedMessage',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'last_checked_timestamp': 'lastCheckedTimestamp',
        'last_changed_timestamp': 'lastChangedTimestamp',
        'last_successful_transmission_timestamp': 'lastSuccessfulTransmissionTimestamp',
        'status': 'status',
        'message': 'message',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, last_checked_timestamp=None, last_changed_timestamp=None, last_successful_transmission_timestamp=None, status=None, message=None, *args, **kwargs):  # noqa: E501
        """CommunicationStatus - a model defined in Swagger
            \nStatus of the remote tunnel or service that is running on top of the remote tunnel. For example, pulse, alert email and so on.
        """
        self.__last_checked_timestamp = None
        self.__last_changed_timestamp = None
        self.__last_successful_transmission_timestamp = None
        self.__status = None
        self.__message = None
        self.discriminator = None
        if last_checked_timestamp is not None:
            self.__last_checked_timestamp = last_checked_timestamp
        if last_changed_timestamp is not None:
            self.__last_changed_timestamp = last_changed_timestamp
        if last_successful_transmission_timestamp is not None:
            self.__last_successful_transmission_timestamp = last_successful_transmission_timestamp
        if status is not None:
            self.__status = status
        if message is not None:
            self.__message = message
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'prism.v4.config.CommunicationStatus'

    def _initialize_fq_object_type(self):
        return 'prism.v4.r0.a1.config.CommunicationStatus'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fqObjectType": self._initialize_fq_object_type()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def last_checked_timestamp(self):
        """`{ int }`
            \nLast checked timestamp.
        """ # noqa: E501
        return self.__last_checked_timestamp

    @last_checked_timestamp.setter
    def last_checked_timestamp(self, last_checked_timestamp):

        self.__last_checked_timestamp = last_checked_timestamp

    @property
    def last_changed_timestamp(self):
        """`{ int }`
            \nLast changed timestamp.
        """ # noqa: E501
        return self.__last_changed_timestamp

    @last_changed_timestamp.setter
    def last_changed_timestamp(self, last_changed_timestamp):

        self.__last_changed_timestamp = last_changed_timestamp

    @property
    def last_successful_transmission_timestamp(self):
        """`{ int }`
            \nLast successful transmission timestamp.
        """ # noqa: E501
        return self.__last_successful_transmission_timestamp

    @last_successful_transmission_timestamp.setter
    def last_successful_transmission_timestamp(self, last_successful_transmission_timestamp):

        self.__last_successful_transmission_timestamp = last_successful_transmission_timestamp

    @property
    def status(self):
        """`{ prism.v4.config.Status }`
            
        """ # noqa: E501
        return self.__status

    @status.setter
    def status(self, status):

        self.__status = status

    @property
    def message(self):
        """`{ prism.v4.config.ParameterizedMessage }`
            
        """ # noqa: E501
        return self.__message

    @message.setter
    def message(self, message):

        self.__message = message

    @property
    def _reserved(self):
        """`{ dict(str, object) }`
            
        """ # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """`{ str }`
            
        """ # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """`{ dict(str, object) }`
            
        """ # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """
        Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.
        :param bool sanitize
        """

        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize))
                    if hasattr(item[1], "_to_dict") else item,
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(CommunicationStatus, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dict"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommunicationStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

