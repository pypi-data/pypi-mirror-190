# coding: utf-8


"""
IGNORE:
    Nutanix Prism Versioned APIs

    Task Management, Category Associations, Prism Central DR, Alerts, Alert policies, Events and Audits  # noqa: E501

    OpenAPI spec version: 4.0.2-alpha-1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from ntnx_prism_py_client.Ntnx.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_prism_py_client.Ntnx.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_prism_py_client.Ntnx.prism.v4.common.ImpactType import ImpactType  # noqa: F401,E501
from ntnx_prism_py_client.Ntnx.prism.v4.policies.RelatedPolicy import RelatedPolicy  # noqa: F401,E501
from ntnx_prism_py_client.Ntnx.prism.v4.policies.TriggerCondition import TriggerCondition  # noqa: F401,E501

"""
IGNORE:
NOTE: This class is auto generated by the swagger code generator program.

Do not edit the class manually.
IGNORE
"""


class UserDefined(ExternalizableAbstractModel):
    """UserDefined - a model defined in Swagger"""
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """ # noqa: E501
    swagger_types = {
        'title': 'str',
        'description': 'str',
        'enabled': 'bool',
        'auto_resolve': 'bool',
        'filter': 'str',
        'trigger_conditions': 'list[prism.v4.policies.TriggerCondition]',
        'impact_types': 'list[prism.v4.common.ImpactType]',
        'created_by': 'str',
        'last_updated_timestamp': 'int',
        'error_on_conflict': 'bool',
        'policies_to_override': 'list[str]',
        'trigger_wait_period': 'int',
        'related_policies': 'list[prism.v4.policies.RelatedPolicy]',
        'entity_type': 'str',
        'entity_ids': 'list[str]',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'title': 'title',
        'description': 'description',
        'enabled': 'enabled',
        'auto_resolve': 'autoResolve',
        'filter': 'filter',
        'trigger_conditions': 'triggerConditions',
        'impact_types': 'impactTypes',
        'created_by': 'createdBy',
        'last_updated_timestamp': 'lastUpdatedTimestamp',
        'error_on_conflict': 'errorOnConflict',
        'policies_to_override': 'policiesToOverride',
        'trigger_wait_period': 'triggerWaitPeriod',
        'related_policies': 'relatedPolicies',
        'entity_type': 'entityType',
        'entity_ids': 'entityIds',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, title=None, description=None, enabled=False, auto_resolve=True, filter=None, trigger_conditions=None, impact_types=None, created_by=None, last_updated_timestamp=None, error_on_conflict=True, policies_to_override=None, trigger_wait_period=None, related_policies=None, entity_type=None, entity_ids=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        """UserDefined - a model defined in Swagger
            
        """
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__title = None
        self.__description = None
        self.__enabled = None
        self.__auto_resolve = None
        self.__filter = None
        self.__trigger_conditions = None
        self.__impact_types = None
        self.__created_by = None
        self.__last_updated_timestamp = None
        self.__error_on_conflict = None
        self.__policies_to_override = None
        self.__trigger_wait_period = None
        self.__related_policies = None
        self.__entity_type = None
        self.__entity_ids = None
        self.discriminator = None
        self.__title = title
        if description is not None:
            self.__description = description
        self.__enabled = enabled
        self.__auto_resolve = auto_resolve
        if filter is not None:
            self.__filter = filter
        self.__trigger_conditions = trigger_conditions
        if impact_types is not None:
            self.__impact_types = impact_types
        if created_by is not None:
            self.__created_by = created_by
        if last_updated_timestamp is not None:
            self.__last_updated_timestamp = last_updated_timestamp
        if error_on_conflict is not None:
            self.__error_on_conflict = error_on_conflict
        if policies_to_override is not None:
            self.__policies_to_override = policies_to_override
        if trigger_wait_period is not None:
            self.__trigger_wait_period = trigger_wait_period
        if related_policies is not None:
            self.__related_policies = related_policies
        if entity_type is not None:
            self.__entity_type = entity_type
        if entity_ids is not None:
            self.__entity_ids = entity_ids

    def _initialize_object_type(self):
        return 'prism.v4.policies.UserDefined'

    def _initialize_fq_object_type(self):
        return 'prism.v4.r0.a1.policies.UserDefined'


    @property
    def title(self):
        """`{ str }`
            \nTitle of the policy.
        """ # noqa: E501
        return self.__title

    @title.setter
    def title(self, title):
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501
        if title is not None and len(title) > 150:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `150`")  # noqa: E501
        if title is not None and len(title) < 1:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")  # noqa: E501

        self.__title = title

    @property
    def description(self):
        """`{ str }`
            \nDescription of the policy.
        """ # noqa: E501
        return self.__description

    @description.setter
    def description(self, description):
        if description is not None and len(description) > 500:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `500`")  # noqa: E501

        self.__description = description

    @property
    def enabled(self):
        """`{ bool }`
            \nEnable/Disable flag for the policy.
        """ # noqa: E501
        return self.__enabled

    @enabled.setter
    def enabled(self, enabled):
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")  # noqa: E501

        self.__enabled = enabled

    @property
    def auto_resolve(self):
        """`{ bool }`
            \nIndicates whether the auto resolve feature is enabled for this policy.
        """ # noqa: E501
        return self.__auto_resolve

    @auto_resolve.setter
    def auto_resolve(self, auto_resolve):
        if auto_resolve is None:
            raise ValueError("Invalid value for `auto_resolve`, must not be `None`")  # noqa: E501

        self.__auto_resolve = auto_resolve

    @property
    def filter(self):
        """`{ str }`
            \nFilter expression for the policy in FIQL.
        """ # noqa: E501
        return self.__filter

    @filter.setter
    def filter(self, filter):

        self.__filter = filter

    @property
    def trigger_conditions(self):
        """`{ list[prism.v4.policies.TriggerCondition] }`
            \nTrigger conditions for the policy. If there are multiple trigger conditions, all of them will be considered during the operation.
        """ # noqa: E501
        return self.__trigger_conditions

    @trigger_conditions.setter
    def trigger_conditions(self, trigger_conditions):
        if trigger_conditions is None:
            raise ValueError("Invalid value for `trigger_conditions`, must not be `None`")  # noqa: E501

        self.__trigger_conditions = trigger_conditions

    @property
    def impact_types(self):
        """`{ list[prism.v4.common.ImpactType] }`
            \nImpact Types for the associated resulting alert.
        """ # noqa: E501
        return self.__impact_types

    @impact_types.setter
    def impact_types(self, impact_types):

        self.__impact_types = impact_types

    @property
    def created_by(self):
        """`{ str }`
            \nUsername of the user who created the policy.
        """ # noqa: E501
        return self.__created_by

    @created_by.setter
    def created_by(self, created_by):

        self.__created_by = created_by

    @property
    def last_updated_timestamp(self):
        """`{ int }`
            \nLast updated timestamp of the policy. This value will be used as the CAS value during updates.
        """ # noqa: E501
        return self.__last_updated_timestamp

    @last_updated_timestamp.setter
    def last_updated_timestamp(self, last_updated_timestamp):

        self.__last_updated_timestamp = last_updated_timestamp

    @property
    def error_on_conflict(self):
        """`{ bool }`
            \nError if conflicting alert policies are found.
        """ # noqa: E501
        return self.__error_on_conflict

    @error_on_conflict.setter
    def error_on_conflict(self, error_on_conflict):

        self.__error_on_conflict = error_on_conflict

    @property
    def policies_to_override(self):
        """`{ list[str] }`
            \nList of IDs of the alert policies that should be overridden.
        """ # noqa: E501
        return self.__policies_to_override

    @policies_to_override.setter
    def policies_to_override(self, policies_to_override):

        self.__policies_to_override = policies_to_override

    @property
    def trigger_wait_period(self):
        """`{ int }`
            \nWaiting duration in seconds before triggering the alert, when the specified condition is met.
        """ # noqa: E501
        return self.__trigger_wait_period

    @trigger_wait_period.setter
    def trigger_wait_period(self, trigger_wait_period):

        self.__trigger_wait_period = trigger_wait_period

    @property
    def related_policies(self):
        """`{ list[prism.v4.policies.RelatedPolicy] }`
            \nList of alert policies that are related to the entities of the current policy.
        """ # noqa: E501
        return self.__related_policies

    @related_policies.setter
    def related_policies(self, related_policies):

        self.__related_policies = related_policies

    @property
    def entity_type(self):
        """`{ str }`
            \nEntity type associated with the user defined alert policy. For example, VM, Node, Cluster etc.
        """ # noqa: E501
        return self.__entity_type

    @entity_type.setter
    def entity_type(self, entity_type):

        self.__entity_type = entity_type

    @property
    def entity_ids(self):
        """`{ list[str] }`
            \nUnique identifiers of the entities associated with the user defined alert policy.
        """ # noqa: E501
        return self.__entity_ids

    @entity_ids.setter
    def entity_ids(self, entity_ids):

        self.__entity_ids = entity_ids

    def _to_dict(self, sanitize):
        """
        Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.
        :param bool sanitize
        """

        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize))
                    if hasattr(item[1], "_to_dict") else item,
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(UserDefined, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dict"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserDefined):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

