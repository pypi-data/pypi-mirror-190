# coding: utf-8


"""
IGNORE:
    Nutanix Vmm Versioned APIs

    Manage the life-cycle of virtual machines hosted on Nutanix  # noqa: E501

    OpenAPI spec version: 4.0.2-alpha-1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from ntnx_vmm_py_client.Ntnx.vmm.v4.ahv.config.NgtCapability import NgtCapability  # noqa: F401,E501

"""
IGNORE:
NOTE: This class is auto generated by the swagger code generator program.

Do not edit the class manually.
IGNORE
"""


class GuestTools(object):
    """GuestTools - a model defined in Swagger"""
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """ # noqa: E501
    swagger_types = {
        'version': 'str',
        'is_installed': 'bool',
        'is_enabled': 'bool',
        'is_iso_inserted': 'bool',
        'capabilities': 'list[vmm.v4.ahv.config.NgtCapability]',
        'available_version': 'str',
        'guest_os_version': 'str',
        'is_reachable': 'bool',
        'is_vss_snapshot_capable': 'bool',
        'is_vm_mobility_drivers_installed': 'bool',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'version': 'version',
        'is_installed': 'isInstalled',
        'is_enabled': 'isEnabled',
        'is_iso_inserted': 'isIsoInserted',
        'capabilities': 'capabilities',
        'available_version': 'availableVersion',
        'guest_os_version': 'guestOsVersion',
        'is_reachable': 'isReachable',
        'is_vss_snapshot_capable': 'isVssSnapshotCapable',
        'is_vm_mobility_drivers_installed': 'isVmMobilityDriversInstalled',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, version=None, is_installed=None, is_enabled=None, is_iso_inserted=None, capabilities=None, available_version=None, guest_os_version=None, is_reachable=None, is_vss_snapshot_capable=None, is_vm_mobility_drivers_installed=None, *args, **kwargs):  # noqa: E501
        """GuestTools - a model defined in Swagger
            \nThe details about Nutanix Guest Tools for a VM.
        """
        self.__version = None
        self.__is_installed = None
        self.__is_enabled = None
        self.__is_iso_inserted = None
        self.__capabilities = None
        self.__available_version = None
        self.__guest_os_version = None
        self.__is_reachable = None
        self.__is_vss_snapshot_capable = None
        self.__is_vm_mobility_drivers_installed = None
        self.discriminator = None
        if version is not None:
            self.__version = version
        if is_installed is not None:
            self.__is_installed = is_installed
        if is_enabled is not None:
            self.__is_enabled = is_enabled
        if is_iso_inserted is not None:
            self.__is_iso_inserted = is_iso_inserted
        if capabilities is not None:
            self.__capabilities = capabilities
        if available_version is not None:
            self.__available_version = available_version
        if guest_os_version is not None:
            self.__guest_os_version = guest_os_version
        if is_reachable is not None:
            self.__is_reachable = is_reachable
        if is_vss_snapshot_capable is not None:
            self.__is_vss_snapshot_capable = is_vss_snapshot_capable
        if is_vm_mobility_drivers_installed is not None:
            self.__is_vm_mobility_drivers_installed = is_vm_mobility_drivers_installed
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'vmm.v4.ahv.config.GuestTools'

    def _initialize_fq_object_type(self):
        return 'vmm.v4.r0.a1.ahv.config.GuestTools'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fqObjectType": self._initialize_fq_object_type()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def version(self):
        """`{ str }`
            \nVersion of Nutanix Guest Tools installed on the VM.
        """ # noqa: E501
        return self.__version

    @version.setter
    def version(self, version):

        self.__version = version

    @property
    def is_installed(self):
        """`{ bool }`
            \nIndicates whether Nutanix Guest Tools is installed on the VM or not.
        """ # noqa: E501
        return self.__is_installed

    @is_installed.setter
    def is_installed(self, is_installed):

        self.__is_installed = is_installed

    @property
    def is_enabled(self):
        """`{ bool }`
            \nIndicates whether Nutanix Guest Tools is enabled or not.
        """ # noqa: E501
        return self.__is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):

        self.__is_enabled = is_enabled

    @property
    def is_iso_inserted(self):
        """`{ bool }`
            \nIndicates whether Nutanix Guest Tools ISO is inserted or not.
        """ # noqa: E501
        return self.__is_iso_inserted

    @is_iso_inserted.setter
    def is_iso_inserted(self, is_iso_inserted):

        self.__is_iso_inserted = is_iso_inserted

    @property
    def capabilities(self):
        """`{ list[vmm.v4.ahv.config.NgtCapability] }`
            \nThe list of the application names that are enabled on the guest VM.
        """ # noqa: E501
        return self.__capabilities

    @capabilities.setter
    def capabilities(self, capabilities):

        self.__capabilities = capabilities

    @property
    def available_version(self):
        """`{ str }`
            \nVersion of Nutanix Guest Tools available on the cluster.
        """ # noqa: E501
        return self.__available_version

    @available_version.setter
    def available_version(self, available_version):

        self.__available_version = available_version

    @property
    def guest_os_version(self):
        """`{ str }`
            \nVersion of the operating system on the VM.
        """ # noqa: E501
        return self.__guest_os_version

    @guest_os_version.setter
    def guest_os_version(self, guest_os_version):

        self.__guest_os_version = guest_os_version

    @property
    def is_reachable(self):
        """`{ bool }`
            \nIndicates whether the communication from VM to CVM is active or not.
        """ # noqa: E501
        return self.__is_reachable

    @is_reachable.setter
    def is_reachable(self, is_reachable):

        self.__is_reachable = is_reachable

    @property
    def is_vss_snapshot_capable(self):
        """`{ bool }`
            \nIndicates whether the VM is configured to take VSS snapshots through NGT or not.
        """ # noqa: E501
        return self.__is_vss_snapshot_capable

    @is_vss_snapshot_capable.setter
    def is_vss_snapshot_capable(self, is_vss_snapshot_capable):

        self.__is_vss_snapshot_capable = is_vss_snapshot_capable

    @property
    def is_vm_mobility_drivers_installed(self):
        """`{ bool }`
            \nIndicates whether the VM mobility drivers are installed on the VM or not.
        """ # noqa: E501
        return self.__is_vm_mobility_drivers_installed

    @is_vm_mobility_drivers_installed.setter
    def is_vm_mobility_drivers_installed(self, is_vm_mobility_drivers_installed):

        self.__is_vm_mobility_drivers_installed = is_vm_mobility_drivers_installed

    @property
    def _reserved(self):
        """`{ dict(str, object) }`
            
        """ # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """`{ str }`
            
        """ # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """`{ dict(str, object) }`
            
        """ # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """
        Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.
        :param bool sanitize
        """

        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize))
                    if hasattr(item[1], "_to_dict") else item,
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(GuestTools, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dict"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GuestTools):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

