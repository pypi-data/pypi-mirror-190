# coding: utf-8


"""
IGNORE:
    Nutanix Vmm Versioned APIs

    Manage the life-cycle of virtual machines hosted on Nutanix  # noqa: E501

    OpenAPI spec version: 4.0.2-alpha-1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from ntnx_vmm_py_client.Ntnx.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.vmm.v4.config.MachineType import MachineType  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.vmm.v4.config.PowerState import PowerState  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.vmm.v4.config.Reference import Reference  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.vmm.v4.config.VMTemplateBootConfig import VMTemplateBootConfig  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.vmm.v4.config.VMTemplateDisk import VMTemplateDisk  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.vmm.v4.config.VMTemplateGpu import VMTemplateGpu  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.vmm.v4.config.VMTemplateGuestCustomization import VMTemplateGuestCustomization  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.vmm.v4.config.VMTemplateGuestTools import VMTemplateGuestTools  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.vmm.v4.config.VMTemplateNic import VMTemplateNic  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.vmm.v4.config.VMTemplatePowerStateMechanism import VMTemplatePowerStateMechanism  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.vmm.v4.config.VMTemplateSerialPort import VMTemplateSerialPort  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.vmm.v4.config.VMTemplateStorage import VMTemplateStorage  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.vmm.v4.config.VMTemplateVNuma import VMTemplateVNuma  # noqa: F401,E501

"""
IGNORE:
NOTE: This class is auto generated by the swagger code generator program.

Do not edit the class manually.
IGNORE
"""


class VMTemplate(ExternalizableAbstractModel):
    """VMTemplate - a model defined in Swagger"""
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """ # noqa: E501
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'num_sockets': 'int',
        'num_vcpus_per_socket': 'int',
        'num_threads_per_core': 'int',
        'memory_size_mib': 'int',
        'guest_os_id': 'str',
        'is_vcpu_hard_pinned': 'bool',
        'power_state': 'vmm.v4.config.PowerState',
        'power_state_mechanism': 'vmm.v4.config.VMTemplatePowerStateMechanism',
        'hardware_clock_timezone': 'str',
        'is_agent_vm': 'bool',
        'is_disable_branding': 'bool',
        'is_enable_cpu_passthrough': 'bool',
        'machine_type': 'vmm.v4.config.MachineType',
        'disks': 'list[vmm.v4.config.VMTemplateDisk]',
        'nics': 'list[vmm.v4.config.VMTemplateNic]',
        'gpus': 'list[vmm.v4.config.VMTemplateGpu]',
        'parent_reference': 'vmm.v4.config.Reference',
        'boot_config': 'vmm.v4.config.VMTemplateBootConfig',
        'guest_customization': 'vmm.v4.config.VMTemplateGuestCustomization',
        'guest_tools': 'vmm.v4.config.VMTemplateGuestTools',
        'is_vga_console_enabled': 'bool',
        'vnuma_config': 'vmm.v4.config.VMTemplateVNuma',
        'serial_ports': 'list[vmm.v4.config.VMTemplateSerialPort]',
        'storage_config': 'vmm.v4.config.VMTemplateStorage',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'num_sockets': 'numSockets',
        'num_vcpus_per_socket': 'numVcpusPerSocket',
        'num_threads_per_core': 'numThreadsPerCore',
        'memory_size_mib': 'memorySizeMib',
        'guest_os_id': 'guestOsId',
        'is_vcpu_hard_pinned': 'isVcpuHardPinned',
        'power_state': 'powerState',
        'power_state_mechanism': 'powerStateMechanism',
        'hardware_clock_timezone': 'hardwareClockTimezone',
        'is_agent_vm': 'isAgentVm',
        'is_disable_branding': 'isDisableBranding',
        'is_enable_cpu_passthrough': 'isEnableCpuPassthrough',
        'machine_type': 'machineType',
        'disks': 'disks',
        'nics': 'nics',
        'gpus': 'gpus',
        'parent_reference': 'parentReference',
        'boot_config': 'bootConfig',
        'guest_customization': 'guestCustomization',
        'guest_tools': 'guestTools',
        'is_vga_console_enabled': 'isVgaConsoleEnabled',
        'vnuma_config': 'vnumaConfig',
        'serial_ports': 'serialPorts',
        'storage_config': 'storageConfig',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, description=None, num_sockets=None, num_vcpus_per_socket=None, num_threads_per_core=None, memory_size_mib=None, guest_os_id=None, is_vcpu_hard_pinned=None, power_state=None, power_state_mechanism=None, hardware_clock_timezone=None, is_agent_vm=None, is_disable_branding=None, is_enable_cpu_passthrough=None, machine_type=None, disks=None, nics=None, gpus=None, parent_reference=None, boot_config=None, guest_customization=None, guest_tools=None, is_vga_console_enabled=None, vnuma_config=None, serial_ports=None, storage_config=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        """VMTemplate - a model defined in Swagger
            \nVM Resources Definition.
        """
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__name = None
        self.__description = None
        self.__num_sockets = None
        self.__num_vcpus_per_socket = None
        self.__num_threads_per_core = None
        self.__memory_size_mib = None
        self.__guest_os_id = None
        self.__is_vcpu_hard_pinned = None
        self.__power_state = None
        self.__power_state_mechanism = None
        self.__hardware_clock_timezone = None
        self.__is_agent_vm = None
        self.__is_disable_branding = None
        self.__is_enable_cpu_passthrough = None
        self.__machine_type = None
        self.__disks = None
        self.__nics = None
        self.__gpus = None
        self.__parent_reference = None
        self.__boot_config = None
        self.__guest_customization = None
        self.__guest_tools = None
        self.__is_vga_console_enabled = None
        self.__vnuma_config = None
        self.__serial_ports = None
        self.__storage_config = None
        self.discriminator = None
        if name is not None:
            self.__name = name
        if description is not None:
            self.__description = description
        if num_sockets is not None:
            self.__num_sockets = num_sockets
        if num_vcpus_per_socket is not None:
            self.__num_vcpus_per_socket = num_vcpus_per_socket
        if num_threads_per_core is not None:
            self.__num_threads_per_core = num_threads_per_core
        if memory_size_mib is not None:
            self.__memory_size_mib = memory_size_mib
        if guest_os_id is not None:
            self.__guest_os_id = guest_os_id
        if is_vcpu_hard_pinned is not None:
            self.__is_vcpu_hard_pinned = is_vcpu_hard_pinned
        if power_state is not None:
            self.__power_state = power_state
        if power_state_mechanism is not None:
            self.__power_state_mechanism = power_state_mechanism
        if hardware_clock_timezone is not None:
            self.__hardware_clock_timezone = hardware_clock_timezone
        if is_agent_vm is not None:
            self.__is_agent_vm = is_agent_vm
        if is_disable_branding is not None:
            self.__is_disable_branding = is_disable_branding
        if is_enable_cpu_passthrough is not None:
            self.__is_enable_cpu_passthrough = is_enable_cpu_passthrough
        if machine_type is not None:
            self.__machine_type = machine_type
        if disks is not None:
            self.__disks = disks
        if nics is not None:
            self.__nics = nics
        if gpus is not None:
            self.__gpus = gpus
        if parent_reference is not None:
            self.__parent_reference = parent_reference
        if boot_config is not None:
            self.__boot_config = boot_config
        if guest_customization is not None:
            self.__guest_customization = guest_customization
        if guest_tools is not None:
            self.__guest_tools = guest_tools
        if is_vga_console_enabled is not None:
            self.__is_vga_console_enabled = is_vga_console_enabled
        if vnuma_config is not None:
            self.__vnuma_config = vnuma_config
        if serial_ports is not None:
            self.__serial_ports = serial_ports
        if storage_config is not None:
            self.__storage_config = storage_config

    def _initialize_object_type(self):
        return 'vmm.v4.config.VMTemplate'

    def _initialize_fq_object_type(self):
        return 'vmm.v4.r0.a1.config.VMTemplate'


    @property
    def name(self):
        """`{ str }`
            \nThe name of the VM.
        """ # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):

        self.__name = name

    @property
    def description(self):
        """`{ str }`
            \nThe description of the VM.
        """ # noqa: E501
        return self.__description

    @description.setter
    def description(self, description):

        self.__description = description

    @property
    def num_sockets(self):
        """`{ int }`
            \nNumber of vCPU sockets.
        """ # noqa: E501
        return self.__num_sockets

    @num_sockets.setter
    def num_sockets(self, num_sockets):
        if num_sockets is not None and num_sockets < 1:  # noqa: E501
            raise ValueError("Invalid value for `num_sockets`, must be a value greater than or equal to `1`")  # noqa: E501

        self.__num_sockets = num_sockets

    @property
    def num_vcpus_per_socket(self):
        """`{ int }`
            \nNumber of vCPUs per socket.
        """ # noqa: E501
        return self.__num_vcpus_per_socket

    @num_vcpus_per_socket.setter
    def num_vcpus_per_socket(self, num_vcpus_per_socket):
        if num_vcpus_per_socket is not None and num_vcpus_per_socket < 1:  # noqa: E501
            raise ValueError("Invalid value for `num_vcpus_per_socket`, must be a value greater than or equal to `1`")  # noqa: E501

        self.__num_vcpus_per_socket = num_vcpus_per_socket

    @property
    def num_threads_per_core(self):
        """`{ int }`
            \nNumber of logical threads per core.
        """ # noqa: E501
        return self.__num_threads_per_core

    @num_threads_per_core.setter
    def num_threads_per_core(self, num_threads_per_core):
        if num_threads_per_core is not None and num_threads_per_core < 1:  # noqa: E501
            raise ValueError("Invalid value for `num_threads_per_core`, must be a value greater than or equal to `1`")  # noqa: E501

        self.__num_threads_per_core = num_threads_per_core

    @property
    def memory_size_mib(self):
        """`{ int }`
            \nMemory size in MiB.
        """ # noqa: E501
        return self.__memory_size_mib

    @memory_size_mib.setter
    def memory_size_mib(self, memory_size_mib):
        if memory_size_mib is not None and memory_size_mib < 1:  # noqa: E501
            raise ValueError("Invalid value for `memory_size_mib`, must be a value greater than or equal to `1`")  # noqa: E501

        self.__memory_size_mib = memory_size_mib

    @property
    def guest_os_id(self):
        """`{ str }`
            \nString that identifies the OS running inside of the guest.
        """ # noqa: E501
        return self.__guest_os_id

    @guest_os_id.setter
    def guest_os_id(self, guest_os_id):
        if guest_os_id is not None and len(guest_os_id) > 64:
            raise ValueError("Invalid value for `guest_os_id`, length must be less than or equal to `64`")  # noqa: E501

        self.__guest_os_id = guest_os_id

    @property
    def is_vcpu_hard_pinned(self):
        """`{ bool }`
            \nIndicates whether the vCPUs should be hard pinned to specific pCPUs.
        """ # noqa: E501
        return self.__is_vcpu_hard_pinned

    @is_vcpu_hard_pinned.setter
    def is_vcpu_hard_pinned(self, is_vcpu_hard_pinned):

        self.__is_vcpu_hard_pinned = is_vcpu_hard_pinned

    @property
    def power_state(self):
        """`{ vmm.v4.config.PowerState }`
            
        """ # noqa: E501
        return self.__power_state

    @power_state.setter
    def power_state(self, power_state):

        self.__power_state = power_state

    @property
    def power_state_mechanism(self):
        """`{ vmm.v4.config.VMTemplatePowerStateMechanism }`
            
        """ # noqa: E501
        return self.__power_state_mechanism

    @power_state_mechanism.setter
    def power_state_mechanism(self, power_state_mechanism):

        self.__power_state_mechanism = power_state_mechanism

    @property
    def hardware_clock_timezone(self):
        """`{ str }`
            \nVM's hardware clock timezone in IANA TZDB format (America/Los_Angeles).
        """ # noqa: E501
        return self.__hardware_clock_timezone

    @hardware_clock_timezone.setter
    def hardware_clock_timezone(self, hardware_clock_timezone):
        if hardware_clock_timezone is not None and len(hardware_clock_timezone) > 64:
            raise ValueError("Invalid value for `hardware_clock_timezone`, length must be less than or equal to `64`")  # noqa: E501

        self.__hardware_clock_timezone = hardware_clock_timezone

    @property
    def is_agent_vm(self):
        """`{ bool }`
            \nIndicates whether the VM is an agent VM. When their host enters maintenance mode, after normal VMs are evacuated, agent VMs are powered off. When the host is restored, agent VMs are powered on before VMs are restored to normalcy. In other words, agent VMs cannot be HA-protected or live migrated.
        """ # noqa: E501
        return self.__is_agent_vm

    @is_agent_vm.setter
    def is_agent_vm(self, is_agent_vm):

        self.__is_agent_vm = is_agent_vm

    @property
    def is_disable_branding(self):
        """`{ bool }`
            \nIndicates whether to remove AHV branding from VM firmware tables.
        """ # noqa: E501
        return self.__is_disable_branding

    @is_disable_branding.setter
    def is_disable_branding(self, is_disable_branding):

        self.__is_disable_branding = is_disable_branding

    @property
    def is_enable_cpu_passthrough(self):
        """`{ bool }`
            \nIndicates whether to passthrough the host's CPU features to the guest. Enabling this will disable live migration of the VM.
        """ # noqa: E501
        return self.__is_enable_cpu_passthrough

    @is_enable_cpu_passthrough.setter
    def is_enable_cpu_passthrough(self, is_enable_cpu_passthrough):

        self.__is_enable_cpu_passthrough = is_enable_cpu_passthrough

    @property
    def machine_type(self):
        """`{ vmm.v4.config.MachineType }`
            
        """ # noqa: E501
        return self.__machine_type

    @machine_type.setter
    def machine_type(self, machine_type):

        self.__machine_type = machine_type

    @property
    def disks(self):
        """`{ list[vmm.v4.config.VMTemplateDisk] }`
            \nThe list of Disks attached to the VM.
        """ # noqa: E501
        return self.__disks

    @disks.setter
    def disks(self, disks):

        self.__disks = disks

    @property
    def nics(self):
        """`{ list[vmm.v4.config.VMTemplateNic] }`
            \nThe list of NICs attached to the VM.
        """ # noqa: E501
        return self.__nics

    @nics.setter
    def nics(self, nics):

        self.__nics = nics

    @property
    def gpus(self):
        """`{ list[vmm.v4.config.VMTemplateGpu] }`
            \nThe list of GPUs attached to the VM.
        """ # noqa: E501
        return self.__gpus

    @gpus.setter
    def gpus(self, gpus):

        self.__gpus = gpus

    @property
    def parent_reference(self):
        """`{ vmm.v4.config.Reference }`
            
        """ # noqa: E501
        return self.__parent_reference

    @parent_reference.setter
    def parent_reference(self, parent_reference):

        self.__parent_reference = parent_reference

    @property
    def boot_config(self):
        """`{ vmm.v4.config.VMTemplateBootConfig }`
            
        """ # noqa: E501
        return self.__boot_config

    @boot_config.setter
    def boot_config(self, boot_config):

        self.__boot_config = boot_config

    @property
    def guest_customization(self):
        """`{ vmm.v4.config.VMTemplateGuestCustomization }`
            
        """ # noqa: E501
        return self.__guest_customization

    @guest_customization.setter
    def guest_customization(self, guest_customization):

        self.__guest_customization = guest_customization

    @property
    def guest_tools(self):
        """`{ vmm.v4.config.VMTemplateGuestTools }`
            
        """ # noqa: E501
        return self.__guest_tools

    @guest_tools.setter
    def guest_tools(self, guest_tools):

        self.__guest_tools = guest_tools

    @property
    def is_vga_console_enabled(self):
        """`{ bool }`
            \nIndicates whether VGA console should be enabled or not.
        """ # noqa: E501
        return self.__is_vga_console_enabled

    @is_vga_console_enabled.setter
    def is_vga_console_enabled(self, is_vga_console_enabled):

        self.__is_vga_console_enabled = is_vga_console_enabled

    @property
    def vnuma_config(self):
        """`{ vmm.v4.config.VMTemplateVNuma }`
            
        """ # noqa: E501
        return self.__vnuma_config

    @vnuma_config.setter
    def vnuma_config(self, vnuma_config):

        self.__vnuma_config = vnuma_config

    @property
    def serial_ports(self):
        """`{ list[vmm.v4.config.VMTemplateSerialPort] }`
            \nSerial ports configured on the VM.
        """ # noqa: E501
        return self.__serial_ports

    @serial_ports.setter
    def serial_ports(self, serial_ports):

        self.__serial_ports = serial_ports

    @property
    def storage_config(self):
        """`{ vmm.v4.config.VMTemplateStorage }`
            
        """ # noqa: E501
        return self.__storage_config

    @storage_config.setter
    def storage_config(self, storage_config):

        self.__storage_config = storage_config

    def _to_dict(self, sanitize):
        """
        Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.
        :param bool sanitize
        """

        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize))
                    if hasattr(item[1], "_to_dict") else item,
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(VMTemplate, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dict"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VMTemplate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

