# coding: utf-8


"""
IGNORE:
    Nutanix Vmm Versioned APIs

    Manage the life-cycle of virtual machines hosted on Nutanix  # noqa: E501

    OpenAPI spec version: 4.0.2-alpha-1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from ntnx_vmm_py_client.Ntnx.vmm.v4.config.Credentials import Credentials  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.vmm.v4.config.IsoMountState import IsoMountState  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.vmm.v4.config.NgtAvailableState import NgtAvailableState  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.vmm.v4.config.NgtEnabledCapability import NgtEnabledCapability  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.vmm.v4.config.NgtState import NgtState  # noqa: F401,E501

"""
IGNORE:
NOTE: This class is auto generated by the swagger code generator program.

Do not edit the class manually.
IGNORE
"""


class VMTemplateNutanixGuestTools(object):
    """VMTemplateNutanixGuestTools - a model defined in Swagger"""
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """ # noqa: E501
    swagger_types = {
        'ngt_state': 'vmm.v4.config.NgtAvailableState',
        'credentials': 'vmm.v4.config.Credentials',
        'state': 'vmm.v4.config.NgtState',
        'iso_mount_state': 'vmm.v4.config.IsoMountState',
        'enabled_capabilities': 'list[vmm.v4.config.NgtEnabledCapability]',
        'version': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'ngt_state': 'ngtState',
        'credentials': 'credentials',
        'state': 'state',
        'iso_mount_state': 'isoMountState',
        'enabled_capabilities': 'enabledCapabilities',
        'version': 'version',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, ngt_state=None, credentials=None, state=None, iso_mount_state=None, enabled_capabilities=None, version=None, *args, **kwargs):  # noqa: E501
        """VMTemplateNutanixGuestTools - a model defined in Swagger
            \nInformation regarding Nutanix Guest Tools.
        """
        self.__ngt_state = None
        self.__credentials = None
        self.__state = None
        self.__iso_mount_state = None
        self.__enabled_capabilities = None
        self.__version = None
        self.discriminator = None
        if ngt_state is not None:
            self.__ngt_state = ngt_state
        if credentials is not None:
            self.__credentials = credentials
        if state is not None:
            self.__state = state
        if iso_mount_state is not None:
            self.__iso_mount_state = iso_mount_state
        if enabled_capabilities is not None:
            self.__enabled_capabilities = enabled_capabilities
        if version is not None:
            self.__version = version
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'vmm.v4.config.VMTemplateNutanixGuestTools'

    def _initialize_fq_object_type(self):
        return 'vmm.v4.r0.a1.config.VMTemplateNutanixGuestTools'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fqObjectType": self._initialize_fq_object_type()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def ngt_state(self):
        """`{ vmm.v4.config.NgtAvailableState }`
            
        """ # noqa: E501
        return self.__ngt_state

    @ngt_state.setter
    def ngt_state(self, ngt_state):

        self.__ngt_state = ngt_state

    @property
    def credentials(self):
        """`{ vmm.v4.config.Credentials }`
            
        """ # noqa: E501
        return self.__credentials

    @credentials.setter
    def credentials(self, credentials):

        self.__credentials = credentials

    @property
    def state(self):
        """`{ vmm.v4.config.NgtState }`
            
        """ # noqa: E501
        return self.__state

    @state.setter
    def state(self, state):

        self.__state = state

    @property
    def iso_mount_state(self):
        """`{ vmm.v4.config.IsoMountState }`
            
        """ # noqa: E501
        return self.__iso_mount_state

    @iso_mount_state.setter
    def iso_mount_state(self, iso_mount_state):

        self.__iso_mount_state = iso_mount_state

    @property
    def enabled_capabilities(self):
        """`{ list[vmm.v4.config.NgtEnabledCapability] }`
            \nApplication names that are enabled.
        """ # noqa: E501
        return self.__enabled_capabilities

    @enabled_capabilities.setter
    def enabled_capabilities(self, enabled_capabilities):

        self.__enabled_capabilities = enabled_capabilities

    @property
    def version(self):
        """`{ str }`
            \nDesired Version of Nutanix Guest Tools installed on the VM.
        """ # noqa: E501
        return self.__version

    @version.setter
    def version(self, version):

        self.__version = version

    @property
    def _reserved(self):
        """`{ dict(str, object) }`
            
        """ # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """`{ str }`
            
        """ # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """`{ dict(str, object) }`
            
        """ # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """
        Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.
        :param bool sanitize
        """

        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize))
                    if hasattr(item[1], "_to_dict") else item,
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(VMTemplateNutanixGuestTools, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dict"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VMTemplateNutanixGuestTools):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

