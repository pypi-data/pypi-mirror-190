# coding: utf-8


"""
IGNORE:
    Nutanix Vmm Versioned APIs

    Manage the life-cycle of virtual machines hosted on Nutanix  # noqa: E501

    OpenAPI spec version: 4.0.2-alpha-1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from ntnx_vmm_py_client.Ntnx.common.v1.config.IPAddress import IPAddress  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.vmm.v4.config.IPAssignmentType import IPAssignmentType  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.vmm.v4.config.IPDiscoveredType import IPDiscoveredType  # noqa: F401,E501

"""
IGNORE:
NOTE: This class is auto generated by the swagger code generator program.

Do not edit the class manually.
IGNORE
"""


class VMTemplateIPAddress(object):
    """VMTemplateIPAddress - a model defined in Swagger"""
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """ # noqa: E501
    swagger_types = {
        'type': 'vmm.v4.config.IPDiscoveredType',
        'ip': 'common.v1.config.IPAddress',
        'ip_type': 'vmm.v4.config.IPAssignmentType',
        'prefix_length': 'int',
        'gateway_addresses': 'list[common.v1.config.IPAddress]',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'type': 'type',
        'ip': 'ip',
        'ip_type': 'ipType',
        'prefix_length': 'prefixLength',
        'gateway_addresses': 'gatewayAddresses',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, type=None, ip=None, ip_type=None, prefix_length=None, gateway_addresses=None, *args, **kwargs):  # noqa: E501
        """VMTemplateIPAddress - a model defined in Swagger
            \nAn IP address.
        """
        self.__type = None
        self.__ip = None
        self.__ip_type = None
        self.__prefix_length = None
        self.__gateway_addresses = None
        self.discriminator = None
        if type is not None:
            self.__type = type
        if ip is not None:
            self.__ip = ip
        if ip_type is not None:
            self.__ip_type = ip_type
        if prefix_length is not None:
            self.__prefix_length = prefix_length
        if gateway_addresses is not None:
            self.__gateway_addresses = gateway_addresses
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'vmm.v4.config.VMTemplateIPAddress'

    def _initialize_fq_object_type(self):
        return 'vmm.v4.r0.a1.config.VMTemplateIPAddress'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fqObjectType": self._initialize_fq_object_type()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def type(self):
        """`{ vmm.v4.config.IPDiscoveredType }`
            
        """ # noqa: E501
        return self.__type

    @type.setter
    def type(self, type):

        self.__type = type

    @property
    def ip(self):
        """`{ common.v1.config.IPAddress }`
            
        """ # noqa: E501
        return self.__ip

    @ip.setter
    def ip(self, ip):

        self.__ip = ip

    @property
    def ip_type(self):
        """`{ vmm.v4.config.IPAssignmentType }`
            
        """ # noqa: E501
        return self.__ip_type

    @ip_type.setter
    def ip_type(self, ip_type):

        self.__ip_type = ip_type

    @property
    def prefix_length(self):
        """`{ int }`
            \nPrefix length for the IP address.
        """ # noqa: E501
        return self.__prefix_length

    @prefix_length.setter
    def prefix_length(self, prefix_length):
        if prefix_length is not None and prefix_length > 32:  # noqa: E501
            raise ValueError("Invalid value for `prefix_length`, must be a value less than or equal to `32`")  # noqa: E501
        if prefix_length is not None and prefix_length < 0:  # noqa: E501
            raise ValueError("Invalid value for `prefix_length`, must be a value greater than or equal to `0`")  # noqa: E501

        self.__prefix_length = prefix_length

    @property
    def gateway_addresses(self):
        """`{ list[common.v1.config.IPAddress] }`
            \nGateway IP addresses matching the subnet.
        """ # noqa: E501
        return self.__gateway_addresses

    @gateway_addresses.setter
    def gateway_addresses(self, gateway_addresses):

        self.__gateway_addresses = gateway_addresses

    @property
    def _reserved(self):
        """`{ dict(str, object) }`
            
        """ # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """`{ str }`
            
        """ # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """`{ dict(str, object) }`
            
        """ # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """
        Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.
        :param bool sanitize
        """

        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize))
                    if hasattr(item[1], "_to_dict") else item,
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(VMTemplateIPAddress, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dict"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VMTemplateIPAddress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

