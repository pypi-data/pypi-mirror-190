# coding: utf-8


"""
IGNORE:
    Nutanix Vmm Versioned APIs

    Manage the life-cycle of virtual machines hosted on Nutanix  # noqa: E501

    OpenAPI spec version: 4.0.2-alpha-1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from ntnx_vmm_py_client.Ntnx.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.vmm.v4.images.ClusterEntityFilter import ClusterEntityFilter  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.vmm.v4.images.ClusterRateLimitStatus import ClusterRateLimitStatus  # noqa: F401,E501

"""
IGNORE:
NOTE: This class is auto generated by the swagger code generator program.

Do not edit the class manually.
IGNORE
"""


class RateLimit(ExternalizableAbstractModel):
    """RateLimit - a model defined in Swagger"""
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """ # noqa: E501
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'rate_limit_kbps': 'int',
        'cluster_entity_filter': 'vmm.v4.images.ClusterEntityFilter',
        'cluster_status_list': 'list[vmm.v4.images.ClusterRateLimitStatus]',
        'unsupported_clusters_id_list': 'list[str]',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'rate_limit_kbps': 'rateLimitKbps',
        'cluster_entity_filter': 'clusterEntityFilter',
        'cluster_status_list': 'clusterStatusList',
        'unsupported_clusters_id_list': 'unsupportedClustersIdList',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, description=None, rate_limit_kbps=None, cluster_entity_filter=None, cluster_status_list=None, unsupported_clusters_id_list=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        """RateLimit - a model defined in Swagger
            
        """
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__name = None
        self.__description = None
        self.__rate_limit_kbps = None
        self.__cluster_entity_filter = None
        self.__cluster_status_list = None
        self.__unsupported_clusters_id_list = None
        self.discriminator = None
        self.__name = name
        if description is not None:
            self.__description = description
        self.__rate_limit_kbps = rate_limit_kbps
        self.__cluster_entity_filter = cluster_entity_filter
        if cluster_status_list is not None:
            self.__cluster_status_list = cluster_status_list
        if unsupported_clusters_id_list is not None:
            self.__unsupported_clusters_id_list = unsupported_clusters_id_list

    def _initialize_object_type(self):
        return 'vmm.v4.images.RateLimit'

    def _initialize_fq_object_type(self):
        return 'vmm.v4.r0.a1.images.RateLimit'


    @property
    def name(self):
        """`{ str }`
            \nName of the image rate limit policy.
        """ # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")  # noqa: E501

        self.__name = name

    @property
    def description(self):
        """`{ str }`
            \nA description for the current image rate limit.
        """ # noqa: E501
        return self.__description

    @description.setter
    def description(self, description):
        if description is not None and len(description) > 1000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1000`")  # noqa: E501

        self.__description = description

    @property
    def rate_limit_kbps(self):
        """`{ int }`
            \nNetwork bandwidth in KBps that the rate limited image operation can utilize.
        """ # noqa: E501
        return self.__rate_limit_kbps

    @rate_limit_kbps.setter
    def rate_limit_kbps(self, rate_limit_kbps):
        if rate_limit_kbps is None:
            raise ValueError("Invalid value for `rate_limit_kbps`, must not be `None`")  # noqa: E501
        if rate_limit_kbps is not None and rate_limit_kbps < 1:  # noqa: E501
            raise ValueError("Invalid value for `rate_limit_kbps`, must be a value greater than or equal to `1`")  # noqa: E501

        self.__rate_limit_kbps = rate_limit_kbps

    @property
    def cluster_entity_filter(self):
        """`{ vmm.v4.images.ClusterEntityFilter }`
            
        """ # noqa: E501
        return self.__cluster_entity_filter

    @cluster_entity_filter.setter
    def cluster_entity_filter(self, cluster_entity_filter):
        if cluster_entity_filter is None:
            raise ValueError("Invalid value for `cluster_entity_filter`, must not be `None`")  # noqa: E501

        self.__cluster_entity_filter = cluster_entity_filter

    @property
    def cluster_status_list(self):
        """`{ list[vmm.v4.images.ClusterRateLimitStatus] }`
            \nImage rate limit status of each affected cluster.
        """ # noqa: E501
        return self.__cluster_status_list

    @cluster_status_list.setter
    def cluster_status_list(self, cluster_status_list):

        self.__cluster_status_list = cluster_status_list

    @property
    def unsupported_clusters_id_list(self):
        """`{ list[str] }`
            \nList of cluster extIds matched by the policy which do not support image rate limits.
        """ # noqa: E501
        return self.__unsupported_clusters_id_list

    @unsupported_clusters_id_list.setter
    def unsupported_clusters_id_list(self, unsupported_clusters_id_list):

        self.__unsupported_clusters_id_list = unsupported_clusters_id_list

    def _to_dict(self, sanitize):
        """
        Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.
        :param bool sanitize
        """

        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize))
                    if hasattr(item[1], "_to_dict") else item,
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(RateLimit, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dict"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RateLimit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

