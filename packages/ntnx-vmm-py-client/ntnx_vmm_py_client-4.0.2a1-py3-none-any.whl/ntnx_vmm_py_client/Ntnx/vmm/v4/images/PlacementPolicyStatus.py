# coding: utf-8


"""
IGNORE:
    Nutanix Vmm Versioned APIs

    Manage the life-cycle of virtual machines hosted on Nutanix  # noqa: E501

    OpenAPI spec version: 4.0.2-alpha-1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from ntnx_vmm_py_client.Ntnx.vmm.v4.images.ClusterReference import ClusterReference  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.vmm.v4.images.ComplianceStatus import ComplianceStatus  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.vmm.v4.images.EnforcementMode import EnforcementMode  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.vmm.v4.images.PlacementPolicyReference import PlacementPolicyReference  # noqa: F401,E501

"""
IGNORE:
NOTE: This class is auto generated by the swagger code generator program.

Do not edit the class manually.
IGNORE
"""


class PlacementPolicyStatus(object):
    """PlacementPolicyStatus - a model defined in Swagger"""
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """ # noqa: E501
    swagger_types = {
        'ext_id': 'str',
        'compliance_status': 'vmm.v4.images.ComplianceStatus',
        'enforcement_mode': 'vmm.v4.images.EnforcementMode',
        'policy_clusters': 'list[vmm.v4.images.ClusterReference]',
        'enforced_clusters': 'list[vmm.v4.images.ClusterReference]',
        'conflicting_policies': 'list[vmm.v4.images.PlacementPolicyReference]',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'ext_id': 'extId',
        'compliance_status': 'complianceStatus',
        'enforcement_mode': 'enforcementMode',
        'policy_clusters': 'policyClusters',
        'enforced_clusters': 'enforcedClusters',
        'conflicting_policies': 'conflictingPolicies',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, ext_id=None, compliance_status=None, enforcement_mode=None, policy_clusters=None, enforced_clusters=None, conflicting_policies=None, *args, **kwargs):  # noqa: E501
        """PlacementPolicyStatus - a model defined in Swagger
            \nStatus of an image placement policy.
        """
        self.__ext_id = None
        self.__compliance_status = None
        self.__enforcement_mode = None
        self.__policy_clusters = None
        self.__enforced_clusters = None
        self.__conflicting_policies = None
        self.discriminator = None
        self.__ext_id = ext_id
        self.__compliance_status = compliance_status
        self.__enforcement_mode = enforcement_mode
        if policy_clusters is not None:
            self.__policy_clusters = policy_clusters
        if enforced_clusters is not None:
            self.__enforced_clusters = enforced_clusters
        if conflicting_policies is not None:
            self.__conflicting_policies = conflicting_policies
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'vmm.v4.images.PlacementPolicyStatus'

    def _initialize_fq_object_type(self):
        return 'vmm.v4.r0.a1.images.PlacementPolicyStatus'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fqObjectType": self._initialize_fq_object_type()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def ext_id(self):
        """`{ str }`
            
        """ # noqa: E501
        return self.__ext_id

    @ext_id.setter
    def ext_id(self, ext_id):
        if ext_id is None:
            raise ValueError("Invalid value for `ext_id`, must not be `None`")  # noqa: E501
        if ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__ext_id = ext_id

    @property
    def compliance_status(self):
        """`{ vmm.v4.images.ComplianceStatus }`
            
        """ # noqa: E501
        return self.__compliance_status

    @compliance_status.setter
    def compliance_status(self, compliance_status):
        if compliance_status is None:
            raise ValueError("Invalid value for `compliance_status`, must not be `None`")  # noqa: E501

        self.__compliance_status = compliance_status

    @property
    def enforcement_mode(self):
        """`{ vmm.v4.images.EnforcementMode }`
            
        """ # noqa: E501
        return self.__enforcement_mode

    @enforcement_mode.setter
    def enforcement_mode(self, enforcement_mode):
        if enforcement_mode is None:
            raise ValueError("Invalid value for `enforcement_mode`, must not be `None`")  # noqa: E501

        self.__enforcement_mode = enforcement_mode

    @property
    def policy_clusters(self):
        """`{ list[vmm.v4.images.ClusterReference] }`
            \nClusters details of the image location for the enforced placement policy.
        """ # noqa: E501
        return self.__policy_clusters

    @policy_clusters.setter
    def policy_clusters(self, policy_clusters):

        self.__policy_clusters = policy_clusters

    @property
    def enforced_clusters(self):
        """`{ list[vmm.v4.images.ClusterReference] }`
            \nClusters for the enforced placement policy.
        """ # noqa: E501
        return self.__enforced_clusters

    @enforced_clusters.setter
    def enforced_clusters(self, enforced_clusters):

        self.__enforced_clusters = enforced_clusters

    @property
    def conflicting_policies(self):
        """`{ list[vmm.v4.images.PlacementPolicyReference] }`
            \nPlacement policies that conflict with the current one.
        """ # noqa: E501
        return self.__conflicting_policies

    @conflicting_policies.setter
    def conflicting_policies(self, conflicting_policies):

        self.__conflicting_policies = conflicting_policies

    @property
    def _reserved(self):
        """`{ dict(str, object) }`
            
        """ # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """`{ str }`
            
        """ # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """`{ dict(str, object) }`
            
        """ # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """
        Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.
        :param bool sanitize
        """

        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize))
                    if hasattr(item[1], "_to_dict") else item,
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(PlacementPolicyStatus, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dict"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlacementPolicyStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

