# coding: utf-8


"""
IGNORE:
    Nutanix Vmm Versioned APIs

    Manage the life-cycle of virtual machines hosted on Nutanix  # noqa: E501

    OpenAPI spec version: 4.0.2-alpha-1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
import ntnx_vmm_py_client.Ntnx
from ntnx_vmm_py_client.Ntnx.OneOfvmm.v4.ahv.config.Vmboot_config import Vmboot_config  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.vmm.v4.ahv.config.ADSFVmStorageConfig import ADSFVmStorageConfig  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.vmm.v4.ahv.config.AvailabilityZoneReference import AvailabilityZoneReference  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.vmm.v4.ahv.config.CategoryReference import CategoryReference  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.vmm.v4.ahv.config.Cdrom import Cdrom  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.vmm.v4.ahv.config.ClusterReference import ClusterReference  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.vmm.v4.ahv.config.CpuFeature import CpuFeature  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.vmm.v4.ahv.config.Disk import Disk  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.vmm.v4.ahv.config.Gpu import Gpu  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.vmm.v4.ahv.config.GuestCustomization import GuestCustomization  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.vmm.v4.ahv.config.GuestTools import GuestTools  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.vmm.v4.ahv.config.HostReference import HostReference  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.vmm.v4.ahv.config.MachineType import MachineType  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.vmm.v4.ahv.config.Nic import Nic  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.vmm.v4.ahv.config.OwnershipInfo import OwnershipInfo  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.vmm.v4.ahv.config.PowerState import PowerState  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.vmm.v4.ahv.config.ProtectionPolicyState import ProtectionPolicyState  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.vmm.v4.ahv.config.ProtectionType import ProtectionType  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.vmm.v4.ahv.config.RecoveryPlanState import RecoveryPlanState  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.vmm.v4.ahv.config.SerialPort import SerialPort  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.vmm.v4.ahv.config.VmSourceReference import VmSourceReference  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.vmm.v4.ahv.config.VtpmConfig import VtpmConfig  # noqa: F401,E501

"""
IGNORE:
NOTE: This class is auto generated by the swagger code generator program.

Do not edit the class manually.
IGNORE
"""


class Vm(ExternalizableAbstractModel):
    """Vm - a model defined in Swagger"""
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """ # noqa: E501
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'create_time': 'datetime',
        'update_time': 'datetime',
        'source': 'vmm.v4.ahv.config.VmSourceReference',
        'num_sockets': 'int',
        'num_cores_per_socket': 'int',
        'num_threads_per_core': 'int',
        'num_vnuma_nodes': 'int',
        'memory_size_bytes': 'int',
        'vcpu_hard_pinning_enabled': 'bool',
        'cpu_passthrough_enabled': 'bool',
        'enabled_cpu_features': 'list[vmm.v4.ahv.config.CpuFeature]',
        'memory_overcommit_enabled': 'bool',
        'gpu_console_enabled': 'bool',
        'categories': 'list[vmm.v4.ahv.config.CategoryReference]',
        'ownership_info': 'vmm.v4.ahv.config.OwnershipInfo',
        'host': 'vmm.v4.ahv.config.HostReference',
        'cluster': 'vmm.v4.ahv.config.ClusterReference',
        'availability_zone': 'vmm.v4.ahv.config.AvailabilityZoneReference',
        'guest_customization': 'vmm.v4.ahv.config.GuestCustomization',
        'guest_tools': 'vmm.v4.ahv.config.GuestTools',
        'hardware_clock_timezone': 'str',
        'branding_enabled': 'bool',
        'boot_config': 'OneOfvmm.v4.ahv.config.Vmboot_config',
        'vga_console_enabled': 'bool',
        'machine_type': 'vmm.v4.ahv.config.MachineType',
        'power_state': 'vmm.v4.ahv.config.PowerState',
        'vtpm_config': 'vmm.v4.ahv.config.VtpmConfig',
        'is_agent_vm': 'bool',
        'live_migrate_capable': 'bool',
        'storage_config': 'vmm.v4.ahv.config.ADSFVmStorageConfig',
        'disks': 'list[vmm.v4.ahv.config.Disk]',
        'cdroms': 'list[vmm.v4.ahv.config.Cdrom]',
        'nics': 'list[vmm.v4.ahv.config.Nic]',
        'gpus': 'list[vmm.v4.ahv.config.Gpu]',
        'serial_ports': 'list[vmm.v4.ahv.config.SerialPort]',
        'protection_type': 'vmm.v4.ahv.config.ProtectionType',
        'protection_policy_state': 'vmm.v4.ahv.config.ProtectionPolicyState',
        'recovery_plan_states': 'list[vmm.v4.ahv.config.RecoveryPlanState]',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'create_time': 'createTime',
        'update_time': 'updateTime',
        'source': 'source',
        'num_sockets': 'numSockets',
        'num_cores_per_socket': 'numCoresPerSocket',
        'num_threads_per_core': 'numThreadsPerCore',
        'num_vnuma_nodes': 'numVnumaNodes',
        'memory_size_bytes': 'memorySizeBytes',
        'vcpu_hard_pinning_enabled': 'vcpuHardPinningEnabled',
        'cpu_passthrough_enabled': 'cpuPassthroughEnabled',
        'enabled_cpu_features': 'enabledCpuFeatures',
        'memory_overcommit_enabled': 'memoryOvercommitEnabled',
        'gpu_console_enabled': 'gpuConsoleEnabled',
        'categories': 'categories',
        'ownership_info': 'ownershipInfo',
        'host': 'host',
        'cluster': 'cluster',
        'availability_zone': 'availabilityZone',
        'guest_customization': 'guestCustomization',
        'guest_tools': 'guestTools',
        'hardware_clock_timezone': 'hardwareClockTimezone',
        'branding_enabled': 'brandingEnabled',
        'boot_config': 'bootConfig',
        'vga_console_enabled': 'vgaConsoleEnabled',
        'machine_type': 'machineType',
        'power_state': 'powerState',
        'vtpm_config': 'vtpmConfig',
        'is_agent_vm': 'isAgentVm',
        'live_migrate_capable': 'liveMigrateCapable',
        'storage_config': 'storageConfig',
        'disks': 'disks',
        'cdroms': 'cdroms',
        'nics': 'nics',
        'gpus': 'gpus',
        'serial_ports': 'serialPorts',
        'protection_type': 'protectionType',
        'protection_policy_state': 'protectionPolicyState',
        'recovery_plan_states': 'recoveryPlanStates',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, description=None, create_time=None, update_time=None, source=None, num_sockets=None, num_cores_per_socket=1, num_threads_per_core=1, num_vnuma_nodes=None, memory_size_bytes=None, vcpu_hard_pinning_enabled=None, cpu_passthrough_enabled=None, enabled_cpu_features=None, memory_overcommit_enabled=None, gpu_console_enabled=None, categories=None, ownership_info=None, host=None, cluster=None, availability_zone=None, guest_customization=None, guest_tools=None, hardware_clock_timezone='UTC', branding_enabled=True, boot_config=None, vga_console_enabled=True, machine_type=None, power_state=None, vtpm_config=None, is_agent_vm=None, live_migrate_capable=None, storage_config=None, disks=None, cdroms=None, nics=None, gpus=None, serial_ports=None, protection_type=None, protection_policy_state=None, recovery_plan_states=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        """Vm - a model defined in Swagger
            \nVM configuration.
        """
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__name = None
        self.__description = None
        self.__create_time = None
        self.__update_time = None
        self.__source = None
        self.__num_sockets = None
        self.__num_cores_per_socket = None
        self.__num_threads_per_core = None
        self.__num_vnuma_nodes = None
        self.__memory_size_bytes = None
        self.__vcpu_hard_pinning_enabled = None
        self.__cpu_passthrough_enabled = None
        self.__enabled_cpu_features = None
        self.__memory_overcommit_enabled = None
        self.__gpu_console_enabled = None
        self.__categories = None
        self.__ownership_info = None
        self.__host = None
        self.__cluster = None
        self.__availability_zone = None
        self.__guest_customization = None
        self.__guest_tools = None
        self.__hardware_clock_timezone = None
        self.__branding_enabled = None
        self.__boot_config = None
        self.__vga_console_enabled = None
        self.__machine_type = None
        self.__power_state = None
        self.__vtpm_config = None
        self.__is_agent_vm = None
        self.__live_migrate_capable = None
        self.__storage_config = None
        self.__disks = None
        self.__cdroms = None
        self.__nics = None
        self.__gpus = None
        self.__serial_ports = None
        self.__protection_type = None
        self.__protection_policy_state = None
        self.__recovery_plan_states = None
        self.discriminator = None
        if name is not None:
            self.__name = name
        if description is not None:
            self.__description = description
        if create_time is not None:
            self.__create_time = create_time
        if update_time is not None:
            self.__update_time = update_time
        if source is not None:
            self.__source = source
        if num_sockets is not None:
            self.__num_sockets = num_sockets
        if num_cores_per_socket is not None:
            self.__num_cores_per_socket = num_cores_per_socket
        if num_threads_per_core is not None:
            self.__num_threads_per_core = num_threads_per_core
        if num_vnuma_nodes is not None:
            self.__num_vnuma_nodes = num_vnuma_nodes
        if memory_size_bytes is not None:
            self.__memory_size_bytes = memory_size_bytes
        if vcpu_hard_pinning_enabled is not None:
            self.__vcpu_hard_pinning_enabled = vcpu_hard_pinning_enabled
        if cpu_passthrough_enabled is not None:
            self.__cpu_passthrough_enabled = cpu_passthrough_enabled
        if enabled_cpu_features is not None:
            self.__enabled_cpu_features = enabled_cpu_features
        if memory_overcommit_enabled is not None:
            self.__memory_overcommit_enabled = memory_overcommit_enabled
        if gpu_console_enabled is not None:
            self.__gpu_console_enabled = gpu_console_enabled
        if categories is not None:
            self.__categories = categories
        if ownership_info is not None:
            self.__ownership_info = ownership_info
        if host is not None:
            self.__host = host
        if cluster is not None:
            self.__cluster = cluster
        if availability_zone is not None:
            self.__availability_zone = availability_zone
        if guest_customization is not None:
            self.__guest_customization = guest_customization
        if guest_tools is not None:
            self.__guest_tools = guest_tools
        if hardware_clock_timezone is not None:
            self.__hardware_clock_timezone = hardware_clock_timezone
        if branding_enabled is not None:
            self.__branding_enabled = branding_enabled
        if boot_config is not None:
            self.__boot_config = boot_config
        if vga_console_enabled is not None:
            self.__vga_console_enabled = vga_console_enabled
        if machine_type is not None:
            self.__machine_type = machine_type
        if power_state is not None:
            self.__power_state = power_state
        if vtpm_config is not None:
            self.__vtpm_config = vtpm_config
        if is_agent_vm is not None:
            self.__is_agent_vm = is_agent_vm
        if live_migrate_capable is not None:
            self.__live_migrate_capable = live_migrate_capable
        if storage_config is not None:
            self.__storage_config = storage_config
        if disks is not None:
            self.__disks = disks
        if cdroms is not None:
            self.__cdroms = cdroms
        if nics is not None:
            self.__nics = nics
        if gpus is not None:
            self.__gpus = gpus
        if serial_ports is not None:
            self.__serial_ports = serial_ports
        if protection_type is not None:
            self.__protection_type = protection_type
        if protection_policy_state is not None:
            self.__protection_policy_state = protection_policy_state
        if recovery_plan_states is not None:
            self.__recovery_plan_states = recovery_plan_states

    def _initialize_object_type(self):
        return 'vmm.v4.ahv.config.Vm'

    def _initialize_fq_object_type(self):
        return 'vmm.v4.r0.a1.ahv.config.Vm'


    @property
    def name(self):
        """`{ str }`
            \nVM name.
        """ # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is not None and len(name) > 80:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `80`")  # noqa: E501

        self.__name = name

    @property
    def description(self):
        """`{ str }`
            \nVM description.
        """ # noqa: E501
        return self.__description

    @description.setter
    def description(self, description):

        self.__description = description

    @property
    def create_time(self):
        """`{ datetime }`
            \nVM creation time.
        """ # noqa: E501
        return self.__create_time

    @create_time.setter
    def create_time(self, create_time):

        self.__create_time = create_time

    @property
    def update_time(self):
        """`{ datetime }`
            \nVM last updated time.
        """ # noqa: E501
        return self.__update_time

    @update_time.setter
    def update_time(self, update_time):

        self.__update_time = update_time

    @property
    def source(self):
        """`{ vmm.v4.ahv.config.VmSourceReference }`
            
        """ # noqa: E501
        return self.__source

    @source.setter
    def source(self, source):

        self.__source = source

    @property
    def num_sockets(self):
        """`{ int }`
            \nNumber of vCPU sockets.
        """ # noqa: E501
        return self.__num_sockets

    @num_sockets.setter
    def num_sockets(self, num_sockets):
        if num_sockets is not None and num_sockets < 1:  # noqa: E501
            raise ValueError("Invalid value for `num_sockets`, must be a value greater than or equal to `1`")  # noqa: E501

        self.__num_sockets = num_sockets

    @property
    def num_cores_per_socket(self):
        """`{ int }`
            \nNumber of cores per socket.
        """ # noqa: E501
        return self.__num_cores_per_socket

    @num_cores_per_socket.setter
    def num_cores_per_socket(self, num_cores_per_socket):
        if num_cores_per_socket is not None and num_cores_per_socket < 1:  # noqa: E501
            raise ValueError("Invalid value for `num_cores_per_socket`, must be a value greater than or equal to `1`")  # noqa: E501

        self.__num_cores_per_socket = num_cores_per_socket

    @property
    def num_threads_per_core(self):
        """`{ int }`
            \nNumber of threads per core.
        """ # noqa: E501
        return self.__num_threads_per_core

    @num_threads_per_core.setter
    def num_threads_per_core(self, num_threads_per_core):
        if num_threads_per_core is not None and num_threads_per_core < 1:  # noqa: E501
            raise ValueError("Invalid value for `num_threads_per_core`, must be a value greater than or equal to `1`")  # noqa: E501

        self.__num_threads_per_core = num_threads_per_core

    @property
    def num_vnuma_nodes(self):
        """`{ int }`
            \nNumber of vNUMA nodes. 0 means vNUMA is disabled.
        """ # noqa: E501
        return self.__num_vnuma_nodes

    @num_vnuma_nodes.setter
    def num_vnuma_nodes(self, num_vnuma_nodes):

        self.__num_vnuma_nodes = num_vnuma_nodes

    @property
    def memory_size_bytes(self):
        """`{ int }`
            \nMemory size in bytes.
        """ # noqa: E501
        return self.__memory_size_bytes

    @memory_size_bytes.setter
    def memory_size_bytes(self, memory_size_bytes):
        if memory_size_bytes is not None and memory_size_bytes < 1:  # noqa: E501
            raise ValueError("Invalid value for `memory_size_bytes`, must be a value greater than or equal to `1`")  # noqa: E501

        self.__memory_size_bytes = memory_size_bytes

    @property
    def vcpu_hard_pinning_enabled(self):
        """`{ bool }`
            \nIndicates whether the vCPUs should be hard pinned to specific pCPUs or not.
        """ # noqa: E501
        return self.__vcpu_hard_pinning_enabled

    @vcpu_hard_pinning_enabled.setter
    def vcpu_hard_pinning_enabled(self, vcpu_hard_pinning_enabled):

        self.__vcpu_hard_pinning_enabled = vcpu_hard_pinning_enabled

    @property
    def cpu_passthrough_enabled(self):
        """`{ bool }`
            \nIndicates whether to passthrough the host CPU features to the guest or not. Enabling this will make VM incapable of live migration.
        """ # noqa: E501
        return self.__cpu_passthrough_enabled

    @cpu_passthrough_enabled.setter
    def cpu_passthrough_enabled(self, cpu_passthrough_enabled):

        self.__cpu_passthrough_enabled = cpu_passthrough_enabled

    @property
    def enabled_cpu_features(self):
        """`{ list[vmm.v4.ahv.config.CpuFeature] }`
            \nThe list of additional CPU features to be enabled. HardwareVirtualization: Indicates whether hardware assisted virtualization should be enabled for the Guest OS or not. Once enabled, the Guest OS can deploy a nested hypervisor.
        """ # noqa: E501
        return self.__enabled_cpu_features

    @enabled_cpu_features.setter
    def enabled_cpu_features(self, enabled_cpu_features):

        self.__enabled_cpu_features = enabled_cpu_features

    @property
    def memory_overcommit_enabled(self):
        """`{ bool }`
            \nIndicates whether the memory overcommit feature should be enabled for the VM or not. If enabled, parts of the VM memory may reside outside of the hypervisor physical memory. Once enabled, it should be expected that the VM may suffer performance degradation.
        """ # noqa: E501
        return self.__memory_overcommit_enabled

    @memory_overcommit_enabled.setter
    def memory_overcommit_enabled(self, memory_overcommit_enabled):

        self.__memory_overcommit_enabled = memory_overcommit_enabled

    @property
    def gpu_console_enabled(self):
        """`{ bool }`
            \nIndicates whether the vGPU console is enabled or not.
        """ # noqa: E501
        return self.__gpu_console_enabled

    @gpu_console_enabled.setter
    def gpu_console_enabled(self, gpu_console_enabled):

        self.__gpu_console_enabled = gpu_console_enabled

    @property
    def categories(self):
        """`{ list[vmm.v4.ahv.config.CategoryReference] }`
            \nCategories for the VM.
        """ # noqa: E501
        return self.__categories

    @categories.setter
    def categories(self, categories):

        self.__categories = categories

    @property
    def ownership_info(self):
        """`{ vmm.v4.ahv.config.OwnershipInfo }`
            
        """ # noqa: E501
        return self.__ownership_info

    @ownership_info.setter
    def ownership_info(self, ownership_info):

        self.__ownership_info = ownership_info

    @property
    def host(self):
        """`{ vmm.v4.ahv.config.HostReference }`
            
        """ # noqa: E501
        return self.__host

    @host.setter
    def host(self, host):

        self.__host = host

    @property
    def cluster(self):
        """`{ vmm.v4.ahv.config.ClusterReference }`
            
        """ # noqa: E501
        return self.__cluster

    @cluster.setter
    def cluster(self, cluster):

        self.__cluster = cluster

    @property
    def availability_zone(self):
        """`{ vmm.v4.ahv.config.AvailabilityZoneReference }`
            
        """ # noqa: E501
        return self.__availability_zone

    @availability_zone.setter
    def availability_zone(self, availability_zone):

        self.__availability_zone = availability_zone

    @property
    def guest_customization(self):
        """`{ vmm.v4.ahv.config.GuestCustomization }`
            
        """ # noqa: E501
        return self.__guest_customization

    @guest_customization.setter
    def guest_customization(self, guest_customization):

        self.__guest_customization = guest_customization

    @property
    def guest_tools(self):
        """`{ vmm.v4.ahv.config.GuestTools }`
            
        """ # noqa: E501
        return self.__guest_tools

    @guest_tools.setter
    def guest_tools(self, guest_tools):

        self.__guest_tools = guest_tools

    @property
    def hardware_clock_timezone(self):
        """`{ str }`
            \nVM hardware clock timezone in IANA TZDB format (America/Los_Angeles).
        """ # noqa: E501
        return self.__hardware_clock_timezone

    @hardware_clock_timezone.setter
    def hardware_clock_timezone(self, hardware_clock_timezone):
        if hardware_clock_timezone is not None and len(hardware_clock_timezone) > 64:
            raise ValueError("Invalid value for `hardware_clock_timezone`, length must be less than or equal to `64`")  # noqa: E501

        self.__hardware_clock_timezone = hardware_clock_timezone

    @property
    def branding_enabled(self):
        """`{ bool }`
            \nIndicates whether to remove AHV branding from VM firmware tables or not.
        """ # noqa: E501
        return self.__branding_enabled

    @branding_enabled.setter
    def branding_enabled(self, branding_enabled):

        self.__branding_enabled = branding_enabled

    @property
    def boot_config(self):
        """`{ vmm.v4.ahv.config.LegacyBoot | vmm.v4.ahv.config.UefiBoot }`
            \nIndicates the order of device types in which the VM should try to boot from. If the boot device order is not provided the system will decide an appropriate boot device order.
        """ # noqa: E501
        return self.__boot_config

    @boot_config.setter
    def boot_config(self, boot_config):

        self.__boot_config = boot_config

    @property
    def vga_console_enabled(self):
        """`{ bool }`
            \nIndicates whether the VGA console should be disabled or not.
        """ # noqa: E501
        return self.__vga_console_enabled

    @vga_console_enabled.setter
    def vga_console_enabled(self, vga_console_enabled):

        self.__vga_console_enabled = vga_console_enabled

    @property
    def machine_type(self):
        """`{ vmm.v4.ahv.config.MachineType }`
            
        """ # noqa: E501
        return self.__machine_type

    @machine_type.setter
    def machine_type(self, machine_type):

        self.__machine_type = machine_type

    @property
    def power_state(self):
        """`{ vmm.v4.ahv.config.PowerState }`
            
        """ # noqa: E501
        return self.__power_state

    @power_state.setter
    def power_state(self, power_state):

        self.__power_state = power_state

    @property
    def vtpm_config(self):
        """`{ vmm.v4.ahv.config.VtpmConfig }`
            
        """ # noqa: E501
        return self.__vtpm_config

    @vtpm_config.setter
    def vtpm_config(self, vtpm_config):

        self.__vtpm_config = vtpm_config

    @property
    def is_agent_vm(self):
        """`{ bool }`
            \nIndicates whether the VM is an agent VM or not. When their host enters maintenance mode, once the normal VMs are evacuated, the agent VMs are powered off. When the host is restored, agent VMs are powered on before the normal VMs are restored. In other words, agent VMs cannot be HA-protected or live migrated.
        """ # noqa: E501
        return self.__is_agent_vm

    @is_agent_vm.setter
    def is_agent_vm(self, is_agent_vm):

        self.__is_agent_vm = is_agent_vm

    @property
    def live_migrate_capable(self):
        """`{ bool }`
            \nIndicates whether the VM is capable of live migrating to another host or not, based on its configuration.
        """ # noqa: E501
        return self.__live_migrate_capable

    @live_migrate_capable.setter
    def live_migrate_capable(self, live_migrate_capable):

        self.__live_migrate_capable = live_migrate_capable

    @property
    def storage_config(self):
        """`{ vmm.v4.ahv.config.ADSFVmStorageConfig }`
            
        """ # noqa: E501
        return self.__storage_config

    @storage_config.setter
    def storage_config(self, storage_config):

        self.__storage_config = storage_config

    @property
    def disks(self):
        """`{ list[vmm.v4.ahv.config.Disk] }`
            \nDisks attached to the VM.
        """ # noqa: E501
        return self.__disks

    @disks.setter
    def disks(self, disks):

        self.__disks = disks

    @property
    def cdroms(self):
        """`{ list[vmm.v4.ahv.config.Cdrom] }`
            \nCD-ROMs attached to the VM.
        """ # noqa: E501
        return self.__cdroms

    @cdroms.setter
    def cdroms(self, cdroms):

        self.__cdroms = cdroms

    @property
    def nics(self):
        """`{ list[vmm.v4.ahv.config.Nic] }`
            \nNICs attached to the VM.
        """ # noqa: E501
        return self.__nics

    @nics.setter
    def nics(self, nics):

        self.__nics = nics

    @property
    def gpus(self):
        """`{ list[vmm.v4.ahv.config.Gpu] }`
            \nGPUs attached to the VM.
        """ # noqa: E501
        return self.__gpus

    @gpus.setter
    def gpus(self, gpus):

        self.__gpus = gpus

    @property
    def serial_ports(self):
        """`{ list[vmm.v4.ahv.config.SerialPort] }`
            \nSerial ports configured on the VM.
        """ # noqa: E501
        return self.__serial_ports

    @serial_ports.setter
    def serial_ports(self, serial_ports):

        self.__serial_ports = serial_ports

    @property
    def protection_type(self):
        """`{ vmm.v4.ahv.config.ProtectionType }`
            
        """ # noqa: E501
        return self.__protection_type

    @protection_type.setter
    def protection_type(self, protection_type):

        self.__protection_type = protection_type

    @property
    def protection_policy_state(self):
        """`{ vmm.v4.ahv.config.ProtectionPolicyState }`
            
        """ # noqa: E501
        return self.__protection_policy_state

    @protection_policy_state.setter
    def protection_policy_state(self, protection_policy_state):

        self.__protection_policy_state = protection_policy_state

    @property
    def recovery_plan_states(self):
        """`{ list[vmm.v4.ahv.config.RecoveryPlanState] }`
            \nStatus of the recovery plans associated with the VM.
        """ # noqa: E501
        return self.__recovery_plan_states

    @recovery_plan_states.setter
    def recovery_plan_states(self, recovery_plan_states):

        self.__recovery_plan_states = recovery_plan_states

    def _to_dict(self, sanitize):
        """
        Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.
        :param bool sanitize
        """

        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if attr_type.startswith('OneOf'):
                type = getattr(ntnx_vmm_py_client.Ntnx, attr_type.split('.')[-1])
                if hasattr(type, 'get_discriminator_from_object'):
                    result[type.ONE_OF_ITEM_DISCRIMINATOR_NAME] = type.get_discriminator_from_object(value)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize))
                    if hasattr(item[1], "_to_dict") else item,
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(Vm, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dict"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Vm):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

