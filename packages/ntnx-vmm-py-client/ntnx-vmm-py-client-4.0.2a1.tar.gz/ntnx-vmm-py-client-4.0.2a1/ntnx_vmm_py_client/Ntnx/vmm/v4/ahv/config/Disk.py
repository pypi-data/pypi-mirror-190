# coding: utf-8


"""
IGNORE:
    Nutanix Vmm Versioned APIs

    Manage the life-cycle of virtual machines hosted on Nutanix  # noqa: E501

    OpenAPI spec version: 4.0.2-alpha-1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
import ntnx_vmm_py_client.Ntnx
from ntnx_vmm_py_client.Ntnx.OneOfvmm.v4.ahv.config.Diskbacking_info import Diskbacking_info  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.vmm.v4.ahv.config.DiskAddress import DiskAddress  # noqa: F401,E501

"""
IGNORE:
NOTE: This class is auto generated by the swagger code generator program.

Do not edit the class manually.
IGNORE
"""


class Disk(ExternalizableAbstractModel):
    """Disk - a model defined in Swagger"""
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """ # noqa: E501
    swagger_types = {
        'disk_address': 'vmm.v4.ahv.config.DiskAddress',
        'scsi_passthrough_enabled': 'bool',
        'backing_info': 'OneOfvmm.v4.ahv.config.Diskbacking_info',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'disk_address': 'diskAddress',
        'scsi_passthrough_enabled': 'scsiPassthroughEnabled',
        'backing_info': 'backingInfo',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, disk_address=None, scsi_passthrough_enabled=True, backing_info=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        """Disk - a model defined in Swagger
            \nVirtual Machine disk (VM disk).
        """
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__disk_address = None
        self.__scsi_passthrough_enabled = None
        self.__backing_info = None
        self.discriminator = None
        if disk_address is not None:
            self.__disk_address = disk_address
        if scsi_passthrough_enabled is not None:
            self.__scsi_passthrough_enabled = scsi_passthrough_enabled
        if backing_info is not None:
            self.__backing_info = backing_info

    def _initialize_object_type(self):
        return 'vmm.v4.ahv.config.Disk'

    def _initialize_fq_object_type(self):
        return 'vmm.v4.r0.a1.ahv.config.Disk'


    @property
    def disk_address(self):
        """`{ vmm.v4.ahv.config.DiskAddress }`
            
        """ # noqa: E501
        return self.__disk_address

    @disk_address.setter
    def disk_address(self, disk_address):

        self.__disk_address = disk_address

    @property
    def scsi_passthrough_enabled(self):
        """`{ bool }`
            \nIndicates whether the SCSI passthrough (true) is used or not (false).
        """ # noqa: E501
        return self.__scsi_passthrough_enabled

    @scsi_passthrough_enabled.setter
    def scsi_passthrough_enabled(self, scsi_passthrough_enabled):

        self.__scsi_passthrough_enabled = scsi_passthrough_enabled

    @property
    def backing_info(self):
        """`{ vmm.v4.ahv.config.VmDisk | vmm.v4.ahv.config.ADSFVolumeGroupReference }`
            \nSupporting storage to create virtual disk on.
        """ # noqa: E501
        return self.__backing_info

    @backing_info.setter
    def backing_info(self, backing_info):

        self.__backing_info = backing_info

    def _to_dict(self, sanitize):
        """
        Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.
        :param bool sanitize
        """

        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if attr_type.startswith('OneOf'):
                type = getattr(ntnx_vmm_py_client.Ntnx, attr_type.split('.')[-1])
                if hasattr(type, 'get_discriminator_from_object'):
                    result[type.ONE_OF_ITEM_DISCRIMINATOR_NAME] = type.get_discriminator_from_object(value)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize))
                    if hasattr(item[1], "_to_dict") else item,
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(Disk, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dict"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Disk):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

