# coding: utf-8


"""
IGNORE:
    Nutanix Vmm Versioned APIs

    Manage the life-cycle of virtual machines hosted on Nutanix  # noqa: E501

    OpenAPI spec version: 4.0.2-alpha-1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
import ntnx_vmm_py_client.Ntnx
from ntnx_vmm_py_client.Ntnx.OneOfvmm.v4.images.Imagesource import Imagesource  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.vmm.v4.images.CategoryReference import CategoryReference  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.vmm.v4.images.ClusterReference import ClusterReference  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.vmm.v4.images.ImageChecksum import ImageChecksum  # noqa: F401,E501
from ntnx_vmm_py_client.Ntnx.vmm.v4.images.ImageType import ImageType  # noqa: F401,E501

"""
IGNORE:
NOTE: This class is auto generated by the swagger code generator program.

Do not edit the class manually.
IGNORE
"""


class Image(ExternalizableAbstractModel):
    """Image - a model defined in Swagger"""
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """ # noqa: E501
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'type': 'vmm.v4.images.ImageType',
        'checksum': 'vmm.v4.images.ImageChecksum',
        'size_bytes': 'int',
        'source': 'OneOfvmm.v4.images.Imagesource',
        'categories': 'list[vmm.v4.images.CategoryReference]',
        'initial_cluster_locations': 'list[vmm.v4.images.ClusterReference]',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'type': 'type',
        'checksum': 'checksum',
        'size_bytes': 'sizeBytes',
        'source': 'source',
        'categories': 'categories',
        'initial_cluster_locations': 'initialClusterLocations',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, description=None, type=None, checksum=None, size_bytes=None, source=None, categories=None, initial_cluster_locations=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        """Image - a model defined in Swagger
            
        """
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__name = None
        self.__description = None
        self.__type = None
        self.__checksum = None
        self.__size_bytes = None
        self.__source = None
        self.__categories = None
        self.__initial_cluster_locations = None
        self.discriminator = None
        self.__name = name
        if description is not None:
            self.__description = description
        self.__type = type
        if checksum is not None:
            self.__checksum = checksum
        if size_bytes is not None:
            self.__size_bytes = size_bytes
        if source is not None:
            self.__source = source
        if categories is not None:
            self.__categories = categories
        if initial_cluster_locations is not None:
            self.__initial_cluster_locations = initial_cluster_locations

    def _initialize_object_type(self):
        return 'vmm.v4.images.Image'

    def _initialize_fq_object_type(self):
        return 'vmm.v4.r0.a1.images.Image'


    @property
    def name(self):
        """`{ str }`
            
        """ # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 256:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self.__name = name

    @property
    def description(self):
        """`{ str }`
            
        """ # noqa: E501
        return self.__description

    @description.setter
    def description(self, description):
        if description is not None and len(description) > 1000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1000`")  # noqa: E501

        self.__description = description

    @property
    def type(self):
        """`{ vmm.v4.images.ImageType }`
            
        """ # noqa: E501
        return self.__type

    @type.setter
    def type(self, type):
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self.__type = type

    @property
    def checksum(self):
        """`{ vmm.v4.images.ImageChecksum }`
            
        """ # noqa: E501
        return self.__checksum

    @checksum.setter
    def checksum(self, checksum):

        self.__checksum = checksum

    @property
    def size_bytes(self):
        """`{ int }`
            \nThe size in bytes of an image file.
        """ # noqa: E501
        return self.__size_bytes

    @size_bytes.setter
    def size_bytes(self, size_bytes):

        self.__size_bytes = size_bytes

    @property
    def source(self):
        """`{ vmm.v4.images.UrlSource | vmm.v4.images.VmDiskSource }`
            \nThe source of an image. It can be a VM disk or a URL. If not mentioned, the image will be inactive until a file is uploaded for it. 
        """ # noqa: E501
        return self.__source

    @source.setter
    def source(self, source):

        self.__source = source

    @property
    def categories(self):
        """`{ list[vmm.v4.images.CategoryReference] }`
            \nCategories for an image.
        """ # noqa: E501
        return self.__categories

    @categories.setter
    def categories(self, categories):

        self.__categories = categories

    @property
    def initial_cluster_locations(self):
        """`{ list[vmm.v4.images.ClusterReference] }`
            \nCluster details for the image location.
        """ # noqa: E501
        return self.__initial_cluster_locations

    @initial_cluster_locations.setter
    def initial_cluster_locations(self, initial_cluster_locations):

        self.__initial_cluster_locations = initial_cluster_locations

    def _to_dict(self, sanitize):
        """
        Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.
        :param bool sanitize
        """

        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if attr_type.startswith('OneOf'):
                type = getattr(ntnx_vmm_py_client.Ntnx, attr_type.split('.')[-1])
                if hasattr(type, 'get_discriminator_from_object'):
                    result[type.ONE_OF_ITEM_DISCRIMINATOR_NAME] = type.get_discriminator_from_object(value)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize))
                    if hasattr(item[1], "_to_dict") else item,
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(Image, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dict"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Image):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

