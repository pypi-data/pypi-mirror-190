# coding: utf-8


"""
IGNORE:
    Nutanix Iam Versioned APIs

    Identity and Access Management in Nutanix cluster.  # noqa: E501

    OpenAPI spec version: 4.0.2-alpha-1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from ntnx_iam_py_client.Ntnx.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_iam_py_client.Ntnx.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_iam_py_client.Ntnx.iam.v4.authn.DirectoryType import DirectoryType  # noqa: F401,E501
from ntnx_iam_py_client.Ntnx.iam.v4.authn.DsServiceAccount import DsServiceAccount  # noqa: F401,E501
from ntnx_iam_py_client.Ntnx.iam.v4.authn.GroupSearchType import GroupSearchType  # noqa: F401,E501
from ntnx_iam_py_client.Ntnx.iam.v4.authn.OpenLdapConfig import OpenLdapConfig  # noqa: F401,E501

"""
IGNORE:
NOTE: This class is auto generated by the swagger code generator program.

Do not edit the class manually.
IGNORE
"""


class DirectoryService(ExternalizableAbstractModel):
    """DirectoryService - a model defined in Swagger"""
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """ # noqa: E501
    swagger_types = {
        'name': 'str',
        'url': 'str',
        'domain_name': 'str',
        'directory_type': 'iam.v4.authn.DirectoryType',
        'service_account': 'iam.v4.authn.DsServiceAccount',
        'open_ldap_configuration': 'iam.v4.authn.OpenLdapConfig',
        'group_search_type': 'iam.v4.authn.GroupSearchType',
        'white_listed_groups': 'list[str]',
        'created_time': 'datetime',
        'last_updated_time': 'datetime',
        'created_by': 'str',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'url': 'url',
        'domain_name': 'domainName',
        'directory_type': 'directoryType',
        'service_account': 'serviceAccount',
        'open_ldap_configuration': 'openLdapConfiguration',
        'group_search_type': 'groupSearchType',
        'white_listed_groups': 'whiteListedGroups',
        'created_time': 'createdTime',
        'last_updated_time': 'lastUpdatedTime',
        'created_by': 'createdBy',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, url=None, domain_name=None, directory_type=None, service_account=None, open_ldap_configuration=None, group_search_type=None, white_listed_groups=None, created_time=None, last_updated_time=None, created_by=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        """DirectoryService - a model defined in Swagger
            \nInformation of a directory service
        """
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__name = None
        self.__url = None
        self.__domain_name = None
        self.__directory_type = None
        self.__service_account = None
        self.__open_ldap_configuration = None
        self.__group_search_type = None
        self.__white_listed_groups = None
        self.__created_time = None
        self.__last_updated_time = None
        self.__created_by = None
        self.discriminator = None
        self.__name = name
        self.__url = url
        self.__domain_name = domain_name
        self.__directory_type = directory_type
        self.__service_account = service_account
        if open_ldap_configuration is not None:
            self.__open_ldap_configuration = open_ldap_configuration
        if group_search_type is not None:
            self.__group_search_type = group_search_type
        if white_listed_groups is not None:
            self.__white_listed_groups = white_listed_groups
        if created_time is not None:
            self.__created_time = created_time
        if last_updated_time is not None:
            self.__last_updated_time = last_updated_time
        if created_by is not None:
            self.__created_by = created_by

    def _initialize_object_type(self):
        return 'iam.v4.authn.DirectoryService'

    def _initialize_fq_object_type(self):
        return 'iam.v4.r0.a1.authn.DirectoryService'


    @property
    def name(self):
        """`{ str }`
            \nName for the directory service
        """ # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self.__name = name

    @property
    def url(self):
        """`{ str }`
            \nURL for the directory service
        """ # noqa: E501
        return self.__url

    @url.setter
    def url(self, url):
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501
        if url is not None and len(url) > 2000:
            raise ValueError("Invalid value for `url`, length must be less than or equal to `2000`")  # noqa: E501
        if url is not None and len(url) < 3:
            raise ValueError("Invalid value for `url`, length must be greater than or equal to `3`")  # noqa: E501

        self.__url = url

    @property
    def domain_name(self):
        """`{ str }`
            \nDomain name for the directory service
        """ # noqa: E501
        return self.__domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        if domain_name is None:
            raise ValueError("Invalid value for `domain_name`, must not be `None`")  # noqa: E501
        if domain_name is not None and len(domain_name) > 255:
            raise ValueError("Invalid value for `domain_name`, length must be less than or equal to `255`")  # noqa: E501
        if domain_name is not None and len(domain_name) < 3:
            raise ValueError("Invalid value for `domain_name`, length must be greater than or equal to `3`")  # noqa: E501

        self.__domain_name = domain_name

    @property
    def directory_type(self):
        """`{ iam.v4.authn.DirectoryType }`
            
        """ # noqa: E501
        return self.__directory_type

    @directory_type.setter
    def directory_type(self, directory_type):
        if directory_type is None:
            raise ValueError("Invalid value for `directory_type`, must not be `None`")  # noqa: E501

        self.__directory_type = directory_type

    @property
    def service_account(self):
        """`{ iam.v4.authn.DsServiceAccount }`
            
        """ # noqa: E501
        return self.__service_account

    @service_account.setter
    def service_account(self, service_account):
        if service_account is None:
            raise ValueError("Invalid value for `service_account`, must not be `None`")  # noqa: E501

        self.__service_account = service_account

    @property
    def open_ldap_configuration(self):
        """`{ iam.v4.authn.OpenLdapConfig }`
            
        """ # noqa: E501
        return self.__open_ldap_configuration

    @open_ldap_configuration.setter
    def open_ldap_configuration(self, open_ldap_configuration):

        self.__open_ldap_configuration = open_ldap_configuration

    @property
    def group_search_type(self):
        """`{ iam.v4.authn.GroupSearchType }`
            
        """ # noqa: E501
        return self.__group_search_type

    @group_search_type.setter
    def group_search_type(self, group_search_type):

        self.__group_search_type = group_search_type

    @property
    def white_listed_groups(self):
        """`{ list[str] }`
            \nList of allowed user groups for the directory service
        """ # noqa: E501
        return self.__white_listed_groups

    @white_listed_groups.setter
    def white_listed_groups(self, white_listed_groups):

        self.__white_listed_groups = white_listed_groups

    @property
    def created_time(self):
        """`{ datetime }`
            \nCreation time of the directory service
        """ # noqa: E501
        return self.__created_time

    @created_time.setter
    def created_time(self, created_time):

        self.__created_time = created_time

    @property
    def last_updated_time(self):
        """`{ datetime }`
            \nLast updated time of the directory service
        """ # noqa: E501
        return self.__last_updated_time

    @last_updated_time.setter
    def last_updated_time(self, last_updated_time):

        self.__last_updated_time = last_updated_time

    @property
    def created_by(self):
        """`{ str }`
            \nUser or service who created the directory service
        """ # noqa: E501
        return self.__created_by

    @created_by.setter
    def created_by(self, created_by):

        self.__created_by = created_by

    def _to_dict(self, sanitize):
        """
        Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.
        :param bool sanitize
        """

        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize))
                    if hasattr(item[1], "_to_dict") else item,
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(DirectoryService, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dict"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DirectoryService):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

