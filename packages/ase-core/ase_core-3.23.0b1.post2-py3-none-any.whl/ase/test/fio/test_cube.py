import re
import tempfile

import numpy as np
import numpy.testing as npt

from ase import Atoms
from ase.units import Bohr
from ase.io.cube import write_cube, read_cube, read_cube_data


# Have some real data to write to a file
file_content = """Generated by octopus maya
 git: 5b62360b6ec96e210d8ebbbd817bea74da18dfa8 build: \
Fri Oct  8 14:58:44 CEST 2021
     5   -3.779452   -1.889726   -3.779452
     5    1.889726    0.000000    0.000000
     3    0.000000    1.889726    0.000000
     5    0.000000    0.000000    0.000000
     6    0.000000    0.000000    0.000000    0.000000
     1    0.000000    0.000000    0.000000    2.057912
     1    0.000000    1.940220    0.000000   -0.685971
     1    0.000000   -0.970110   -1.680269   -0.685971
     1    0.000000   -0.970110    1.680269   -0.685971
   0.000000E+00  0.000000E+00  0.000000E+00  0.000000E+00  0.000000E+00
   0.000000E+00  0.000000E+00  0.000000E+00  0.000000E+00  0.000000E+00
   0.000000E+00  0.000000E+00  0.000000E+00  0.000000E+00  0.000000E+00
   0.000000E+00  0.284545E-01  0.706656E-01  0.000000E+00  0.000000E+00
   0.000000E+00  0.000000E+00  0.391115E-01  0.000000E+00  0.000000E+00
   0.000000E+00  0.284545E-01  0.706656E-01  0.000000E+00  0.000000E+00
   0.000000E+00  0.399121E-01  0.926179E-01  0.000000E+00  0.000000E+00
   0.000000E+00  0.325065E-01  0.272831E+00  0.173787E+00  0.149557E-01
   0.000000E+00  0.399121E-01  0.926179E-01  0.000000E+00  0.000000E+00
   0.000000E+00  0.000000E+00  0.000000E+00  0.000000E+00  0.000000E+00
   0.000000E+00  0.506939E-01  0.138292E+00  0.000000E+00  0.000000E+00
   0.000000E+00  0.000000E+00  0.000000E+00  0.000000E+00  0.000000E+00
   0.000000E+00  0.000000E+00  0.000000E+00  0.000000E+00  0.000000E+00
   0.000000E+00  0.000000E+00  0.000000E+00  0.000000E+00  0.000000E+00
   0.000000E+00  0.000000E+00  0.000000E+00  0.000000E+00  0.000000E+00"""


def test_cube_writing():
    d = 1.104  # N2 bondlength
    at = Atoms("N2", [(0, 0, 0), (0, 0, d * Bohr)])

    dummydata = np.arange(8).reshape((2, 2, 2))
    origin_in = (42 * Bohr, 0, 0)
    comment_regex = r"(Cube file from ASE, written on )([a-zA-Z ])*([0-9: ])*"

    # create output
    with tempfile.NamedTemporaryFile(mode="r+") as outfil:
        write_cube(outfil, at, data=dummydata, origin=origin_in)
        # reset read head
        outfil.seek(0)

        # Check default comment
        commentline = outfil.readline()
        assert re.match(comment_regex, commentline)

        # Check constant string
        assert outfil.readline() == ("OUTER LOOP: X, MIDDLE LOOP: Y, "
                                     "INNER LOOP: Z\n")

        # Check origin
        origin_from_file = outfil.readline().split()[1:]
        origin_from_file = tuple(
            map(lambda p: float(p) * Bohr, origin_from_file))
        assert origin_from_file == origin_in

        # skip three lines
        outfil.readline()
        outfil.readline()
        outfil.readline()

        # check Atoms and positions
        atom1 = outfil.readline().split()
        assert atom1 == ["7", "0.000000", "0.000000", "0.000000", "0.000000"]
        atom2 = outfil.readline().split()
        assert atom2 == ["7", "0.000000", "0.000000",
                         "0.000000", "{:.6f}".format(d)]

        # Check data
        data_lines = list(
            map(lambda l: float(l.rstrip("\n")), outfil.readlines()))
        for idx, line in enumerate(data_lines):
            assert float(idx) == line


def test_cube_reading():
    with tempfile.NamedTemporaryFile(mode="r+") as cubefil:
        # Write data to a file
        cubefil.write(file_content)
        cubefil.seek(0)

        # read data using cube reading
        result = read_cube(cubefil)
        npt.assert_equal(
            result["atoms"].get_atomic_numbers(), np.array([6, 1, 1, 1, 1])
        )

        assert isinstance(result, dict)

        # check data
        assert result["data"].shape == (5, 3, 5)

        # check spacing
        assert result["spacing"].shape == (3, 3)
        # check that values are on the diagonal (correctness of order in
        # reading)
        npt.assert_almost_equal(
            result["spacing"].diagonal() / Bohr,
            np.array([1.889726, 1.889726, 0.000000]),
        )
        # check that sum is only 1.889726 for every column (correctness of
        # value)
        npt.assert_almost_equal(
            result["spacing"].sum(axis=0) / Bohr,
            np.array([1.889726, 1.889726, 0.000000]),
        )

        # check origin
        assert result["origin"].shape == (3,)
        npt.assert_almost_equal(
            result["origin"], np.array([-3.779452, -1.889726, -3.779452]) * Bohr
        )

        # check PBC
        assert (result["atoms"].get_pbc() == (True, True, False)).all()


def test_reading_using_io():
    with tempfile.NamedTemporaryFile(mode="r+") as cubefil:
        # Write data to a file
        cubefil.write(file_content)
        cubefil.seek(0)

        result = read_cube_data(cubefil)
        assert isinstance(result, tuple)
        assert len(result) == 2

        assert result[0].shape == (5, 3, 5)

        assert isinstance(result[1], Atoms)
        npt.assert_equal(result[1].get_atomic_numbers(),
                         np.array([6, 1, 1, 1, 1]))
