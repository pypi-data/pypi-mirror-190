openapi: 3.0.3

info:
  title: Orders API
  description: API that allows you to manage orders for CoffeeMesh
  version: 1.0.0

servers:
  - url: http://localhost:8000
    description: local development server
  - url: https://coffeemesh.com
    description: main production server
  - url: https://coffeemesh-staging.com
    description: staging server for testing purposes only

paths:
  /orders:
    get:
      parameters:
      - name: cancelled
        in: query
        required: false
        schema:
          type: boolean
      - name: limit
        in: query
        required: false
        schema:
          type: integer
      operationId: getOrders
      responses:
        '200':
          description: A JSON array of orders
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  orders:
                    type: array
                    items:
                      $ref: '#/components/schemas/GetOrderSchema'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'

    post:
      operationId: createOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              additionalProperties: false
              allOf:
                - $ref: '#/components/schemas/CreateOrderSchema'
      responses:
        '201':
          description: A JSON representation of the created order
          content:
            application/json:
              schema:
                additionalProperties: false
                allOf:
                  - $ref: '#/components/schemas/GetOrderSchema'
          links:
            GetOrder:
              operationId: getOrder
              parameters:
                order_id: '$response.body#/id'
            UpdateOrder:
              operationId: updateOrder
              parameters:
                order_id: '$response.body#/id'
            DeleteOrder:
              operationId: deleteOrder
              parameters:
                order_id: '$response.body#/id'
            CancelOrder:
              operationId: cancelOrder
              parameters:
                order_id: '$response.body#/id'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'

  /orders/{order_id}:
    parameters:
      - in: path
        name: order_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      operationId: getOrder
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                additionalProperties: false
                allOf:
                  - $ref: '#/components/schemas/GetOrderSchema'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'

    put:
      operationId: updateOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              additionalProperties: false
              allOf:
                - $ref: '#/components/schemas/CreateOrderSchema'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                additionalProperties: false
                allOf:
                  - $ref: '#/components/schemas/GetOrderSchema'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'

    delete:
      summary: Deletes an existing order
      operationId: deleteOrder
      responses:
        '204':
          description: The resource was deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'

  /orders/{order_id}/cancel:
    parameters:
      - in: path
        name: order_id
        required: true
        schema:
          type: string
          format: uuid
    post:
      operationId: cancelOrder
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                additionalProperties: false
                allOf:
                  - $ref: '#/components/schemas/GetOrderSchema'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'

components:
  responses:
    NotFound:
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UnprocessableEntity:
      description: The payload contains invalid values.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      properties:
        detail:
          oneOf:
            - type: string
            - type: array
      required:
        - detail
      additionalProperties: false

    OrderItemSchema:
      type: object
      required:
        - product
        - size
      properties:
        product:
          type: string
        size:
          type: string
          enum:
            - small
            - medium
            - big
        quantity:
          type: integer
          format: int64
          default: 1
          minimum: 1

    CreateOrderSchema:
      type: object
      required:
        - order
      properties:
        order:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/OrderItemSchema'

    GetOrderSchema:
      type: object
      required:
        - id
        - created
        - status
        - order
      properties:
        id:
          type: string
          format: uuid
        created:
          type: string
          format: date-time
        status:
          type: string
          enum:
            - created
            - paid
            - progress
            - cancelled
            - dispatched
            - delivered
      allOf:
        - $ref: '#/components/schemas/CreateOrderSchema'

security:
  - bearerAuth: []
