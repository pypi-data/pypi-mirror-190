Metadata-Version: 2.1
Name: inky
Version: 1.5.0
Summary: Inky pHAT Driver
Home-page: http://www.pimoroni.com
Author: Philip Howard
Author-email: phil@pimoroni.com
License: MIT
Project-URL: GitHub, https://www.github.com/pimoroni/inky
Keywords: Raspberry Pi e-paper display driver
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Operating System :: POSIX :: Linux
Classifier: License :: OSI Approved :: MIT License
Classifier: Intended Audience :: Developers
Classifier: Programming Language :: Python :: 2.6
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Topic :: Software Development
Classifier: Topic :: System :: Hardware
Description-Content-Type: text/markdown
License-File: LICENSE.txt
Requires-Dist: numpy
Requires-Dist: smbus2
Requires-Dist: spidev
Provides-Extra: example-depends
Requires-Dist: beautifulsoup4 ; extra == 'example-depends'
Requires-Dist: font-fredoka-one ; extra == 'example-depends'
Requires-Dist: font-hanken-grotesk ; extra == 'example-depends'
Requires-Dist: font-intuitive ; extra == 'example-depends'
Requires-Dist: font-source-serif-pro ; extra == 'example-depends'
Requires-Dist: geocoder ; extra == 'example-depends'
Requires-Dist: requests ; extra == 'example-depends'
Provides-Extra: rpi
Requires-Dist: RPi.GPIO ; extra == 'rpi'
Provides-Extra: rpi-gpio-output
Requires-Dist: RPi.GPIO ; extra == 'rpi-gpio-output'

# Inky

[![Build Status](https://travis-ci.com/pimoroni/inky.svg?branch=master)](https://travis-ci.com/pimoroni/inky)
[![Coverage Status](https://coveralls.io/repos/github/pimoroni/inky/badge.svg?branch=master)](https://coveralls.io/github/pimoroni/inky?branch=master)
[![PyPi Package](https://img.shields.io/pypi/v/inky.svg)](https://pypi.python.org/pypi/inky)
[![Python Versions](https://img.shields.io/pypi/pyversions/inky.svg)](https://pypi.python.org/pypi/inky)

Python library for [Inky pHAT](https://shop.pimoroni.com/products/inky-phat), [Inky wHAT](https://shop.pimoroni.com/products/inky-what) and [Inky Impression](https://shop.pimoroni.com/?q=inky+impression) e-paper displays for Raspberry Pi.

## Inky pHAT

[Inky pHAT](https://shop.pimoroni.com/products/inky-phat) is a 250x122 pixel e-paper display, available in red/black/white, yellow/black/white and black/white. It's great for nametags and displaying very low frequency information such as a daily calendar or weather overview.


## Inky wHAT

[Inky wHAT](https://shop.pimoroni.com/products/inky-what) is a 400x300 pixel e-paper display available in red/black/white, yellow/black/white and black/white. It's got tons of resolution for detailed daily to-do lists, multi-day weather forecasts, bus timetables and more.

## Inky Impression

[Inky Impression](https://shop.pimoroni.com/?q=inky+impression) is our line of glorious 7 colour eInk displays, available in [4"](https://shop.pimoroni.com/products/inky-impression-4) (640 x 400 pixel) [5.7"](https://shop.pimoroni.com/products/inky-impression-5-7) (600 x 448 pixel) and [7.3"](https://shop.pimoroni.com/products/inky-impression-7-3) (800 x 480 pixel) flavours. They're packed with strong colours and perfect for displaying striking graphics or lots of data.

# Installation

First, make sure you have I2C and SPI enabled in `sudo raspi-config`.

The Python pip package is named inky, on the Raspberry Pi install with:

```
pip3 install inky[rpi,example-depends]
```

This will install Inky along with dependencies for the Raspberry Pi, plus fonts used by the examples.

If you want to simulate Inky on your desktop, use:

```
pip3 install inky
```

You may need to use `sudo pip3` or `sudo pip` depending on your environment and Python version.

# Usage

The library should be run with Python 3.

## Auto Setup

Inky can try to automatically identify your board (from the information stored on its EEPROM) and set up accordingly. This is the easiest way to work with recent Inky displays.

```python
from inky.auto import auto
display = auto()
```

You can then get the colour and resolution from the board:

```python
display.colour
display.resolution
```

## Manual Setup

If you have an older Inky without an EEPROM, you can specify the type manually. The Inky library contains modules for both the pHAT and wHAT, load the Inky pHAT one as follows:

```python
from inky import InkyPHAT
```

You'll then need to pick your colour, one of 'red', 'yellow' or 'black' and instantiate the class:

```python
display = InkyPHAT('red')
```

If you're using the wHAT you'll need to load the InkyWHAT class from the Inky library like so:

```python
from inky import InkyWHAT
display = InkyWHAT('red')
```

Once you've initialised Inky, there are only three methods you need to be concerned with:

## Set Image

Set a PIL image, numpy array or list to Inky's internal buffer. The image dimensions should match the dimensions of the pHAT or wHAT you're using.

```python
display.set_image(image)
```

You should use `PIL` to create an image. `PIL` provides an `ImageDraw` module which allow you to draw text, lines and shapes over your image. See: https://pillow.readthedocs.io/en/stable/reference/ImageDraw.html

## Set Border

Set the border colour of you pHAT or wHAT.

```python
display.set_border(colour)
```

`colour` should be one of `inky.RED`, `inky.YELLOW`, `inky.WHITE` or `inky.BLACK` with available colours depending on your display type.

## Update The Display

Once you've prepared and set your image, and chosen a border colour, you can update your e-ink display with:

```python
display.show()
```


# Migrating

If you're migrating code from the old `inkyphat` library you'll find that much of the drawing and image manipulation functions have been removed from Inky. These functions were always supplied by PIL, and the recommended approach is to use PIL to create and prepare your image before setting it to Inky with `set_image()`.

1.5.0
-----

* New: inky impression 7.3" support.
* BugFix: WIDTH / HEIGHT set on uc8159.

1.4.0
-----

* New: inky SSD1683 support for WHAT variant

1.3.2
-----

* BugFix: (ish) handle busy_wait failure cases for UC8159 (Inky Impression)

1.3.1
-----

* BugFix: unbreak UC8159

1.3.0
-----

* New: inky UC8159 support for 4" 640x400 display variant
* BugFix: fix set_image so it doesn't break set_pixel
* New: Added --simulate <board> to "auto()", so auto examples can simulate a chosen board

1.2.2
-----

* BugFix: Raise Impression/7Color/UC8159 busy wait timeout from 15s to 30s

1.2.1
-----

* BugFix: inky high-temp red fix
* Enhancement: SSD1608 (250x122) set_border support

1.2.0
-----

* New: inky impression set_border support
* BugFix: inky impression orange colour
* BugFix: inky impression invalid arg bug for Python 2
* New: inky impression simulator

1.1.1
-----

* Enhancement: drive UC81559 CS with GPIO to avoid conflict with Grow workaround
* Add 7-colour/UC8159 specifics to EEPROM
* BugFix: define UC8159 colour and size constants in class
* BugFix: fix auto to grab args properly, support UC8159 and fallback gracefully

1.1.0
-----

* New: Support for UC8159-based 7-colour 600x448 display
* Enhancement: auto now includes options for fallback
* Enhancement: EEPROM can now give text string for display variant

1.0.2
-----

* Enhancement: Always install Pi dependencies

1.0.1
-----

* Enhancement: Tweak setup.py extras for easier dependency install

1.0.0
-----

* New: Support for SSD1608-based displays
* New: Mock Inky pHAT and wHAT displays
* New: Automatic Inky detection and class constructor
* Enhancement: Support for alternate i2c_bus when reading eeprom
* Enhancement: Support for alternate spi_bus
* Enhancement: Support for alternate GPIO driver
* Enhancement: Replaced sys.exit calls with ImportError
* Enhancement: Improved docstrings

0.0.5
-----

* Enhancement: Added support for red/b/w high-temp Inky wHAT

0.0.4
-----

* BugFix: Reverted normal red LUTs to correct values

0.0.3
-----

* Enhancement: Added support for display variant detection
* Enhancement: Added DocStrings
* BugFix: Fixed set_border for all colours

0.0.2
-----

* BugFix: Yellow Inky pHAT now yellow instead of brown/black
* Enhancement: Performance tweak for set_image

0.0.1
-----

* Initial Release


