Metadata-Version: 2.1
Name: whizbang-deployer
Version: 1.3.0a660
Summary: Whizbang Deployer - An all-in-one Azure deployment solution
Home-page: https://github.com/hitachisolutionsamerica/whizbang-deployer
License: MIT
Author: Brian Aiken
Author-email: baiken@hitachisolutions.com
Requires-Python: >=3.9,<4.0
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Requires-Dist: az.cli (>=0.5,<0.6)
Requires-Dist: azure-cli (>=2.30.0,<3.0.0)
Requires-Dist: databricks-cli (==0.17.4)
Requires-Dist: dependency-injector (>=4.35.2,<5.0.0)
Requires-Dist: jsonpath-ng (>=1.5.3,<2.0.0)
Requires-Dist: pydantic (>=1.8.2,<2.0.0)
Requires-Dist: pyodbc (>=4.0.32,<5.0.0)
Requires-Dist: pytest (>=6.2.4,<8.0.0)
Requires-Dist: sqlparse (>=0.4.1,<0.5.0)
Project-URL: Repository, https://github.com/hitachisolutionsamerica/whizbang-deployer
Description-Content-Type: text/markdown

## Whizbang

The Whizbang deployer is a tool designed to simplify deployments of Azure solutions.  The solutions contains utilities and functions that implmenting projects use to deploy specific azure solutions for customers.

### Installation

It it important to note that this package is installed and distributed in two different modes:
- **Local Binary Installation** -> This requires the needed packages to be install globally.  This is how development with dependent projects (i.e. empower) is typically done.
- **Containerized** -> The containerized method includes binary dependencies which are used for CI/CD and is how the artifact is actually deployed and used in production.

#### Mac Prequisites
- `brew install docker docker-compose`

#### Windows Prequisites
_TODO_

#### Local Binary Build
`poetry install`
`poetry build`
`pip3 uninstall whizbang-deployer -y`
`pip3 install ./dist/whizbang*.whl`
_Then run any solution file directly: `python solution.py`_

**To run tests:**
`python3 -m pytest`

#### Containerized Build
_These may no longer work._

**To run pytests:**
- `docker-compose -f docker_builds/docker-compose.yml up --build pyenv`

**To run pytests with watch:**
- `docker-compose -f docker_builds/docker-compose.yml up --build pyenv-watch`

