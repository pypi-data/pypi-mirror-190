#!/usr/bin/env python3.9
"""
Main executable file of this module. This is the main entry point into this
module.
"""
from argparse import ArgumentParser
from os.path import isfile
from os import listdir

from . import SurfaceData


def get_filename_by_dialogue() -> str:
    """if no filename was provided this function asks it from the DAU
    @return filename of alicona-output-file"""
    filename = ""
    while filename == "":
        filename = input("Please enter the name of the Alicona's output-file:")
        if not isfile(filename):
            print(f"The file {filename} does not exist")
            filename = ""
            continue
    return filename


parser = ArgumentParser("Converts alicona-data to the flow-factor data")
parser.add_argument(
    "--input_filename",
    "-i",
    nargs="+",
    help="""Name of the data-file which is generated by the alicona.
    It has to be generated by the option 'export as .txt'.
    Multiple files can be names.
    If * is named, convert all files in this folder""",
    default=[],
)
parser.add_argument(
    "--output_filename",
    "-o",
    help="""Enter the name of the wanted output-file
    which contains the data for the flow factor software""",
    default="output.txt",
)
parser.add_argument(
    "--Young_module", "-E",
    help="Young's modulus in GPa", default=210, type=float
)
parser.add_argument(
    "--contraction_constant",
    "-n",
    help="Contraction constant nu",
    type=float,
    default=0.3,
)
parser.add_argument(
    "--yield_pressure",
    "-Y",
    help="Pressure above that plastic flow happens",
    type=float,
    default=7500,
)
parser.add_argument(
    "--point_number",
    "-N",
    help="""The number of points in x and y direction,
    that shall be used, in case not all
    data-points are wanted or needed""",
    default=None,
    type=int,
)
parser.add_argument(
    "--one_d",
    "-D",
    help="write only line-scan data to the output_file",
    action="store_true",
)
parser.add_argument(
    "--holes",
    "-H",
    help="generate 1D data for alicona-scans with some holes in the data",
    action="store_true",
)
parser.add_argument(
    "--multiples",
    "-m",
    help="""read as many 1D line scans as possible into a single file.
    The different scans are written into different columns.
    Works only in combination with  with '-HD'""",
    action="store_true",
)

args = parser.parse_args()

if not args.input_filename:
    parser.print_help()
    args.input_filename = [get_filename_by_dialogue()]
output_filename = []
if len(args.input_filename) == 1 and args.input_filename[0] != r"*":
    output_filename = [args.output_filename]
elif args.input_filename[0] == r"*":
    args.input_filename = listdir()
    output_filename = [name.replace(r".", r"_out.")
                       for name in args.input_filename]
else:
    output_filename = [name.replace(r".", r"_out.")
                       for name in args.input_filename]

for input_name, output_name in zip(args.input_filename, output_filename):
    data_ = SurfaceData(
        input_name,
        args.point_number)
    if not args.one_d:
        data_.write_flow_factor_data(
            output_name,  N=args.point_number,
            E=args.Young_module, nu=args.contraction_constant,
            yield_pressure=args.yield_pressure)
    else:
        if not args.holes:
            data_.write_1d_data(output_name)
        else:
            data_.write_1d_data_holes(output_name, args.multiples)
