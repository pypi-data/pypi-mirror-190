"""@package docstring
plots the surface as generated by alicona_converter.py,
useful to check for the correctness of the output
this module depends on the submodule "rundheit" in order to work
usage: python plot_surface.py [filename]"""
from re import search
from argparse import ArgumentParser
from os.path import join
from typing import Union
from pathlib import Path

from numpy import array, meshgrid

from scientific_plots.default_plots import plot_surface
from scientific_plots.utilities import mkdir_p
from scientific_plots.types_ import Matrix


def read_surface_file(filename: Union[str, Path]) ->\
        tuple[Matrix, Matrix, Matrix]:
    """parse the file line by line into numpy-data-types
    @input filename name of the flow-factor-file
    @return numpy array of numpy array
        containing each line of the file seperated"""
    data = []
    read_block = False
    delta_x = None
    delta_y = None
    with open(filename, "r", encoding="utf-8") as input_file:
        for line in input_file:
            if read_block:
                if "<data_end>" in line:
                    read_block = False
                    continue
                data += [array([float(value) for value in line.split()])]
            else:
                # read the other parameters
                if "dx_[ym]" in line:
                    match = search(r"\d+\.\d+", line)
                    assert match
                    delta_x = float(match.group(0))
                if "dy_[ym]" in line:
                    match = search(r"\d+\.\d+", line)
                    assert match
                    delta_y = float(match.group(0))

                if "<data_start>" in line:
                    read_block = True
    _Z: Matrix
    _Z = array(data)  # type: ignore
    # we need mesh-like data to be able to plot it
    _X = array([i * delta_x for i in range(len(data[0]))])  # type: ignore
    _Y = array([i * delta_y for i in range(len(data))])  # type: ignore
    _X, _Y = meshgrid(_X, _Y)  # type: ignore
    return _X, _Y, _Z


if __name__ == "__main__":
    parser = ArgumentParser(
        """Plot the surface as read from the output-file generated
        by alicona_converter.py.
        Useful to check for the accuracy of this script"""
    )
    parser.add_argument("filename", help="name of the file to be read from")
    args = parser.parse_args()

    basename = args.filename.replace(".txt", "")
    X, Y, Z = read_surface_file(args.filename)
    mkdir_p("plots")
    plot_surface(
        X, Y, Z, "x [µm]", "y [µm]", "z [µm]", join("plots", f"{basename}.pdf")
    )
