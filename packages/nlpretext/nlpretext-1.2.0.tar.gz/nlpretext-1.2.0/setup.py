# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['nlpretext',
 'nlpretext._config',
 'nlpretext._utils',
 'nlpretext.augmentation',
 'nlpretext.basic',
 'nlpretext.cli',
 'nlpretext.social',
 'nlpretext.token']

package_data = \
{'': ['*']}

install_requires = \
['chardet>=3.0.4',
 'dask[complete]>=2021.5.0',
 'distributed>=2021.5.0',
 'emoji>=2.0.0',
 'fastparquet>=0.4.1',
 'flashtext>=2.7',
 'ftfy>=4.2.0',
 'mosestokenizer>=1.1.0',
 'nlpaug>=1.0.1',
 'nltk>=3.4.2',
 'numpy>1.22.0',
 'pandas>=1.3.0',
 'phonenumbers>=8.10.12',
 'pillow>=8.2.1',
 'pyarrow>=4.0.0',
 'regex>=2019.8.19',
 'rich>=10.1.0',
 'sacremoses>=0.0.13',
 'scikit-learn>=0.23.2',
 'spacy>=3.0.5',
 'stop-words>=2018.7.23',
 'thinc>=8.0.4',
 'tornado>=6.0.3',
 'typer[all]>=0.3.2']

extras_require = \
{':python_version < "3.8"': ['importlib_metadata>=1.6.0'],
 'torch': ['torch>=1.9.0,<2.0.0']}

entry_points = \
{'console_scripts': ['nlpretext = nlpretext.cli.__main__:app']}

setup_kwargs = {
    'name': 'nlpretext',
    'version': '1.2.0',
    'description': 'All the goto functions you need to handle NLP use-cases, integrated in NLPretext',
    'long_description': '# NLPretext\n\n<p align="center">\n    <img src="/references/logo_nlpretext.png" />\n</p>\n\n<div align="center">\n\n[![CI status](https://github.com/artefactory/NLPretext/actions/workflows/ci.yml/badge.svg?branch%3Amain&event%3Apush)](https://github.com/artefactory/NLPretext/actions/workflows/ci.yml?query=branch%3Amain)\n[![CD status](https://github.com/artefactory/NLPretext/actions/workflows/cd.yml/badge.svg?event%3Arelease)](https://github.com/artefactory/NLPretext/actions/workflows/cd.yml?query=event%3Arelease)\n[![Python Version](https://img.shields.io/badge/Python-3.8-informational.svg)](#supported-python-versions)\n[![Dependencies Status](https://img.shields.io/badge/dependabots-active-informational.svg)](https://github.com/artefactory/NLPretext}/pulls?utf8=%E2%9C%93&q=is%3Apr%20author%3Aapp%2Fdependabot)\n\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![Security: bandit](https://img.shields.io/badge/security-bandit-informational.svg)](https://github.com/PyCQA/bandit)\n[![Pre-commit](https://img.shields.io/badge/pre--commit-enabled-informational?logo=pre-commit&logoColor=white)](https://github.com/artefactory/NLPretext}/blob/main/.pre-commit-config.yaml)\n[![Semantic Versions](https://img.shields.io/badge/%F0%9F%9A%80-semantic%20versions-informational.svg)](https://github.com/artefactory/NLPretext/releases)\n[![Documentation](https://img.shields.io/badge/doc-sphinx-informational.svg)](https://github.com/artefactory/NLPretext}/tree/main/docs)\n[![License](https://img.shields.io/badge/License-Apache%20Software%20License%202.0-informational.svg)](https://github.com/artefactory/NLPretext}/blob/main/LICENSE)\n\nAll the goto functions you need to handle NLP use-cases, integrated in NLPretext\n\n</div>\n\n# TL;DR\n\n\n> *Working on an NLP project and tired of always looking for the same silly preprocessing functions on the web?*  :tired_face: \n\n> *Need to efficiently extract email adresses from a document? Hashtags from tweets? Remove accents from a French post?* :disappointed_relieved:\n\n\n**NLPretext got you covered!** :rocket:\n\nNLPretext packages in a **unique** library all the text **preprocessing** functions you need to **ease** your NLP project. \n\n\n:mag: Quickly explore below our preprocessing pipelines and individual functions referential.\n\n* [Default preprocessing pipeline](#default_pipeline)\n* [Custom preprocessing pipeline](#custom_pipeline)\n* [Replacing phone numbers](#replace_phone_numbers)\n* [Removing hashtags](#remove_hashtags)\n* [Extracting emojis](#extract_emojis)\n* [Data augmentation](#data_augmentation)\n\n\nCannot find what you were looking for? Feel free to open an [issue]((https://github.com/artefactory/nlpretext/issues) ).\n\n\n\n# Installation\n\n### Supported Python Versions\n\n- Main version supported : `3.8`\n- Other supported versions : `3.9`, `3.10`\n\n\nWe strongly advise you to do the remaining steps in a virtual environnement.\n\nTo install this library from PyPi, run the following command:\n\n```bash\npip install nlpretext\n```\n\nor with `Poetry`\n\n```bash\npoetry add nlpretext\n```\n\n\n# Usage\n\n## Default pipeline <a name="default_pipeline"></a>\n\nNeed to preprocess your text data but no clue about what function to use and in which order? The default preprocessing pipeline got you covered:\n\n```python\nfrom nlpretext import Preprocessor\ntext = "I just got the best dinner in my life @latourdargent !!! I  recommend 😀 #food #paris \\n"\npreprocessor = Preprocessor()\ntext = preprocessor.run(text)\nprint(text)\n# "I just got the best dinner in my life!!! I recommend"\n```\n\n## Create your custom pipeline <a name="custom_pipeline"></a>\n\nAnother possibility is to create your custom pipeline if you know exactly what function to apply on your data, here\'s an example:\n\n```python\nfrom nlpretext import Preprocessor\nfrom nlpretext.basic.preprocess import (normalize_whitespace, remove_punct, remove_eol_characters,\nremove_stopwords, lower_text)\nfrom nlpretext.social.preprocess import remove_mentions, remove_hashtag, remove_emoji\ntext = "I just got the best dinner in my life @latourdargent !!! I  recommend 😀 #food #paris \\n"\npreprocessor = Preprocessor()\npreprocessor.pipe(lower_text)\npreprocessor.pipe(remove_mentions)\npreprocessor.pipe(remove_hashtag)\npreprocessor.pipe(remove_emoji)\npreprocessor.pipe(remove_eol_characters)\npreprocessor.pipe(remove_stopwords, args={\'lang\': \'en\'})\npreprocessor.pipe(remove_punct)\npreprocessor.pipe(normalize_whitespace)\ntext = preprocessor.run(text)\nprint(text)\n# "dinner life recommend"\n```\n\nTake a look at all the functions that are available [here](https://github.com/artefactory/NLPretext/tree/master/nlpretext) in the ```preprocess.py``` scripts in the different folders: basic, social, token.\n\n\n## Load text data\n\nPre-processing text data is useful only if you have loaded data to process! Importing text data as strings in your code can be really simple if you have short texts contained in a local .txt, but it can quickly become difficult if you want to load a lot of texts, stored in multiple formats and divided in multiple files. Hopefully, you can use NLPretext\'s TextLoader class to easily import text data.\nOur TextLoader class makes use of Dask, so be sure to install the library if you want to use it, as mentioned above.\n\n```python\nfrom nlpretext.textloader import TextLoader\nfiles_path = "local_folder/texts/text.txt"\ntext_loader = TextLoader()\ntext_dataframe = text_loader.read_text(files_path)\nprint(text_dataframe.text.values.tolist())\n# ["I just got the best dinner in my life!!!",  "I recommend", "It was awesome"]\n```\n\nAs TextLoader uses dask to load data, file path can be provided as string, list of strings, with or without wildcards. It also supports imports from cloud providers, if your machine is authentified on a project.\n\n```python\ntext_loader = TextLoader(text_column="name_of_text_column_in_your_data")\n\nlocal_file_path = "local_folder/texts/text.csv" # File from local folder\nlocal_corpus_path = ["local_folder/texts/text_1.csv", "local_folder/texts/text_2.csv", "local_folder/texts/text_3.csv"] # Multiple files from local folder\n\ngcs_file_path = "gs://my-bucket/texts/text.json" # File from GCS\ns3_file_path = "s3://my-bucket/texts/text.json" # File from S3\nhdfs_file_path = "hdfs://folder/texts/text.txt" # File from HDFS\nazure_file_path = "az://my-bucket/texts/text.parquet" # File from Azure\n\ngcs_corpus_path = "gs://my-bucket/texts/text_*.json" # Multiple files from GCS with wildcard\n\ntext_dataframe_1 = text_loader.read_text(local_file_path)\ntext_dataframe_2 = text_loader.read_text(local_corpus_path)\ntext_dataframe_3 = text_loader.read_text(gcs_file_path)\ntext_dataframe_4 = text_loader.read_text(s3_file_path)\ntext_dataframe_5 = text_loader.read_text(hdfs_file_path)\ntext_dataframe_6 = text_loader.read_text(azure_file_path)\ntext_dataframe_7 = text_loader.read_text(gcs_corpus_path)\n\n```\n\nYou can also specify a Preprocessor if you want your data to be directly pre-processed when loaded.\n```python\ntext_loader = TextLoader(text_column="text_col")\npreprocessor = Preprocessor()\n\nfile_path = "local_folder/texts/text.csv" # File from local folder\n\nraw_text_dataframe = text_loader.read_text(local_file_path)\npreprocessed_text_dataframe = text_loader.read_text(local_file_path, preprocessor=preprocessor)\n\nprint(raw_text_dataframe.text_col.values.tolist())\n# ["These   texts are not preprocessed",  "This is bad ## "]\n\nprint(preprocessed_text_dataframe.text_col.values.tolist())\n# ["These texts are not preprocessed",  "This is bad"]\n```\n\n\n## Individual Functions\n\n### Replacing emails <a name="replace_emails"></a>\n\n```python\nfrom nlpretext.basic.preprocess import replace_emails\nexample = "I have forwarded this email to obama@whitehouse.gov"\nexample = replace_emails(example, replace_with="*EMAIL*")\nprint(example)\n# "I have forwarded this email to *EMAIL*"\n```\n\n### Replacing phone numbers <a name="replace_phone_numbers"></a>\n\n```python\nfrom nlpretext.basic.preprocess import replace_phone_numbers\nexample = "My phone number is 0606060606"\nexample = replace_phone_numbers(example, country_to_detect=["FR"], replace_with="*PHONE*")\nprint(example)\n# "My phone number is *PHONE*"\n```\n\n### Removing Hashtags <a name="remove_hashtags"></a>\n\n```python\nfrom nlpretext.social.preprocess import remove_hashtag\nexample = "This restaurant was amazing #food #foodie #foodstagram #dinner"\nexample = remove_hashtag(example)\nprint(example)\n# "This restaurant was amazing"\n```\n\n### Extracting emojis <a name="extract_emojis"></a>\n\n```python\nfrom nlpretext.social.preprocess import extract_emojis\nexample = "I take care of my skin 😀"\nexample = extract_emojis(example)\nprint(example)\n# [\':grinning_face:\']\n```\n\n## Data augmentation <a name="data_augmentation"></a>\n\nThe augmentation module helps you to **generate new texts** based on your given examples by modifying some words in the initial ones and to **keep associated entities unchanged**, if any, in the case of **NER tasks**. If you want words other than entities to remain unchanged, you can specify it within the `stopwords` argument. Modifications depend on the chosen method, the ones currently supported by the module are **substitutions with synonyms** using Wordnet or BERT from the [`nlpaug`](https://github.com/makcedward/nlpaug) library. \n\n```python\nfrom nlpretext.augmentation.text_augmentation import augment_text\nexample = "I want to buy a small black handbag please."\nentities = [{\'entity\': \'Color\', \'word\': \'black\', \'startCharIndex\': 22, \'endCharIndex\': 27}]\nexample = augment_text(example, method=”wordnet_synonym”, entities=entities)\nprint(example)\n# "I need to buy a small black pocketbook please."\n```\n\n\n\n\n# 📈 Releases\n\nYou can see the list of available releases on the [GitHub Releases](https://github.com/artefactory/NLPretext}/releases) page.\n\nWe follow [Semantic Versions](https://semver.org/) specification.\n\nWe use [`Release Drafter`](https://github.com/marketplace/actions/release-drafter). As pull requests are merged, a draft release is kept up-to-date listing the changes, ready to publish when you’re ready. With the categories option, you can categorize pull requests in release notes using labels.\n\nFor Pull Requests, these labels are configured, by default:\n\n|               **Label**               |  **Title in Releases**  |\n| :-----------------------------------: | :---------------------: |\n|       `enhancement`, `feature`        |       🚀 Features       |\n| `bug`, `refactoring`, `bugfix`, `fix` | 🔧 Fixes & Refactoring  |\n|       `build`, `ci`, `testing`        | 📦 Build System & CI/CD |\n|              `breaking`               |   💥 Breaking Changes   |\n|            `documentation`            |    📝 Documentation     |\n|            `dependencies`             | ⬆️ Dependencies updates |\n\n\nGitHub creates the `bug`, `enhancement`, and `documentation` labels automatically. Dependabot creates the `dependencies` label. Create the remaining labels on the Issues tab of the GitHub repository, when needed.## 🛡 License\n\n[![License](https://img.shields.io/github/license/artefactory/NLPretext)](https://github.com/artefactory/NLPretext}/blob/main/LICENSE)\n\nThis project is licensed under the terms of the `Apache Software License 2.0` license. See [LICENSE](https://github.com/artefactory/NLPretext}/blob/main/LICENSE) for more details.## 📃 Citation\n\n```\n@misc{nlpretext,\n  author = {artefactory},\n  title = {All the goto functions you need to handle NLP use-cases, integrated in NLPretext},\n  year = {2021},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  howpublished = {\\url{https://github.com/artefactory/NLPretext}}}\n}\n```\n\n\n# Project Organization\n------------\n\n    ├── LICENSE\n    ├── CONTRIBUTING.md     <- Contribution guidelines\n    ├── CODE_OF_CONDUCT.md  <- Code of conduct guidelines\n    ├── Makefile\n    ├── README.md           <- The top-level README for developers using this project.\n    ├── .github/workflows   <- Where the CI and CD lives\n    ├── datasets/external   <- Bash scripts to download external datasets\n    ├── docker              <- All you need to build a Docker image from that package\n    ├── docs                <- Sphinx HTML documentation\n    ├── nlpretext           <- Main Package. This is where the code lives\n    │\xa0\xa0 ├── preprocessor.py <- Main preprocessing script\n    │\xa0\xa0 ├── text_loader.py  <- Main loading script\n    │\xa0\xa0 ├── augmentation    <- Text augmentation script\n    │\xa0\xa0 ├── basic           <- Basic text preprocessing\n    │\xa0\xa0 ├── cli             <- Command lines that can be used\n    │\xa0\xa0 ├── social          <- Social text preprocessing\n    │\xa0\xa0 ├── token           <- Token text preprocessing\n    │\xa0\xa0 ├── _config         <- Where the configuration and constants live\n    │\xa0\xa0 └── _utils          <- Where preprocessing utils scripts lives\n    ├── tests               <- Where the tests lives\n    ├── pyproject.toml      <- Package configuration\n    ├── poetry.lock         \n    └── setup.cfg           <- Configuration for plugins and other utils\n\n# Credits\n\n- [textacy](https://github.com/chartbeat-labs/textacy) for the following basic preprocessing functions:\n    - `fix_bad_unicode`\n    - `normalize_whitespace`\n    - `unpack_english_contractions`\n    - `replace_urls`\n    - `replace_emails`\n    - `replace_numbers`\n    - `replace_currency_symbols`\n    - `remove_punct`\n    - `remove_accents`\n    - `replace_phone_numbers` *(with some modifications of our own)*\n',
    'author': 'artefactory',
    'author_email': 'rafaelle.aygalenq@artefact.com',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://github.com/artefactory/NLPretext',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'extras_require': extras_require,
    'entry_points': entry_points,
    'python_requires': '>=3.8,<4.0',
}


setup(**setup_kwargs)
