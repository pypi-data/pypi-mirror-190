{"version":3,"sources":["Title.tsx","Common.ts","NavColumn.tsx","CentrePane.tsx","App.tsx","index.tsx"],"names":["Title","LIGHT_GREY","MEDIUM_GREY","COLWIDTH","NavColumn","props","_","isEmpty","childBranches","childLeaves","className","css","styles","navColumn","ListGroup","selection","selectedLeafID","handleTestRun","handleEnvToggle","NavEntries","childIDs","Object","keys","map","shortID","branch","concat","sort","a","b","localeCompare","nodeInfo","childNode","node","BranchEntry","linkAddr","short_id","encodeURIComponent","join","ListGroupItem","getNavEntryStyle","status","navEntryCommon","navLabel","to","BranchEntryButtons","environment_state","nodeid","buttonsContainer","envStatus","LeafEntry","label","NavEntryIcon","icon","faRedo","inactiveButton","size","spin","faPlay","onClick","e","stopPropagation","runButton","EnvironmentIcon","faToggleOff","faToggleOn","Error","navEntryPassed","navEntryFailed","navEntryDefault","StyleSheet","create","width","height","position","padding","background","fontSize","cursor","color","transition","display","InfoPane","selectedLeaf","title","statusIcon","getStatusIcon","longrepr","message","Message","faCheckCircle","faTimesCircle","NavBreadcrumbs","numSelected","length","Breadcrumb","BreadcrumbItem","faHome","currSelected","restSelected","slice","index","flexDirection","justifyContent","alignItems","textAlign","minHeight","TestRunner","state","resultTree","loading","socket","errorMessage","handleUpdate","bind","io","this","setState","on","getResultTree","backoff","axios","get","then","response","data","catch","reason","console","log","setTimeout","tree","emit","start","parseSelection","url","getCurrSelection","error","SelectionNotFound","React","Component","trimmedPath","replace","split","decodeURIComponent","TestRunnerDisplay","useQuery","centrePane","steal","heading","MessageDisplay","URLSearchParams","useLocation","search","selectedBranch","reduce","child_branches","child_leaves","App","path","render","location","pathname","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.e936a9fa.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Title() {\n  return (\n    <div>\n      <h1> BMS FKT Self-Diagnostic Tool </h1>\n      <h6> \t<small>&copy; </small> Pass Testing Solutions GmbH </h6>\n\n    </div>\n  )\n}\n\nexport default Title\n","/**\n * Global constants and type declarations.\n *\n * Commented out until used.\n */\n\n//const GREEN = '#228F1D';\n//const RED = '#A2000C';\n//const ORANGE = '#FFA500';\nexport const LIGHT_GREY = '#F3F3F3';\nexport const MEDIUM_GREY = '#D0D0D0';\nexport const PTS_BLUE = '#60DEFD';\n//const DARK_GREY = '#ADADAD';\n//const BLACK = '#404040';\n\nexport const COLWIDTH = \"25em\";\n\nexport interface BranchNode {\n  short_id: string,\n  nodeid: string,\n  status: string,\n  parent_ids: Array<string>,\n  child_branches: { [key: string]: BranchNode },\n  child_leaves: { [key: string]: LeafNode },\n  environment_state: string,\n}\n\nexport interface LeafNode {\n  short_id: string,\n  nodeid: string,\n  status: string,\n  parent_ids: Array<string>,\n  longrepr: string,\n}\n","/**\n * Navigation column component and its subcomponents. Used to control navigation\n * from a current selected branch node down to its child nodes.\n */\nimport React from 'react';\nimport _ from 'lodash';\nimport { ListGroup, ListGroupItem } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlay, faRedo, faToggleOn, faToggleOff } from '@fortawesome/free-solid-svg-icons';\nimport { Link } from \"react-router-dom\";\nimport { StyleSheet, css } from \"aphrodite\";\n\nimport { LIGHT_GREY, MEDIUM_GREY, COLWIDTH, BranchNode, LeafNode } from \"./Common\";\n\ninterface NavColumnProps {\n  childBranches: { [key: string]: BranchNode },\n  childLeaves: { [key: string]: LeafNode },\n  selectedLeafID: string | null,\n  selection: Array<string>,\n  handleTestRun: (nodeid: string) => void,\n  handleEnvToggle: (nodeid: string, start: boolean) => void,\n}\n\n/**\n * NavColumn component: renders the current navigation selection.\n * @param props Component props\n */\nexport const NavColumn = (props: NavColumnProps) => {\n  if (_.isEmpty(props.childBranches) && _.isEmpty(props.childLeaves)) {\n    return <div className={css(styles.navColumn)} />;\n  }\n\n  return (\n    <div className={css(styles.navColumn)}>\n      <ListGroup>\n        <NavEntries\n          childBranches={props.childBranches}\n          childLeaves={props.childLeaves}\n          selection={props.selection}\n          selectedLeafID={props.selectedLeafID}\n          handleTestRun={props.handleTestRun}\n          handleEnvToggle={props.handleEnvToggle}\n        />\n      </ListGroup>\n    </div>\n  );\n};\n\ninterface NavEntriesProps {\n  childBranches: { [key: string]: BranchNode },\n  childLeaves: { [key: string]: LeafNode },\n  selection: Array<string>,\n  selectedLeafID: string | null,\n  handleTestRun: (nodeid: string) => void,\n  handleEnvToggle: (nodeid: string, start: boolean) => void,\n}\n\ninterface NodeIDInfo {\n  shortID: string,\n  branch: boolean,\n}\n\n/**\n * Render entries in the nav column for branch nodes that are children of the\n * currently selected node.\n * @param props Render props\n */\nconst NavEntries = (props: NavEntriesProps) => {\n  const childIDs = Object.keys(props.childBranches).map(\n    shortID => ({shortID: shortID, branch: true})\n  ).concat(\n    Object.keys(props.childLeaves).map(\n      shortID => ({shortID: shortID, branch: false})\n    )\n  ).sort((a: NodeIDInfo, b: NodeIDInfo) => (a.shortID.localeCompare(b.shortID)))\n\n  return (\n    <>\n      {\n        childIDs.map(\n          (nodeInfo: NodeIDInfo) => {\n            if (nodeInfo.branch) {\n              const childNode = props.childBranches[nodeInfo.shortID]\n              return <BranchEntry\n                node={childNode}\n                selection={props.selection}\n                handleTestRun={props.handleTestRun}\n                handleEnvToggle={props.handleEnvToggle}\n              />\n            } else {\n              const childNode = props.childLeaves[nodeInfo.shortID]\n              return <LeafEntry\n                node={childNode}\n                selectedLeafID={props.selectedLeafID}\n                handleTestRun={props.handleTestRun}\n              />\n            }\n          }\n        )\n      }\n    </>\n  );\n};\n\ninterface BranchEntryProps {\n  node: BranchNode,\n  selection: Array<string>,\n  handleTestRun: (nodeid: string) => void,\n  handleEnvToggle: (nodeid: string, start: boolean) => void,\n}\n\nconst BranchEntry = (props: BranchEntryProps) => {\n  const linkAddr = \"/\" + props.selection\n    .concat([props.node.short_id])\n    .map(encodeURIComponent)\n    .join(\"/\");\n\n  return (\n    <ListGroupItem\n      key={props.node.short_id}\n      className={\n        css(\n          getNavEntryStyle(props.node.status),\n          styles.navEntryCommon,\n        )\n      }\n    >\n      <span className={css(styles.navLabel)}>\n        <Link\n          to={linkAddr}\n        >\n          {props.node.short_id}\n        </Link>\n      </span>\n      <BranchEntryButtons\n        node={props.node}\n        handleTestRun={props.handleTestRun}\n        handleEnvToggle={props.handleEnvToggle}\n      />\n    </ListGroupItem>\n  );\n};\n\ninterface BranchEntryButtonsProps {\n  node: BranchNode,\n  handleTestRun: (nodeid: string) => void,\n  handleEnvToggle: (nodeid: string, start: boolean) => void,\n}\n\nconst BranchEntryButtons: React.FunctionComponent<BranchEntryButtonsProps> = props => {\n  if (props.node.environment_state === \"inactive\") {\n    return (\n      <NavEntryIcon\n        nodeid={props.node.nodeid}\n        status={props.node.status}\n        handleTestRun={props.handleTestRun}\n      />\n    );\n  }\n\n  return (\n    <span className={css(styles.buttonsContainer, styles.navEntryCommon)}>\n      <EnvironmentIcon\n        envStatus={props.node.environment_state}\n        handleEnvToggle={props.handleEnvToggle}\n        nodeid={props.node.nodeid}\n      />\n      <NavEntryIcon\n        nodeid={props.node.nodeid}\n        status={props.node.status}\n        handleTestRun={props.handleTestRun}\n      />\n    </span>\n  );\n};\n\ninterface LeafEntryProps {\n  node: LeafNode\n  selectedLeafID: string | null,\n  handleTestRun: (nodeid: string) => void,\n}\n\n/**\n * Render entries in the navigation column for child leaves of the currently\n * selected node.\n * @param props Render props\n */\nconst LeafEntry = (props: LeafEntryProps) => {\n  const shortID = props.node.short_id\n  const label = (shortID === props.selectedLeafID) ?\n    shortID :\n    (\n      <Link\n        to={`?selectedLeaf=${encodeURIComponent(shortID)}`}\n      >\n        {shortID}\n      </Link>\n    );\n\n  return (\n    <ListGroupItem\n      key={shortID}\n      className={\n        css(\n          getNavEntryStyle(\n            props.node.status\n          ),\n          styles.navEntryCommon,\n        )\n      }\n    >\n      <span className={css(styles.navLabel)}>{label}</span>\n      <NavEntryIcon\n        nodeid={props.node.nodeid}\n        status={props.node.status}\n        handleTestRun={props.handleTestRun}\n      />\n    </ListGroupItem>\n  );\n};\n\ninterface NavEntryIconProps {\n  nodeid: string,\n  status: string,\n  handleTestRun: (nodeid: string) => void,\n}\n\nconst NavEntryIcon = (props: NavEntryIconProps) => {\n  switch (props.status) {\n    case \"running\":\n      return (\n        <FontAwesomeIcon\n          icon={faRedo}\n          className={css(styles.inactiveButton)}\n          size=\"lg\"\n          spin\n        />\n      );\n\n    default:\n      return (\n        <FontAwesomeIcon\n          icon={faPlay}\n          onClick={(e: React.MouseEvent) => {\n            e.stopPropagation();\n            props.handleTestRun(props.nodeid);\n          }}\n          className={css(styles.runButton)}\n          size=\"lg\"\n        />\n      );\n  }\n};\n\ninterface EnvironmentIconProps {\n  envStatus: string,\n  nodeid: string,\n  handleEnvToggle: (nodeid: string, start: boolean) => void,\n}\n\nconst EnvironmentIcon: React.FunctionComponent<EnvironmentIconProps> = (props)=> {\n  switch (props.envStatus) {\n    case \"stopped\":\n      return (\n        <FontAwesomeIcon\n          icon={faToggleOff}\n          className={css(styles.runButton)}\n          onClick={(e: React.MouseEvent) => {\n            e.stopPropagation();\n            props.handleEnvToggle(props.nodeid, true);\n          }}\n          size=\"lg\"\n        />\n      );\n\n    case \"started\":\n      return (\n        <FontAwesomeIcon\n          icon={faToggleOn}\n          className={css(styles.runButton)}\n          onClick={(e: React.MouseEvent) => {\n            e.stopPropagation();\n            props.handleEnvToggle(props.nodeid, false);\n          }}\n          size=\"lg\"\n        />\n      );\n\n    case \"stopping\":\n      return (\n        <FontAwesomeIcon\n          icon={faToggleOn}\n          className={css(styles.inactiveButton)}\n          size=\"lg\"\n        />\n      );\n\n    default:\n      throw new Error(\"unexpected environment status \" + props.envStatus);\n  }\n};\n\n/**\n *\n * @param status\n */\nconst getNavEntryStyle = (status: string) => {\n  switch (status) {\n    case \"passed\":\n      return styles.navEntryPassed;\n\n    case \"failed\":\n      return styles.navEntryFailed;\n\n    default:\n      return styles.navEntryDefault;\n  }\n}\n\nconst styles = StyleSheet.create({\n  buttonsContainer: {\n    width: \"3em\"\n  },\n  navColumn: {\n    height: \"100%\",\n    width: COLWIDTH,\n    position: \"fixed\",\n    \"z-index\": 1,\n    \"top\": 0,\n    \"left\": 0,\n    \"overflow-x\": \"hidden\",\n    padding: \"1px\",\n    background: LIGHT_GREY,\n  },\n  navLabel: {\n    \"text-overflow\": \"ellipsis\",\n    \"white-space\": \"nowrap\",\n    fontSize: \"small\",\n    \"max-width\": \"80%\",\n  },\n  runButton: {\n    cursor: 'pointer',\n    color: 'black',\n    'padding-left': '3px',\n    'padding-right': '3px',\n    transition: 'color 0.3s ease-out 0s',\n    ':hover': {\n      color: LIGHT_GREY,\n    }\n  },\n  inactiveButton: {\n    color: LIGHT_GREY,\n    'padding-left': '3px',\n    'padding-right': '3px',\n  },\n  navEntryPassed: { background: \"#c0ffbf\" },\n  navEntryFailed: { background: \"#ff7a7a\" },\n  navEntryDefault: { background: MEDIUM_GREY },\n  navEntryCommon: {\n    display: \"flex\",\n    \"justify-content\": \"space-between\",\n    \"align-items\": \"center\",\n  }\n});\n","/**\n * Contains InfoPane and NavBreadcrumbs components which make up the main\n * centre display pane.\n */\n\nimport React from 'react';\nimport { Breadcrumb, BreadcrumbItem } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faHome,\n  faCheckCircle,\n  faTimesCircle,\n} from '@fortawesome/free-solid-svg-icons';\nimport { Link } from \"react-router-dom\";\n\nimport { LeafNode, MEDIUM_GREY } from \"./Common\";\nimport { css, StyleSheet } from 'aphrodite';\n\ninterface InfoPaneProps {\n  selectedLeaf: LeafNode | null,\n}\n\n/**\n * InfoPane component: renders information on the currently selected testcase\n * (if any)\n * @param props Component props\n */\nexport const InfoPane = (props: InfoPaneProps) => {\n  if (!props.selectedLeaf) {\n    return <Message message=\"Please select a test.\" />;\n  }\n\n  return (\n    <>\n      <div>\n        <span className={css(styles.title)}>{props.selectedLeaf.nodeid}</span>\n        <span className={css(styles.statusIcon)}>\n          {getStatusIcon(props.selectedLeaf.status)}\n        </span>\n      </div>\n      <pre className={css(styles.longrepr)}>{props.selectedLeaf.longrepr}</pre>\n    </>\n  )\n}\n\ninterface MessageProps { message: string }\n\nexport const Message = (props: MessageProps) => (\n  <h1 className={css(styles.message)}>{props.message}</h1>\n);\n\n/**\n * Return an icon for the given test node status.\n * @param status Node status\n */\nconst getStatusIcon = (status: string) => {\n  switch (status) {\n    case \"passed\":\n      return (\n        <FontAwesomeIcon icon={faCheckCircle} color=\"green\" size=\"4x\" />\n      );\n\n    case \"failed\":\n      return (\n        <FontAwesomeIcon icon={faTimesCircle} color=\"red\" size=\"4x\" />\n      );\n\n    default:\n      return null;\n  }\n};\n\ninterface NavBreadcrumbsProps {\n  selection: Array<string>\n}\n\n/**\n* Navigation breadcrumb menu, used to show the current position in the test\n* tree and to navigate back up to any parent branch node.\n* @param props Render props\n*/\nexport const NavBreadcrumbs = (props: NavBreadcrumbsProps) => {\n  const numSelected = props.selection.length;\n\n  if (!numSelected) {\n    return (\n      <Breadcrumb>\n        <BreadcrumbItem key=\"home\">\n          <FontAwesomeIcon icon={faHome} />\n        </BreadcrumbItem>\n      </Breadcrumb>\n    );\n  }\n\n  const currSelected = props.selection[numSelected - 1];\n  const restSelected = props.selection.slice(0, numSelected - 1);\n\n  return (\n    <Breadcrumb>\n      <BreadcrumbItem key=\"home\">\n        <Link to=\"/\">\n          <FontAwesomeIcon icon={faHome} />\n        </Link>\n      </BreadcrumbItem>\n      {\n        restSelected.map(\n          (short_id: string, index: number) => (\n            <BreadcrumbItem key={short_id}>\n              <Link\n                to={\n                  \"/\" +\n                  props.selection\n                    .slice(0, index + 1)\n                    .map(encodeURIComponent)\n                    .join(\"/\")\n                }\n              >\n                {short_id}\n              </Link>\n            </BreadcrumbItem>\n          )\n        )\n      }\n      <BreadcrumbItem>{currSelected}</BreadcrumbItem>\n    </Breadcrumb>\n  );\n};\n\nconst styles = StyleSheet.create({\n  title: {\n    fontSize: \"large\",\n    \"font-weight\": \"bold\",\n    //\"width\": \"80%\",\n    //display: \"inline-block\",\n    \"text-overflow\": \"ellipsis\",\n    \"white-space\": \"nowrap\",\n    \"padding\": \"10px\",\n  },\n  statusIcon: {\n    \"float\": \"right\"\n  },\n  longrepr: {\n    \"padding\": \"10px\",\n  },\n  message: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    textAlign: 'center',\n    minHeight: '80vh',\n    color: MEDIUM_GREY,\n  }\n});","import React from 'react';\nimport axios from 'axios';\nimport io from 'socket.io-client';\nimport Title from './Title';\nimport {\n  HashRouter as Router,\n  Route,\n  useLocation,\n} from \"react-router-dom\";\nimport { StyleSheet, css } from \"aphrodite\";\n\nimport { COLWIDTH, BranchNode, LeafNode, LIGHT_GREY, PTS_BLUE } from \"./Common\";\nimport { NavColumn } from \"./NavColumn\";\nimport { NavBreadcrumbs, InfoPane, Message } from \"./CentrePane\";\n\n/**\n * Top level App component.\n */\nconst App = () => {\n  return (\n    <Router>\n      <Route path=\"/\"\n        render={\n          ({ location }) => {\n            return <TestRunner url={location.pathname} />;\n          }\n        }\n      />\n    </Router>\n  );\n};\n\ninterface TestRunnerProps {\n  url: string | null,\n}\n\ninterface TestRunnerState {\n  resultTree: BranchNode | null,\n  loading: boolean,\n  socket: SocketIOClient.Socket | null,\n  errorMessage: string | null,\n}\n\nclass TestRunner extends React.Component<TestRunnerProps, TestRunnerState> {\n  constructor(props: TestRunnerProps) {\n    super(props);\n    this.state = {\n      resultTree: null,\n      loading: false,\n      socket: null,\n      errorMessage: null,\n    }\n    this.handleUpdate = this.handleUpdate.bind(this);\n    this.handleTestRun = this.handleTestRun.bind(this);\n    this.handleEnvToggle = this.handleEnvToggle.bind(this);\n  }\n\n  /**\n   * When the component mounts, we initiate the websocket connection and\n   * make an API call to get the result tree.\n   */\n  componentDidMount() {\n    const socket = io();\n    this.setState({ loading: true, socket: socket }, () => {\n      socket.on('update', this.handleUpdate);\n      this.getResultTree(100);\n    });\n  }\n\n  /**\n   * Make an API call to get the result tree data. Called at start of day when\n   * this component mounts, then further updates are handled by the websocket\n   * connection.\n   */\n  getResultTree(backoff: number) {\n    axios.get(\"/api/v1/result-tree\").then(response => {\n      this.setState({ resultTree: response.data, loading: false });\n    }).catch((reason: any) => {\n      console.log(\"API error: \" + reason);\n      setTimeout(() => this.getResultTree(2*backoff), backoff);\n    });\n  }\n\n  /**\n   * Handle an update event received over a websocket.\n   * @param data Update data received over socket\n   */\n  handleUpdate(tree: BranchNode) {\n    console.log(\"Handling websocket update\");\n    this.setState({ resultTree: tree });\n  }\n\n  /**\n   * Run a test after its run button has been clicked.\n   * @param short_id ID of node to run\n   */\n  handleTestRun(nodeid: string) {\n    if (!this.state.socket) {\n      console.log(\"Socket connection not yet established\");\n      return;\n    }\n    this.state.socket.emit(\"run test\", nodeid);\n  }\n\n  /**\n   * Run a test after its run button has been clicked.\n   * @param short_id ID of node to run\n   */\n  handleEnvToggle(nodeid: string, start: boolean) {\n    if (!this.state.socket) {\n      console.log(\"Socket connection not yet established\");\n      return;\n    }\n    if (start) {\n      this.state.socket.emit(\"start env\", nodeid);\n    } else {\n      this.state.socket.emit(\"stop env\", nodeid);\n    }\n  }\n\n  /**\n   * Render the test runner UI. Currently this component acts as the stateful\n   * store and hands off rendering logic to a separate stateless component.\n   */\n  render() {\n    const selection = parseSelection(this.props.url);\n\n//     if (this.state.loading) {\n//       return <MessageDisplay message=\"Loading...\" selection={selection} />;\n//     }\n\n    if (this.state.errorMessage) {\n      return (\n        <MessageDisplay\n          message={this.state.errorMessage}\n          selection={selection}\n        />\n      );\n    }\n\n    try {\n      const { childBranches, childLeaves } = getCurrSelection(\n        selection,\n        this.state.resultTree,\n      );\n\n      return (\n        <div>\n        <TestRunnerDisplay\n          childBranches={childBranches}\n          childLeaves={childLeaves}\n          selection={selection}\n          handleTestRun={this.handleTestRun}\n          handleEnvToggle={this.handleEnvToggle}\n        />\n        </div>\n      );\n    } catch (error) {\n      if (error instanceof SelectionNotFound) {\n        return <MessageDisplay message=\"404 Page Not Found\" selection={selection} />;\n      }\n      throw error;\n    }\n  }\n}\n\n/**\n * Parse the current URL path (excluding query parameters) and return the\n * short_ids of the currently selected branches.\n * @param url URL path string\n */\nconst parseSelection = (url: string | null): Array<string> => {\n  if (!url) {\n    return [];\n  }\n\n  const trimmedPath = url.replace(/^\\/+|\\/+$/g, '');\n  if (trimmedPath.length === 0) {\n    return [];\n  }\n  const pathElements = trimmedPath.split(\"/\");\n  return pathElements.map(decodeURIComponent);\n};\n\ninterface TestRunnerDisplayProps {\n  childBranches: { [key: string]: BranchNode },\n  childLeaves: { [key: string]: LeafNode },\n  selection: Array<string>,\n  handleTestRun: (short_id: string) => void,\n  handleEnvToggle: (nodeid: string, start: boolean) => void,\n}\n\n/**\n * Render the navigation column, top breadcrumb menu and the central information\n * pane together.\n * @param props render properties\n */\nconst TestRunnerDisplay = (props: TestRunnerDisplayProps) => {\n  const query = useQuery();\n  const selectedLeafID = query.get(\"selectedLeaf\");\n  const selectedLeaf = selectedLeafID ? props.childLeaves[selectedLeafID] : null;\n\n  return (\n    <div>\n      <NavColumn\n        childBranches={props.childBranches}\n        childLeaves={props.childLeaves}\n        selectedLeafID={selectedLeafID}\n        selection={props.selection}\n        handleTestRun={props.handleTestRun}\n        handleEnvToggle={props.handleEnvToggle}\n      />\n      <div className={css(styles.centrePane)}>\n        <div className={css(steal.heading)}> <Title /> </div>\n        <NavBreadcrumbs selection={props.selection} />\n        <InfoPane selectedLeaf={selectedLeaf} />\n      </div>\n    </div>\n  );\n};\n\ninterface MessageDisplayProps {\n  message: string,\n  selection: Array<string>,\n}\n\n/**\n * Display a message.\n */\nconst MessageDisplay = (props: MessageDisplayProps) => (\n  <div>\n    <NavColumn\n      childBranches={{}}\n      childLeaves={{}}\n      selectedLeafID={null}\n      selection={[]}\n      handleTestRun={(nodeid: string) => undefined}\n      handleEnvToggle={(nodeid: string, start: boolean) => undefined}\n    />\n    <div className={css(styles.centrePane)}>\n      <NavBreadcrumbs selection={props.selection} />\n      <Message message={props.message} />\n    </div>\n  </div>\n);\n\n/**\n * Modified react hook to parse the current query parameters in the URL. These\n * are expected in the form \"?x=y\".\n */\nconst useQuery = () => new URLSearchParams(useLocation().search);\n\n/**\n * Get the currently selected branch node, or null if the result tree is not yet\n * loaded.\n * @param state App state\n */\nconst getCurrSelection = (\n  selection: Array<string>, resultTree: BranchNode | null\n): {\n  childBranches: { [key: string]: BranchNode },\n  childLeaves: { [key: string]: LeafNode },\n} => {\n  if (!resultTree) {\n    return { childBranches: {}, childLeaves: {} };\n  }\n  if (selection.length === 0) {\n    return {\n      childBranches: { [resultTree.short_id]: resultTree },\n      childLeaves: {},\n    };\n  }\n\n  const selectedBranch = selection.slice(1).reduce(\n    (node: BranchNode | undefined, selection: string) => (\n      node?.child_branches[selection]\n    ),\n    resultTree,\n  );\n  if (selectedBranch) {\n    return {\n      childBranches: selectedBranch.child_branches,\n      childLeaves: selectedBranch.child_leaves\n    };\n  } else {\n    throw new SelectionNotFound(\"Not found\", selection);\n  }\n};\n\nconst styles = StyleSheet.create({\n  centrePane: {\n    \"margin-left\": COLWIDTH,\n    padding: \"10px 10px\",\n  },\n});\n\nconst steal = StyleSheet.create({\n  heading: {\n    \"margin-left\": \"8em\",\n    \"margin-right\": \"8em\",\n    alignItems: 'center',\n    textAlign: 'center',\n    padding: \"10px 10px\",\n    color: PTS_BLUE,\n    background: LIGHT_GREY,\n  },\n});\n\nclass SelectionNotFound extends Error {\n  public selection: Array<string>\n\n  constructor(message: string, selection: Array<string>) {\n    super(message);\n    this.selection = selection;\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}