# coding: utf-8


"""
IGNORE:
    Nutanix Storage Versioned APIs

    Manages volume groups and storage containers in Nutanix cluster.  # noqa: E501

    OpenAPI spec version: 4.0.2-alpha-3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six

"""
IGNORE:
NOTE: This class is auto generated by the swagger code generator program.

Do not edit the class manually.
IGNORE
"""


class DataStoreMount(object):
    """DataStoreMount - a model defined in Swagger"""
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """ # noqa: E501
    swagger_types = {
        'datastore_name': 'str',
        'container_name': 'str',
        'node_ids': 'list[str]',
        'node_ext_ids': 'list[str]',
        'read_only': 'bool',
        'target_path': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'datastore_name': 'datastoreName',
        'container_name': 'containerName',
        'node_ids': 'nodeIds',
        'node_ext_ids': 'nodeExtIds',
        'read_only': 'readOnly',
        'target_path': 'targetPath',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, datastore_name=None, container_name=None, node_ids=None, node_ext_ids=None, read_only=None, target_path=None, *args, **kwargs):  # noqa: E501
        """DataStoreMount - a model defined in Swagger
            \ncreate NFS datastores on the ESX hosts.
        """
        self.__datastore_name = None
        self.__container_name = None
        self.__node_ids = None
        self.__node_ext_ids = None
        self.__read_only = None
        self.__target_path = None
        self.discriminator = None
        if datastore_name is not None:
            self.__datastore_name = datastore_name
        self.__container_name = container_name
        if node_ids is not None:
            self.__node_ids = node_ids
        if node_ext_ids is not None:
            self.__node_ext_ids = node_ext_ids
        if read_only is not None:
            self.__read_only = read_only
        if target_path is not None:
            self.__target_path = target_path
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'storage.v4.config.DataStoreMount'

    def _initialize_fq_object_type(self):
        return 'storage.v4.r0.a3.config.DataStoreMount'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fqObjectType": self._initialize_fq_object_type()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def datastore_name(self):
        """`{ str }`
            \nName of the datastore.
        """ # noqa: E501
        return self.__datastore_name

    @datastore_name.setter
    def datastore_name(self, datastore_name):
        if datastore_name is not None and len(datastore_name) > 255:
            raise ValueError("Invalid value for `datastore_name`, length must be less than or equal to `255`")  # noqa: E501

        self.__datastore_name = datastore_name

    @property
    def container_name(self):
        """`{ str }`
            \nName of the storage container.
        """ # noqa: E501
        return self.__container_name

    @container_name.setter
    def container_name(self, container_name):
        if container_name is None:
            raise ValueError("Invalid value for `container_name`, must not be `None`")  # noqa: E501
        if container_name is not None and len(container_name) > 255:
            raise ValueError("Invalid value for `container_name`, length must be less than or equal to `255`")  # noqa: E501

        self.__container_name = container_name

    @property
    def node_ids(self):
        """`{ list[str] }`
            \nThe Zeus config ids of the nodes where the NFS datastore have to be created.
        """ # noqa: E501
        return self.__node_ids

    @node_ids.setter
    def node_ids(self, node_ids):

        self.__node_ids = node_ids

    @property
    def node_ext_ids(self):
        """`{ list[str] }`
            \nThe Uuids of the nodes where the NFS datastore have to be created.
        """ # noqa: E501
        return self.__node_ext_ids

    @node_ext_ids.setter
    def node_ext_ids(self, node_ext_ids):

        self.__node_ext_ids = node_ext_ids

    @property
    def read_only(self):
        """`{ bool }`
            \nif the host system have only read-only access to the NFS share (container).
        """ # noqa: E501
        return self.__read_only

    @read_only.setter
    def read_only(self, read_only):

        self.__read_only = read_only

    @property
    def target_path(self):
        """`{ str }`
            \nThe target path on which to mount the NFS datastore. KVM-only.
        """ # noqa: E501
        return self.__target_path

    @target_path.setter
    def target_path(self, target_path):

        self.__target_path = target_path

    @property
    def _reserved(self):
        """`{ dict(str, object) }`
            
        """ # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """`{ str }`
            
        """ # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """`{ dict(str, object) }`
            
        """ # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """
        Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.
        :param bool sanitize
        """

        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize))
                    if hasattr(item[1], "_to_dict") else item,
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(DataStoreMount, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dict"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataStoreMount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

