# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['reflekt', 'reflekt.builder', 'reflekt.registry']

package_data = \
{'': ['*'],
 'reflekt': ['_templates/dbt_package/*',
             '_templates/dbt_package/models/*',
             '_templates/reflekt_project/*',
             '_templates/reflekt_project/artifacts/*',
             '_templates/reflekt_project/schemas/*',
             '_templates/reflekt_project/schemas/.reflekt/event-meta/*',
             '_templates/reflekt_project/schemas/.reflekt/profile/*',
             '_templates/reflekt_project/schemas/.reflekt/project/*',
             '_templates/reflekt_project/schemas/.reflekt/segment/common/*']}

install_requires = \
['GitPython>=3.1.27,<4.0.0',
 'PyYAML>=6.0,<7.0',
 'inflection>=0.5.1,<0.6.0',
 'jsonschema>=4.16.0,<5.0.0',
 'loguru>=0.6.0,<0.7.0',
 'python-dotenv>=0.21.0,<0.22.0',
 'redshift-connector>=2.0.909,<3.0.0',
 'rich>=12.5.1,<13.0.0',
 'snowflake-connector-python>=2.9.0,<3.0.0',
 'snowflake-sqlalchemy==1.4.5',
 'sqlalchemy-redshift>=0.8.12,<0.9.0',
 'typer>=0.6.1,<0.7.0']

entry_points = \
{'console_scripts': ['reflekt = reflekt.cli:app']}

setup_kwargs = {
    'name': 'reflekt',
    'version': '0.3.1',
    'description': 'A CLI tool to define event schemas, lint them, interact with schema registries, and build corresponding data artifacts (e.g., dbt package).',
    'long_description': '<!--\nSPDX-FileCopyrightText: 2022 Gregory Clunies <greg@reflekt-ci.com>\n\nSPDX-License-Identifier: Apache-2.0\n-->\n\n# Reflekt\n![PyPI](https://img.shields.io/pypi/v/reflekt?style=for-the-badge)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/reflekt?style=for-the-badge)\n![GitHub](https://img.shields.io/github/license/gclunies/reflekt?style=for-the-badge)\n\nA CLI tool to help Data, Engineering, and Product teams:\n- Define event schemas as `code` using [JSONschema](https://json-schema.org/), providing a version controlled source of truth.\n- Lint schemas to enforce agreed-upon conventions (configurable). Run `reflekt lint` in a CI/CD pipeline to check:\n    - Naming conventions (snake_case, camelCase, Title Case, etc.)\n    - Descriptions are always included.\n    - Required metadata is defined.\n- Interact with schema registries\n  - Push schema(s) from a Reflekt project to a schema registry where they can be used for event data validation.\n  - Pull schema(s) from a schema registry into a Reflekt project to build corresponding data artifacts.\n- Build data artifacts (e.g., dbt packages) based on schemas that model and document event data.\n  - Keep data artifacts in sync with instrumentation - ready for use by engineers, analysts, and the business.\n  - Reduce errors, improve data quality, and automate important (but boring) data tasks.\n\n\nhttps://user-images.githubusercontent.com/28986302/217134526-df83ec90-86f3-491e-9588-b7cd56956db1.mp4\n\n\n## Table of Contents\n  - [Installation](#installation)\n  - [Commands](#commands)\n  - [Reflekt Project Setup](#reflekt-project-setup)\n  - [Schemas](#schemas)\n  - [Using Data Artifacts](#using-data-artifacts)\n\n\n## Installation\nReflekt is available on [PyPI](https://pypi.org/project/reflekt/). Install with `pip`:\n```bash\npip install reflekt\n```\n\n\n## Commands\nA list of CLI commands and arguments can be accessed by running `reflekt --help`. Each Command has a `--help` flag to provide command details (arguments, options, etc.). All commands (except `init`) can be run against a single or multiple schema(s). The command examples below give an overview of the syntax.\n\nSee the [argument syntax](#argument-syntax) section for more details on selecting [schemas](#--select), specifying [sources](#--source) and [SDKs](--sdk) used to collect event data.\n\n### `init`\nInitialize a Reflekt project.\n```bash\nreflekt init --dir /path/to/project\n```\n\n### `pull`\nPull schemas from a schema registry and create the corresponding structure in project `schemas/` directory.\n```bash\n# Pull all schemas from \'ecommerce\' tracking plan in Segment to schemas/segment/ecommerce/\nreflekt pull --select segment/ecommerce/\n```\nSupported registries: [Segment](https://segment.com/), [Avo](https://avo.app/)\n\n### `push`\nPush schemas in project `schemas/` directory to a schema registry.\n```bash\n# Push all schemas in schemas/segment/ecommerce/ to Segment tracking plan \'ecommerce\'\nreflekt push --select segment/ecommerce/CartViewed\n```\nSupported registries: [Segment](https://segment.com/)\n\n### `lint`\nLint schemas in project `schemas/` directory.\n```bash\n# Lint a single schema (.json is optional)\nreflekt lint --select segment/ecommerce/CartViewed/1-0.json\n```\nLinting checks include:\n- Event and property names match the configured naming conventions in `reflekt_project.yml`.\n- Only valid data types are used (e.g., disallow `null` or `any` types).\n- Descriptions are included for all events and properties.\n- Event schema validates against the meta-schema `schemas/.reflekt/event-meta/1-0.json`, enforcing any required metadata.\n\n### `build`\nBuild a data artifacts based on events schemas. Save time, reduce errors, and improve data quality by ensuring models and documentation are always up-to-date with the latest version of event schemas.\n\n```bash\n# Build a dbt package for:\n#   - Events collected using the Segment SDK\n#   - Event schemas defined in my_reflekt_project/schemas/segment/ecommerce/\n#   - Raw event data stored at specified source (snowflake.raw.segment_prod)\nreflekt build dbt --select segment/ecommerce --source snowflake.raw.segment_prod --sdk segment\n```\n**Supported data artifacts:**\n- [dbt packages](https://docs.getdbt.com/docs/build/packages) - defines dbt sources, models, and documentation for selected schemas and event data found in the specified [--source](#sources).\n\n\n## Reflekt Project Setup\n\n### Project Structure\nA Reflekt project is a Git repo with the following directory structure:\n```\ndemo_reflekt_project\n├── .logs/                # Reflekt command logs\n├── .reflekt_cache/       # Local cache used by Reflekt\n├── artifacts/            # Data artifacts are built here\n├── schemas/              # Event schemas are defined here\n├── .gitignore\n├── README.md\n└── reflekt_project.yml   # Project configuration\n```\nYou can use the `reflekt init` command to create a new Reflekt project. Sync the project to Github to enable collaboration and version control amongst your teams.\n\n### Configuration Files\nThere are 2 configuration files required to run Reflekt.\n\n#### `reflekt_project.yml`\nGeneral project settings, schema & linting conventions, data artifacts configuration.\n\n<details>\n<summary><code>example_reflekt_project.yml</code>(click to expand)</summary>\n<br>\n\n```yaml\n# Example reflekt_project.yml\n# GENERAL CONFIG ----------------------------------------------------------------------\nversion: 1.0\n\nname: reflekt_demo               # Project name\nvendor: com.company_name         # Default vendor for schemas in reflekt project\ndefault_profile: dev_reflekt     # Default profile to use from reflekt_profiles.yml\n# profiles_path: optional/path/to/reflekt_profiles.yml  # Optional, defaults to ~/.reflekt/reflekt_profiles.yml\n\n# SCHEMAS CONFIG ----------------------------------------------------------------------\nschemas:                        # Define schema conventions\n  conventions:\n    event:\n      casing: title             # title | snake | camel | any\n      capitalize_camel: true    # Only used if \'casing: camel\'\n      numbers: false            # Allow numbers in event names\n      reserved: []              # Reserved event names\n    property:\n      casing: snake             # title | snake | camel | any\n      capitalize_camel: true    # Only used if \'casing: camel\'\n      numbers: false            # Allow numbers in property names\n      reserved: []              # Reserved property names\n    data_types: [               # Allowed data types\n        string, integer, number, boolean, object, array, any, \'null\'\n    ]\n\n# REGISTRY CONFIG ---------------------------------------------------------------------\nregistry:                       # Additional config for schema registry if needed\n  avo:                          # Avo specific config\n    branches:                   # Provide ID for Avo branches for `reflekt pull` to work\n      staging: AbC12dEfG        # Safe to version control (See Avo docs to find branch ID: https://bit.ly/avo-docs-branch-id)\n      main: main                # \'main\' always refers to the main branch\n\n# ARTIFACTS CONFIG -----------------------------------------------------------------------\nartifacts:                      # Configure how data artifacts are built\n  dbt:                          # dbt package config\n    sources:\n      prefix: __src_            # Source files start with this prefix\n    models:\n      prefix: stg_              # Model files start with this prefix\n    docs:\n      prefix: _stg_             # Docs files start with this prefix\n      in_folder: false          # Docs files in separate folder?\n      tests:                    # Add generic dbt tests for columns found in schemas\n        id: [unique, not_null]\n\n```\n</details>\n\n#### `reflekt_profiles.yml`\nDefines connection to schema registries and sources where event data is stored.\n<details>\n<summary><code>example_reflekt_profile.yml</code>(click to expand)</summary>\n<br>\n\n```yaml\n# Example reflekt_profiles.yml\nversion: 1.0\n\ndev_reflekt:                                              # Profile name (multiple profiles can be defined)\n  registry:                                               # Define connections to schema registries (multiple allowed)\n    - type: segment\n      api_token: segment_api_token                        # https://docs.segmentapis.com/tag/Getting-Started#section/Get-an-API-token\n    - type: avo\n      workspace_id: avo_workspace_id                      # https://www.avo.app/docs/public-api/export-tracking-plan#endpoint\n      service_account_name: avo_service_account_name      # https://www.avo.app/docs/public-api/authentication#creating-service-accounts\n      service_account_secret: avo_service_account_secret\n\n  source:                                                 # Define connections to data warehouses where event data is stored (multiple TYPES allowed. Cannot have sources of the same TYPE)\n    - type: snowflake                                     # Snowflake DWH. Credentials follow.\n      account: abc12345\n      database: raw\n      warehouse: transforming\n      role: transformer\n      user: reflekt_user\n      password: reflekt_user_password\n\n    - type: redshift                                      # Redshift DWH. Credentials follow.\n      host: example-redshift-cluster-1.abc123.us-west-1.redshift.amazonaws.com\n      database: analytics\n      port: 5439\n      user: reflekt_user\n      password: reflekt_user_password\n\n```\n</details>\n\n### Metadata\nRequired metadata can be globally defined for all events in a project by modifying the `metadata` object in the `schemas/.reflekt/event-meta/1-0.json` schema. This is optional and by default no metadata is required.\n\n<details>\n<summary><code>schemas/.reflekt/event-meta/1-0.json  (click to expand example)</code></summary>\n<br>\n\n```json\n{\n    "$schema": "http://json-schema.org/draft-07/schema#",\n    "$id": ".reflekt/event-meta/1-0.json",\n    "description": "Meta-schema for all Reflekt events",\n    "self": {\n        "vendor": "reflekt",\n        "name": "meta",\n        "format": "jsonschema",\n        "version": "1-0"\n    },\n    "type": "object",\n    "allOf": [\n        {\n            "$ref": "http://json-schema.org/draft-07/schema#"\n        },\n        {\n            "properties": {\n                "self": {\n                    "type": "object",\n                    "properties": {\n                        "vendor": {\n                            "type": "string",\n                            "description": "The company, application, team, or system that authored the schema (e.g., com.company, com.company.android, com.company.marketing)"\n                        },\n                        "name": {\n                            "type": "string",\n                            "description": "The schema name. Describes what the schema is meant to capture (e.g., pageViewed, clickedLink)"\n                        },\n                        "format": {\n                            "type": "string",\n                            "description": "The format of the schema",\n                            "const": "jsonschema"\n                        },\n                        "version": {\n                            "type": "string",\n                            "description": "The schema version, in MODEL-ADDITION format (e.g., 1-0, 1-1, 2-3, etc.)",\n                            "pattern": "^[1-9][0-9]*-(0|[1-9][0-9]*)$"\n                        }\n                    },\n                    "required": ["vendor", "name", "format", "version"],\n                    "additionalProperties": false\n                },\n                "metadata": {  // EXAMPLE: Defining required metadata ( code_owner, product_owner, stakeholders)\n                    "type": "object",\n                    "description": "Required metadata for all event schemas",\n                    "properties": {\n                        "code_owner": {\n                            "type": "string"\n                        },\n                        "product_owner": {\n                            "type": "string"\n                        },\n                        "stakeholders": {\n                            "type": "array",\n                            "items": {"type": "string"}\n                        },\n                    },\n                    "required": ["code_owner", "product_owner"],\n                    "additionalProperties": false\n                },\n                "properties": {},\n                "tests": {},\n                "metrics": {\n                    "type": "object",\n                    "properties": {\n                        "dimensions": {\n                            "type": "array",\n                            "description": "Schema properties to be used as dimensions",\n                            "items": {"type": "string"}\n                        },\n                        "measures": {\n                            "type": "array",\n                            "description": "Schema properties to be used as measures",\n                            "items": { "type": "string"}\n                        }\n                    },\n                    "required": ["dimensions", "measures"],\n                    "additionalProperties": false\n                }\n            },\n            "required": ["self", "metadata", "properties"]\n        }\n    ]\n}\n\n```\n\n</details>\n\n\n## Schemas\nEvent schemas stored as JSON files in the `schemas/` directory of a project. Behind the scenes, Reflekt understands how different schema registries store and structure schemas, creating a common codified representation using [JSONschema](https://json-schema.org/). When pulling/pushing schemas from/to a schema registry, Reflekt handles the conversion between the registry\'s format and JSON Schema.\n\n### Schema `$id`\nSchemas are identified in Reflekt by their `$id` property, equal to their relative path to the `schemas/` directory. For example, the schema at `my_reflekt_project/schemas/segment/ecommerce/CartViewed/1-0.json` has the `$id` of `segment/ecommerce/CartViewed/1-0.json`.\n\nSee the [--select](#--select) syntax docs for more details on selecting schemas when running commands.\n\n### Schema Versions\nSchema changes are captured using a `MAJOR-MINOR` version spec (inspired by [SchemaVer](https://docs.snowplow.io/docs/pipeline-components-and-applications/iglu/common-architecture/schemaver/)). Schema versions start at `1-0` and are incremented as follows:\n\n- **MAJOR** - Breaking schema changes incompatible with previous data. Examples:\n  - Add/remove/rename a required property\n  - Change a property from *optional to required*\n  - Change a property\'s type\n- **MINOR** - Non-breaking schema changes compatible with previous data. Examples:\n  - Add/remove/rename an optional property\n  - Change a property from *required to optional*\n\n### Schema Registries\nReflekt supports the following schema registries. While Reflekt uses the `MAJOR-MINOR` versioning spec, registries handle schema versions differently. Compatibility with Reflekt\'s `MAJOR-MINOR` spec is included in the table below.\n| Schema Registry   | `MODEL` | `ADDITION` | Notes     |\n|-------------------|:-------:|:----------:|:----------|\n| Segment Protocols |    ✅    |      ❌    | Only supports `MODEL` (breaking changes).\n| Avo               |    ✅    |      ❌    | Schema changes managed in Avo [branches](https://www.avo.app/docs/workspace/branches) - `"version": "1-0"`(always).<br> Avo customers can build data artifacts based on their Avo tracking plan using `reflekt pull` + `reflekt build`. |\n\n### Example schema\nAn example `ProductClicked` event schema, based on the [Segment Ecommerce Spec](https://segment.com/docs/connections/spec/ecommerce/v2/#product-clicked), is shown below.\n\n<details>\n<summary><code>my_reflekt_project/schemas/segment/ecommerce/ProductClicked/1-0.json</code> (click to expand) </summary>\n<br>\n\n```json\n{\n  "$id": "segment/ecommerce/ProductClicked/1-0.json",\n  "$schema": "http://json-schema.org/draft-07/schema#",\n  "self": {\n      "vendor": "com.company_name",\n      "name": "ProductClicked",\n      "format": "jsonschema",\n      "version": "1-0"\n  },\n  "metadata": {\n      "code_owner": "engineering/ecommerce-squad",\n      "product_owner": "product_manager_name@company_name.com",\n  },\n  "type": "object",\n  "properties": {\n      "product_id": {\n          "type": "string",\n          "description": "Database id of the product being viewed"\n      },\n      "sku": {\n          "type": "string",\n          "description": "Sku of the product being viewed"\n      },\n      "category": {\n          "type": "string",\n          "description": "Category of the product being viewed"\n      },\n      "name": {\n          "type": "string",\n          "description": "Name of the product being viewed"\n      },\n      "brand": {\n          "type": "string",\n          "description": "Brand of the product being viewed"\n      },\n      "variant": {\n          "type": "string",\n          "description": "Variant of the product being viewed"\n      },\n      "price": {\n          "type": "number",\n          "description": "Price of the product ($) being viewed"\n      },\n      "quantity": {\n          "type": "integer",\n          "description": "Quantity of the product being viewed"\n      },\n      "coupon": {\n          "type": "string",\n          "description": "Coupon code associated with a product (for example, MAY_DEALS_3)"\n      },\n      "position": {\n          "type": "integer",\n          "description": "Position in the product list (ex. 3)"\n      },\n      "url": {\n          "type": "string",\n          "description": "URL of the product being viewed"\n      },\n      "image_url": {\n          "type": "string",\n          "description": "URL of the product image being viewed"\n      },\n  },\n  "required": [],\n  "additionalProperties": false,\n}\n```\n\n</details>\n\n\n## Using Data Artifacts\n\n### dbt packages\nTo use a private dbt package built by Reflekt in a downstream dbt project, add it to the `packages.yml` of the project (see examples below) and then run `dbt deps` to import it.\n\n#### dbt-core\n```yaml\npackages:\n  - git: "https://github.com/<your_user_or_org>/<your_repo>"  # Replace with Github repo URL for your Reflekt project\n    subdirectory: "dbt-packages/<reflekt_dbt_package_name>"\n    revision: v0.1.0___DBT_PKG_NAME_  # Example tag. Replace with branch, tag, or commit (full 40-character hash)\n```\n\n#### dbt-cloud\n```yaml\npackages:\n  - git: ""https://{{env_var(\'DBT_ENV_SECRET_GITHUB_PAT\')}}@github.com/<your_user_or_org>/<your_repo>.git""  # Replace with your PAT and Github repo URL for your Reflekt project\n    subdirectory: "dbt-packages/<reflekt_dbt_package_name>"\n    revision: v0.1.0___DBT_PKG_NAME_  # Example tag. Replace with branch, tag, or commit (full 40-character hash)\n```\nTo use with dbt-cloud, you will need to [create a Github personal access token](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token) (e.g., `DBT_ENV_SECRET_GITHUB_PAT`) and [configure it as an environment variable](https://docs.getdbt.com/docs/dbt-cloud/using-dbt-cloud/cloud-environment-variables) in your dbt-cloud account.\n\n',
    'author': 'Gregory Clunies',
    'author_email': 'greg.clunies@gmail.com',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://github.com/GClunies/Reflekt',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.8,<4.0',
}


setup(**setup_kwargs)
