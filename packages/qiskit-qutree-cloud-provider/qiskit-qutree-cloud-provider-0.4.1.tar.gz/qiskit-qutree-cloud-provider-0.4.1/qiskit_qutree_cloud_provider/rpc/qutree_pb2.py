# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: qutree.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x0cqutree.proto\x12\x06qutree\"Z\n\x13\x43ircuitsWithOptions\x12!\n\x08\x63ircuits\x18\x01 \x03(\x0b\x32\x0f.qutree.Circuit\x12 \n\x07options\x18\x02 \x01(\x0b\x32\x0f.qutree.Options\"9\n\x07\x43ircuit\x12\x1e\n\x03ops\x18\x01 \x03(\x0b\x32\x11.qutree.Operation\x12\x0e\n\x06nqubit\x18\x02 \x01(\r\"9\n\tOperation\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x0e\n\x06qubits\x18\x02 \x03(\r\x12\x0e\n\x06params\x18\x03 \x03(\x01\"s\n\x07Options\x12\r\n\x05shots\x18\x01 \x01(\r\x12\x11\n\ttree_type\x18\x02 \x01(\t\x12\x11\n\tvbond_dim\x18\x03 \x01(\r\x12\x16\n\x0etree_structure\x18\x04 \x01(\t\x12\x1b\n\x13vbond_dim_increment\x18\x05 \x01(\r\"8\n\x0e\x43ircuitResults\x12&\n\x07results\x18\x01 \x03(\x0b\x32\x15.qutree.CircuitResult\"\x85\x01\n\rCircuitResult\x12\x31\n\x06\x63ounts\x18\x01 \x03(\x0b\x32!.qutree.CircuitResult.CountsEntry\x12\x12\n\ntime_taken\x18\x02 \x01(\r\x1a-\n\x0b\x43ountsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\r:\x02\x38\x01\"\x8e\x01\n\x1e\x43ircuitsObservablesWithOptions\x12!\n\x08\x63ircuits\x18\x01 \x03(\x0b\x32\x0f.qutree.Circuit\x12\'\n\x0bobservables\x18\x02 \x03(\x0b\x32\x12.qutree.Observable\x12 \n\x07options\x18\x03 \x01(\x0b\x32\x0f.qutree.Options\"-\n\nObservable\x12\x1f\n\x06paulis\x18\x01 \x03(\x0b\x32\x0f.qutree.PauliOp\"6\n\x07PauliOp\x12\r\n\x05\x63oeff\x18\x01 \x01(\x02\x12\r\n\x05ind_z\x18\x02 \x03(\r\x12\r\n\x05ind_x\x18\x03 \x03(\r\"@\n\x12\x45xpectationResults\x12*\n\x07results\x18\x01 \x03(\x0b\x32\x19.qutree.ExpectationResult\"7\n\x11\x45xpectationResult\x12\x0e\n\x06\x65xpval\x18\x01 \x01(\x02\x12\x12\n\ntime_taken\x18\x02 \x01(\r\"\x96\x01\n\x1cPortfolioSCFParamWithOptions\x12/\n\x0fportfolio_param\x18\x01 \x01(\x0b\x32\x16.qutree.PortfolioParam\x12#\n\tscf_param\x18\x02 \x01(\x0b\x32\x10.qutree.SCFParam\x12 \n\x07options\x18\x03 \x01(\x0b\x32\x0f.qutree.Options\"f\n\x0ePortfolioParam\x12\n\n\x02mu\x18\x01 \x03(\x01\x12\x12\n\ncovariance\x18\x02 \x03(\x01\x12\r\n\x05\x61lpha\x18\x03 \x01(\x02\x12\r\n\x05gamma\x18\x04 \x01(\x02\x12\x0b\n\x03rho\x18\x05 \x01(\x02\x12\t\n\x01k\x18\x06 \x01(\x02\"W\n\x08SCFParam\x12\x0e\n\x06n_iter\x18\x01 \x01(\r\x12\x10\n\x08n_krylov\x18\x02 \x01(\r\x12\r\n\x05n_itp\x18\x03 \x01(\r\x12\x0c\n\x04\x62\x65ta\x18\x04 \x01(\x02\x12\x0c\n\x04seed\x18\x05 \x01(\x03\"}\n\tSCFResult\x12-\n\x06\x63ounts\x18\x01 \x03(\x0b\x32\x1d.qutree.SCFResult.CountsEntry\x12\x12\n\ntime_taken\x18\x02 \x01(\r\x1a-\n\x0b\x43ountsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\r:\x02\x38\x01\"\xcd\x01\n\'PortfolioDiscreteSolverParamWithOptions\x12\x44\n\x1aportfolio_constraint_param\x18\x01 \x01(\x0b\x32 .qutree.PortfolioConstraintParam\x12:\n\x15\x64iscrete_solver_param\x18\x02 \x01(\x0b\x32\x1b.qutree.DiscreteSolverParam\x12 \n\x07options\x18\x03 \x01(\x0b\x32\x0f.qutree.Options\"y\n\x18PortfolioConstraintParam\x12\n\n\x02mu\x18\x01 \x03(\x01\x12\x12\n\ncovariance\x18\x02 \x03(\x01\x12\r\n\x05\x61lpha\x18\x03 \x01(\x02\x12\r\n\x05gamma\x18\x04 \x01(\x02\x12\t\n\x01\x61\x18\x05 \x03(\x01\x12\t\n\x01\x62\x18\x06 \x03(\x01\x12\t\n\x01r\x18\x07 \x01(\x02\"4\n\x13\x44iscreteSolverParam\x12\x0f\n\x07n_sweep\x18\x01 \x01(\r\x12\x0c\n\x04seed\x18\x02 \x01(\x03\x32\xf0\x02\n\x0cQuTreeRunner\x12\x43\n\nRunCircuit\x12\x1b.qutree.CircuitsWithOptions\x1a\x16.qutree.CircuitResults\"\x00\x12Z\n\x12\x43omputeExpectation\x12&.qutree.CircuitsObservablesWithOptions\x1a\x1a.qutree.ExpectationResults\"\x00\x12U\n\x18RunPortfolioOptimization\x12$.qutree.PortfolioSCFParamWithOptions\x1a\x11.qutree.SCFResult\"\x00\x12h\n RunPortfolioOptimizationDiscrete\x12/.qutree.PortfolioDiscreteSolverParamWithOptions\x1a\x11.qutree.SCFResult\"\x00\x62\x06proto3')



_CIRCUITSWITHOPTIONS = DESCRIPTOR.message_types_by_name['CircuitsWithOptions']
_CIRCUIT = DESCRIPTOR.message_types_by_name['Circuit']
_OPERATION = DESCRIPTOR.message_types_by_name['Operation']
_OPTIONS = DESCRIPTOR.message_types_by_name['Options']
_CIRCUITRESULTS = DESCRIPTOR.message_types_by_name['CircuitResults']
_CIRCUITRESULT = DESCRIPTOR.message_types_by_name['CircuitResult']
_CIRCUITRESULT_COUNTSENTRY = _CIRCUITRESULT.nested_types_by_name['CountsEntry']
_CIRCUITSOBSERVABLESWITHOPTIONS = DESCRIPTOR.message_types_by_name['CircuitsObservablesWithOptions']
_OBSERVABLE = DESCRIPTOR.message_types_by_name['Observable']
_PAULIOP = DESCRIPTOR.message_types_by_name['PauliOp']
_EXPECTATIONRESULTS = DESCRIPTOR.message_types_by_name['ExpectationResults']
_EXPECTATIONRESULT = DESCRIPTOR.message_types_by_name['ExpectationResult']
_PORTFOLIOSCFPARAMWITHOPTIONS = DESCRIPTOR.message_types_by_name['PortfolioSCFParamWithOptions']
_PORTFOLIOPARAM = DESCRIPTOR.message_types_by_name['PortfolioParam']
_SCFPARAM = DESCRIPTOR.message_types_by_name['SCFParam']
_SCFRESULT = DESCRIPTOR.message_types_by_name['SCFResult']
_SCFRESULT_COUNTSENTRY = _SCFRESULT.nested_types_by_name['CountsEntry']
_PORTFOLIODISCRETESOLVERPARAMWITHOPTIONS = DESCRIPTOR.message_types_by_name['PortfolioDiscreteSolverParamWithOptions']
_PORTFOLIOCONSTRAINTPARAM = DESCRIPTOR.message_types_by_name['PortfolioConstraintParam']
_DISCRETESOLVERPARAM = DESCRIPTOR.message_types_by_name['DiscreteSolverParam']
CircuitsWithOptions = _reflection.GeneratedProtocolMessageType('CircuitsWithOptions', (_message.Message,), {
  'DESCRIPTOR' : _CIRCUITSWITHOPTIONS,
  '__module__' : 'qutree_pb2'
  # @@protoc_insertion_point(class_scope:qutree.CircuitsWithOptions)
  })
_sym_db.RegisterMessage(CircuitsWithOptions)

Circuit = _reflection.GeneratedProtocolMessageType('Circuit', (_message.Message,), {
  'DESCRIPTOR' : _CIRCUIT,
  '__module__' : 'qutree_pb2'
  # @@protoc_insertion_point(class_scope:qutree.Circuit)
  })
_sym_db.RegisterMessage(Circuit)

Operation = _reflection.GeneratedProtocolMessageType('Operation', (_message.Message,), {
  'DESCRIPTOR' : _OPERATION,
  '__module__' : 'qutree_pb2'
  # @@protoc_insertion_point(class_scope:qutree.Operation)
  })
_sym_db.RegisterMessage(Operation)

Options = _reflection.GeneratedProtocolMessageType('Options', (_message.Message,), {
  'DESCRIPTOR' : _OPTIONS,
  '__module__' : 'qutree_pb2'
  # @@protoc_insertion_point(class_scope:qutree.Options)
  })
_sym_db.RegisterMessage(Options)

CircuitResults = _reflection.GeneratedProtocolMessageType('CircuitResults', (_message.Message,), {
  'DESCRIPTOR' : _CIRCUITRESULTS,
  '__module__' : 'qutree_pb2'
  # @@protoc_insertion_point(class_scope:qutree.CircuitResults)
  })
_sym_db.RegisterMessage(CircuitResults)

CircuitResult = _reflection.GeneratedProtocolMessageType('CircuitResult', (_message.Message,), {

  'CountsEntry' : _reflection.GeneratedProtocolMessageType('CountsEntry', (_message.Message,), {
    'DESCRIPTOR' : _CIRCUITRESULT_COUNTSENTRY,
    '__module__' : 'qutree_pb2'
    # @@protoc_insertion_point(class_scope:qutree.CircuitResult.CountsEntry)
    })
  ,
  'DESCRIPTOR' : _CIRCUITRESULT,
  '__module__' : 'qutree_pb2'
  # @@protoc_insertion_point(class_scope:qutree.CircuitResult)
  })
_sym_db.RegisterMessage(CircuitResult)
_sym_db.RegisterMessage(CircuitResult.CountsEntry)

CircuitsObservablesWithOptions = _reflection.GeneratedProtocolMessageType('CircuitsObservablesWithOptions', (_message.Message,), {
  'DESCRIPTOR' : _CIRCUITSOBSERVABLESWITHOPTIONS,
  '__module__' : 'qutree_pb2'
  # @@protoc_insertion_point(class_scope:qutree.CircuitsObservablesWithOptions)
  })
_sym_db.RegisterMessage(CircuitsObservablesWithOptions)

Observable = _reflection.GeneratedProtocolMessageType('Observable', (_message.Message,), {
  'DESCRIPTOR' : _OBSERVABLE,
  '__module__' : 'qutree_pb2'
  # @@protoc_insertion_point(class_scope:qutree.Observable)
  })
_sym_db.RegisterMessage(Observable)

PauliOp = _reflection.GeneratedProtocolMessageType('PauliOp', (_message.Message,), {
  'DESCRIPTOR' : _PAULIOP,
  '__module__' : 'qutree_pb2'
  # @@protoc_insertion_point(class_scope:qutree.PauliOp)
  })
_sym_db.RegisterMessage(PauliOp)

ExpectationResults = _reflection.GeneratedProtocolMessageType('ExpectationResults', (_message.Message,), {
  'DESCRIPTOR' : _EXPECTATIONRESULTS,
  '__module__' : 'qutree_pb2'
  # @@protoc_insertion_point(class_scope:qutree.ExpectationResults)
  })
_sym_db.RegisterMessage(ExpectationResults)

ExpectationResult = _reflection.GeneratedProtocolMessageType('ExpectationResult', (_message.Message,), {
  'DESCRIPTOR' : _EXPECTATIONRESULT,
  '__module__' : 'qutree_pb2'
  # @@protoc_insertion_point(class_scope:qutree.ExpectationResult)
  })
_sym_db.RegisterMessage(ExpectationResult)

PortfolioSCFParamWithOptions = _reflection.GeneratedProtocolMessageType('PortfolioSCFParamWithOptions', (_message.Message,), {
  'DESCRIPTOR' : _PORTFOLIOSCFPARAMWITHOPTIONS,
  '__module__' : 'qutree_pb2'
  # @@protoc_insertion_point(class_scope:qutree.PortfolioSCFParamWithOptions)
  })
_sym_db.RegisterMessage(PortfolioSCFParamWithOptions)

PortfolioParam = _reflection.GeneratedProtocolMessageType('PortfolioParam', (_message.Message,), {
  'DESCRIPTOR' : _PORTFOLIOPARAM,
  '__module__' : 'qutree_pb2'
  # @@protoc_insertion_point(class_scope:qutree.PortfolioParam)
  })
_sym_db.RegisterMessage(PortfolioParam)

SCFParam = _reflection.GeneratedProtocolMessageType('SCFParam', (_message.Message,), {
  'DESCRIPTOR' : _SCFPARAM,
  '__module__' : 'qutree_pb2'
  # @@protoc_insertion_point(class_scope:qutree.SCFParam)
  })
_sym_db.RegisterMessage(SCFParam)

SCFResult = _reflection.GeneratedProtocolMessageType('SCFResult', (_message.Message,), {

  'CountsEntry' : _reflection.GeneratedProtocolMessageType('CountsEntry', (_message.Message,), {
    'DESCRIPTOR' : _SCFRESULT_COUNTSENTRY,
    '__module__' : 'qutree_pb2'
    # @@protoc_insertion_point(class_scope:qutree.SCFResult.CountsEntry)
    })
  ,
  'DESCRIPTOR' : _SCFRESULT,
  '__module__' : 'qutree_pb2'
  # @@protoc_insertion_point(class_scope:qutree.SCFResult)
  })
_sym_db.RegisterMessage(SCFResult)
_sym_db.RegisterMessage(SCFResult.CountsEntry)

PortfolioDiscreteSolverParamWithOptions = _reflection.GeneratedProtocolMessageType('PortfolioDiscreteSolverParamWithOptions', (_message.Message,), {
  'DESCRIPTOR' : _PORTFOLIODISCRETESOLVERPARAMWITHOPTIONS,
  '__module__' : 'qutree_pb2'
  # @@protoc_insertion_point(class_scope:qutree.PortfolioDiscreteSolverParamWithOptions)
  })
_sym_db.RegisterMessage(PortfolioDiscreteSolverParamWithOptions)

PortfolioConstraintParam = _reflection.GeneratedProtocolMessageType('PortfolioConstraintParam', (_message.Message,), {
  'DESCRIPTOR' : _PORTFOLIOCONSTRAINTPARAM,
  '__module__' : 'qutree_pb2'
  # @@protoc_insertion_point(class_scope:qutree.PortfolioConstraintParam)
  })
_sym_db.RegisterMessage(PortfolioConstraintParam)

DiscreteSolverParam = _reflection.GeneratedProtocolMessageType('DiscreteSolverParam', (_message.Message,), {
  'DESCRIPTOR' : _DISCRETESOLVERPARAM,
  '__module__' : 'qutree_pb2'
  # @@protoc_insertion_point(class_scope:qutree.DiscreteSolverParam)
  })
_sym_db.RegisterMessage(DiscreteSolverParam)

_QUTREERUNNER = DESCRIPTOR.services_by_name['QuTreeRunner']
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _CIRCUITRESULT_COUNTSENTRY._options = None
  _CIRCUITRESULT_COUNTSENTRY._serialized_options = b'8\001'
  _SCFRESULT_COUNTSENTRY._options = None
  _SCFRESULT_COUNTSENTRY._serialized_options = b'8\001'
  _CIRCUITSWITHOPTIONS._serialized_start=24
  _CIRCUITSWITHOPTIONS._serialized_end=114
  _CIRCUIT._serialized_start=116
  _CIRCUIT._serialized_end=173
  _OPERATION._serialized_start=175
  _OPERATION._serialized_end=232
  _OPTIONS._serialized_start=234
  _OPTIONS._serialized_end=349
  _CIRCUITRESULTS._serialized_start=351
  _CIRCUITRESULTS._serialized_end=407
  _CIRCUITRESULT._serialized_start=410
  _CIRCUITRESULT._serialized_end=543
  _CIRCUITRESULT_COUNTSENTRY._serialized_start=498
  _CIRCUITRESULT_COUNTSENTRY._serialized_end=543
  _CIRCUITSOBSERVABLESWITHOPTIONS._serialized_start=546
  _CIRCUITSOBSERVABLESWITHOPTIONS._serialized_end=688
  _OBSERVABLE._serialized_start=690
  _OBSERVABLE._serialized_end=735
  _PAULIOP._serialized_start=737
  _PAULIOP._serialized_end=791
  _EXPECTATIONRESULTS._serialized_start=793
  _EXPECTATIONRESULTS._serialized_end=857
  _EXPECTATIONRESULT._serialized_start=859
  _EXPECTATIONRESULT._serialized_end=914
  _PORTFOLIOSCFPARAMWITHOPTIONS._serialized_start=917
  _PORTFOLIOSCFPARAMWITHOPTIONS._serialized_end=1067
  _PORTFOLIOPARAM._serialized_start=1069
  _PORTFOLIOPARAM._serialized_end=1171
  _SCFPARAM._serialized_start=1173
  _SCFPARAM._serialized_end=1260
  _SCFRESULT._serialized_start=1262
  _SCFRESULT._serialized_end=1387
  _SCFRESULT_COUNTSENTRY._serialized_start=498
  _SCFRESULT_COUNTSENTRY._serialized_end=543
  _PORTFOLIODISCRETESOLVERPARAMWITHOPTIONS._serialized_start=1390
  _PORTFOLIODISCRETESOLVERPARAMWITHOPTIONS._serialized_end=1595
  _PORTFOLIOCONSTRAINTPARAM._serialized_start=1597
  _PORTFOLIOCONSTRAINTPARAM._serialized_end=1718
  _DISCRETESOLVERPARAM._serialized_start=1720
  _DISCRETESOLVERPARAM._serialized_end=1772
  _QUTREERUNNER._serialized_start=1775
  _QUTREERUNNER._serialized_end=2143
# @@protoc_insertion_point(module_scope)
