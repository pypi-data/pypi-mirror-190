# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import qutree_pb2 as qutree__pb2


class QuTreeRunnerStub(object):
    """QuTree simulator as a service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RunCircuit = channel.unary_unary(
                '/qutree.QuTreeRunner/RunCircuit',
                request_serializer=qutree__pb2.CircuitsWithOptions.SerializeToString,
                response_deserializer=qutree__pb2.CircuitResults.FromString,
                )
        self.ComputeExpectation = channel.unary_unary(
                '/qutree.QuTreeRunner/ComputeExpectation',
                request_serializer=qutree__pb2.CircuitsObservablesWithOptions.SerializeToString,
                response_deserializer=qutree__pb2.ExpectationResults.FromString,
                )
        self.RunPortfolioOptimization = channel.unary_unary(
                '/qutree.QuTreeRunner/RunPortfolioOptimization',
                request_serializer=qutree__pb2.PortfolioSCFParamWithOptions.SerializeToString,
                response_deserializer=qutree__pb2.SCFResult.FromString,
                )
        self.RunPortfolioOptimizationDiscrete = channel.unary_unary(
                '/qutree.QuTreeRunner/RunPortfolioOptimizationDiscrete',
                request_serializer=qutree__pb2.PortfolioDiscreteSolverParamWithOptions.SerializeToString,
                response_deserializer=qutree__pb2.SCFResult.FromString,
                )


class QuTreeRunnerServicer(object):
    """QuTree simulator as a service
    """

    def RunCircuit(self, request, context):
        """Execute Qiskit circuits
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ComputeExpectation(self, request, context):
        """Compute <circuit|observable|circuit>
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunPortfolioOptimization(self, request, context):
        """Compute SCF-based Portfolio Optimization
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunPortfolioOptimizationDiscrete(self, request, context):
        """Compute SCF-based Portfolio Optimization with discrete solver
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QuTreeRunnerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RunCircuit': grpc.unary_unary_rpc_method_handler(
                    servicer.RunCircuit,
                    request_deserializer=qutree__pb2.CircuitsWithOptions.FromString,
                    response_serializer=qutree__pb2.CircuitResults.SerializeToString,
            ),
            'ComputeExpectation': grpc.unary_unary_rpc_method_handler(
                    servicer.ComputeExpectation,
                    request_deserializer=qutree__pb2.CircuitsObservablesWithOptions.FromString,
                    response_serializer=qutree__pb2.ExpectationResults.SerializeToString,
            ),
            'RunPortfolioOptimization': grpc.unary_unary_rpc_method_handler(
                    servicer.RunPortfolioOptimization,
                    request_deserializer=qutree__pb2.PortfolioSCFParamWithOptions.FromString,
                    response_serializer=qutree__pb2.SCFResult.SerializeToString,
            ),
            'RunPortfolioOptimizationDiscrete': grpc.unary_unary_rpc_method_handler(
                    servicer.RunPortfolioOptimizationDiscrete,
                    request_deserializer=qutree__pb2.PortfolioDiscreteSolverParamWithOptions.FromString,
                    response_serializer=qutree__pb2.SCFResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'qutree.QuTreeRunner', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class QuTreeRunner(object):
    """QuTree simulator as a service
    """

    @staticmethod
    def RunCircuit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qutree.QuTreeRunner/RunCircuit',
            qutree__pb2.CircuitsWithOptions.SerializeToString,
            qutree__pb2.CircuitResults.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ComputeExpectation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qutree.QuTreeRunner/ComputeExpectation',
            qutree__pb2.CircuitsObservablesWithOptions.SerializeToString,
            qutree__pb2.ExpectationResults.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RunPortfolioOptimization(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qutree.QuTreeRunner/RunPortfolioOptimization',
            qutree__pb2.PortfolioSCFParamWithOptions.SerializeToString,
            qutree__pb2.SCFResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RunPortfolioOptimizationDiscrete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qutree.QuTreeRunner/RunPortfolioOptimizationDiscrete',
            qutree__pb2.PortfolioDiscreteSolverParamWithOptions.SerializeToString,
            qutree__pb2.SCFResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
